"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6925],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(n),g=i,m=c["".concat(s,".").concat(g)]||c[g]||p[g]||r;return n?o.createElement(m,a(a({ref:t},u),{},{components:n})):o.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,a[1]=l;for(var d=2;d<r;d++)a[d]=n[d];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},623:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var o=n(7462),i=(n(7294),n(3905));const r={sidebar_position:3,description:"Learn to write a simple plugin that draws text in the top right corner of the editor window."},a="Simple Plugin",l={unversionedId:"developer-guide/simple-plugin",id:"developer-guide/simple-plugin",title:"Simple Plugin",description:"Learn to write a simple plugin that draws text in the top right corner of the editor window.",source:"@site/docs/developer-guide/simple-plugin.md",sourceDirName:"developer-guide",slug:"/developer-guide/simple-plugin",permalink:"/docs/developer-guide/simple-plugin",draft:!1,editUrl:"https://github.com/pragtical/pragtical.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/developer-guide/simple-plugin.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Learn to write a simple plugin that draws text in the top right corner of the editor window."},sidebar:"tutorialSidebar",previous:{title:"Creating Themes",permalink:"/docs/developer-guide/syntaxes-and-themes/creating-themes"},next:{title:"Commands",permalink:"/docs/developer-guide/commands"}},s={},d=[{value:"What is Simple?",id:"what-is-simple",level:3},{value:"What does the plugin do?",id:"what-does-the-plugin-do",level:3},{value:"I can&#39;t write Lua!",id:"i-cant-write-lua",level:3},{value:"Format of the tutorial",id:"format-of-the-tutorial",level:3},{value:"The code",id:"the-code",level:3},{value:"Further reading",id:"further-reading",level:3}],u={toc:d},c="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"simple-plugin"},"Simple Plugin"),(0,i.kt)("h3",{id:"what-is-simple"},"What is Simple?"),(0,i.kt)("p",null,"Simple is a very basic plugin written with the intention of introducing developers\nwho are new to Pragtical to the process of writing plugins for the editor."),(0,i.kt)("h3",{id:"what-does-the-plugin-do"},"What does the plugin do?"),(0,i.kt)("p",null,"The plugin displays a message (that is taken as input from the user)\nin the top right corner of the editor window. It also allows the user to toggle\nthe visibility of the message."),(0,i.kt)("h3",{id:"i-cant-write-lua"},"I can't write Lua!"),(0,i.kt)("p",null,"If you come from other programming languages, take a look at ",(0,i.kt)("a",{parentName:"p",href:"https://devhints.io/lua"},"Lua cheat sheet"),".\nIf you're new to programming, you can read ",(0,i.kt)("a",{parentName:"p",href:"https://www.lua.org/pil"},"this"),"."),(0,i.kt)("h3",{id:"format-of-the-tutorial"},"Format of the tutorial"),(0,i.kt)("p",null,"The code contains comments detailing what most (if not all)\nof the code in the file does."),(0,i.kt)("h3",{id:"the-code"},"The code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- mod-version:2 -- pragtical 2.0\n\n-- you MUST put mod-version:x on the first line of your plugin\n-- mod-version usually maps to pragtical releases (eg. mod-version: 2 == pragtical 2.0)\n-- pragtical won\'t load the plugin if the mod-version mismatches\n\n-----------------------------------------------------------------------\n-- NAME       : Simple\n-- DESCRIPTION: A simple guide on how to make your first Pragtical plugin\n-- AUTHOR     : Ashwin Godbole (aelobdog)\n-- GOALS      : To render some text inside the editor\n-----------------------------------------------------------------------\n-- Disclaimer :\n-- I am not a lua developer, and my knowledge about writing plugins for\n-- Pragtical is very limited. This file serves the purpose of helping the\n-- reader get started with plugin development for Pragtical, and therefore\n-- demonstrates only some very basic features. For more complex plugin\n-- development, be sure to check out the source code of some other\n-- plugins after going through this file.\n-----------------------------------------------------------------------\n-- Before we start writing any code for the plugin, we must import the\n-- required modules from the "core" package.\n\n-- the "core" module\nlocal core = require "core"\n\n-- the "command" module will help us register commands for our plugin.\nlocal command = require "core.command"\n\n-- the "style" module will allow us to use styling options\nlocal style = require "core.style"\n\n-- the "config" module will be used to store certain things like colors\n-- and functions\nlocal config = require "core.config"\n\n-- the "keymap" module will allow us to set keybindings for our commands\nlocal keymap = require "core.keymap"\n\n-- since we want to modify RootView, we\'ll need to require it first\nlocal RootView = require "core.rootview"\n\n-----------------------------------------------------------------------\n-- per-plugin config must stay in config.plugins.(plugin name)\nconfig.plugins.simple = {}\n\n-- colors are just three or four comma separated values (RGBA) (range 0 - 255)\n-- put inside of \'{ }\'. We will add our color to the config module.\nconfig.plugins.simple.text_color = {200, 140, 220} -- or use `{ common.color "#C88CDC" }`\n-----------------------------------------------------------------------\n-- Let\'s create a function to calculate the coordinates of our text.\n-- While we\'re at it, let\'s add our function to the `config` module.\n-- We\'ll take the message we want to display as the argument to the\n-- function to determine the x and y coordinates of the text.\n\nfunction config.plugins.simple.get_text_coordinates(message)\n   -- For this plugin, we want to display the text on the top right\n   -- corner of the screen. For this, we need to know the editor\'s width\n   -- and height.\n\n   -- The current font\'s size can be obtained from the "style" module.\n   -- The editor\'s dimensions can be obtained by\n   --   1. WIDTH  : core.root_view.size.x\n   --   2. HEIGHT : core.root_view.size.y\n\n   local message_width = style.code_font:get_width(message.." ")\n   local font_height = style.code_font:get_size()\n   local x = core.root_view.size.x - message_width\n   local y = font_height / 2\n\n   return x, y\nend\n-----------------------------------------------------------------------\n-- Let\'s now get to actually drawing the text inside the editor.\n-- In order to "inject" our own code to draw text,\n-- we\'ll need to save the original draw function\n-- We\'ll save `RootView.draw` to a variable we call `parent_draw`\n\nlocal parent_draw = RootView.draw\n\n-- Now let\'s overload the original definition of `draw` in RootView\n-- by redefining the function.\n\nfunction RootView:draw()\n   -- We call the parent\'s function to keep the editor functional...\n   -- obviously we must still draw all the other stuff !\n   -- So we call the `parent_draw` function before doing anything else.\n   parent_draw(self)\n\n   -- we\'ll add an option to toggle the message on and off. let\'s use a\n   -- boolean variable to keep track of whether we want to display the\n   -- message or not.\n   if config.plugins.simple.show_my_message then\n      -- We\'ll be getting the message to display as input from the user\n      -- later. We\'ll store that user input in `config.plugins.simple.hw_message`.\n      -- (NOTE: this variable does not come in-built in pragtical;\n      --        it is a variable that we will define later.)\n\n      -- let\'s store the value of config.plugins.simple.hw_message in a local variable\n      -- `message` in case config.plugins.simple.hw_message we set the message to\n      -- "message not set yet!"\n      local message\n\n      if config.plugins.simple.hw_message then\n          message = config.plugins.simple.hw_message\n      else\n          message = "Message not set yet !"\n      end\n\n      -- let\'s get the coordinates for our text\n      local x, y = config.plugins.simple.get_text_coordinates(message)\n\n      -- let\'s finally draw the text to the window !\n      -- the draw_text function from `renderer` is an important function\n      -- as it is used to display any and all text inside of the editor\n      -- window\n      renderer.draw_text(style.code_font, message, x, y, config.plugins.simple.text_color)\n   end\nend\n-----------------------------------------------------------------------\n-- Let\'s allow the user to turn the message on and off\n-- we\'ll write a function to flip our "show" boolean variable.\n\nlocal function toggle_helloworld()\n   config.plugins.simple.show_my_message = not config.plugins.simple.show_my_message\nend\n-----------------------------------------------------------------------\n-- Finally, let\'s add the toggle function to the command list so that\n-- we can call it from the C-S-p command panel. Let\'s add one command\n-- to toggle the visibility of the message on and off and one to get\n-- the user\'s message and then display it.\n\ncommand.add(nil, {\n   -- Toggle the visibility of the message\n   ["simple:toggle"] = toggle_helloworld,\n\n   -- Set and show the message\n   -- This is the way to get user input through the command bar.\n   -- `core.command_view:enter` takes 2 arguments:\n   --    * the prompt to display before taking input\n   --    * a function that takes the "input" as its argument\n   -- (NOTE: here the variable we are reading input into is `text`)\n   ["simple:setshow"] = function()\n      core.command_view:enter("Test to display", function(text)\n         config.plugins.simple.hw_message = text\n         config.plugins.simple.show_my_message = true\n      end)\n   end\n}\n-----------------------------------------------------------------------\n-- Just for fun, let\'s assign our commands their own keybindings.\n-- Here, we assign the keybinding the same string(its name) as the one\n-- that we set while creating the command\nkeymap.add {\n   ["alt+s"] = "simple:setshow",\n   ["alt+t"] = "simple:toggle",\n}\n')),(0,i.kt)("h3",{id:"further-reading"},"Further reading"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://rxi.github.io/lite_an_implementation_overview.html"},"Lite: An Implementation Overview"),",\nan excellent post by rxi that stays mostly relevant to Pragtical."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/en/tutorials/api-overview"},"API overview"),", where some APIs are explained.")))}p.isMDXComponent=!0}}]);