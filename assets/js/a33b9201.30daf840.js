"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8428],{51595:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>l});var r=i(85893),o=i(11151);const t={sidebar_position:4},d="dirmonitor",c={id:"api/dirmonitor",title:"dirmonitor",description:"Functionality that allows to monitor a directory or file for changes",source:"@site/docs/api/dirmonitor.md",sourceDirName:"api",slug:"/api/dirmonitor",permalink:"/docs/api/dirmonitor",draft:!1,unlisted:!1,editUrl:"https://github.com/pragtical/pragtical.github.io/edit/main/docs/api/dirmonitor.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"diff",permalink:"/docs/api/diff"},next:{title:"encoding",permalink:"/docs/api/encoding"}},a={},l=[{value:"backends",id:"backends",level:2},{value:"new",id:"new",level:2},{value:"check",id:"check",level:2},{value:"mode",id:"mode",level:2},{value:"unwatch",id:"unwatch",level:2},{value:"watch",id:"watch",level:2}];function s(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"dirmonitor",children:"dirmonitor"}),"\n",(0,r.jsx)(n.p,{children:"Functionality that allows to monitor a directory or file for changes\nusing the native facilities provided by the current operating system\nfor better efficiency and performance."}),"\n",(0,r.jsx)(n.h2,{id:"backends",children:"backends"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function dirmonitor.backends()\n  -> table.\n"})}),"\n",(0,r.jsx)(n.p,{children:"List all available dirmonitor backends"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"new",children:"new"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function dirmonitor.new(backend?: string)\n  -> dirmonitor\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a new dirmonitor object."}),"\n",(0,r.jsxs)(n.p,{children:["@",(0,r.jsx)(n.em,{children:"param"})," ",(0,r.jsx)(n.code,{children:"backend"})," \u2014 Name of the dirmonitor backend to be used"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"check",children:"check"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) dirmonitor:check(callback: fun(fd_or_path: string|integer), error_callback: fun(error: any):nil)\n  -> changes: boolean?\n"})}),"\n",(0,r.jsx)(n.p,{children:"Verify if the resources registered for monitoring have changed, should\nbe called periodically to check for changes."}),"\n",(0,r.jsx)(n.p,{children:'The callback will be called for each file or directory that was:\nedited, removed or added. A file descriptor will be passed to the\ncallback in "multiple" mode or a path in "single" mode.'}),"\n",(0,r.jsx)(n.p,{children:"If an error occurred during the callback execution, the error callback will be called with the error object.\nThis callback should not manipulate coroutines to avoid deadlocks."}),"\n",(0,r.jsxs)(n.p,{children:["@",(0,r.jsx)(n.em,{children:"return"})," ",(0,r.jsx)(n.code,{children:"changes"})," \u2014 True when changes were detected."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"mode",children:"mode"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'(method) dirmonitor:mode()\n  -> "multiple"|"single"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Get the working mode for the current file system monitoring backend."}),"\n",(0,r.jsx)(n.p,{children:'"multiple": various file descriptors are needed to recursively monitor a\ndirectory contents, backends: inotify and kqueue.'}),"\n",(0,r.jsx)(n.p,{children:'"single": a single process takes care of monitoring a path recursively\nso no individual file descriptors are used, backends: win32 and fsevents.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'return #1:\n    | "single"\n    | "multiple"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"unwatch",children:"unwatch"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) dirmonitor:unwatch(fd_or_path: string|integer)\n"})}),"\n",(0,r.jsx)(n.p,{children:'Stops monitoring a file descriptor in "multiple" mode\nor in "single" mode a directory path.'}),"\n",(0,r.jsxs)(n.p,{children:["@",(0,r.jsx)(n.em,{children:"param"})," ",(0,r.jsx)(n.code,{children:"fd_or_path"})," \u2014 A file descriptor or path."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"watch",children:"watch"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) dirmonitor:watch(path: string)\n  -> fd: integer\n"})}),"\n",(0,r.jsx)(n.p,{children:"Monitors a directory or file for changes."}),"\n",(0,r.jsx)(n.p,{children:'In "multiple" mode you will need to call this method more than once to\nrecursively monitor directories and files.'}),"\n",(0,r.jsx)(n.p,{children:'In "single" mode you will only need to call this method for the parent\ndirectory and every sub directory and files will get automatically monitored.'}),"\n",(0,r.jsxs)(n.p,{children:["@",(0,r.jsx)(n.em,{children:"return"})," ",(0,r.jsx)(n.code,{children:"fd"})," \u2014 The file descriptor id assigned to the monitored path when"]}),"\n",(0,r.jsx)(n.p,{children:'the mode is "multiple", in "single" mode: 1 for success or -1 on failure.'}),"\n",(0,r.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>d});var r=i(67294);const o={},t=r.createContext(o);function d(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);