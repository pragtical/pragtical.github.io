"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2986],{8583:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var r=n(5893),t=n(1151);const a={sidebar_position:29},i="core.process",c={id:"api/core.process",title:"core.process",description:"process.stream",source:"@site/docs/api/core.process.md",sourceDirName:"api",slug:"/api/core.process",permalink:"/docs/api/core.process",draft:!1,unlisted:!1,editUrl:"https://github.com/pragtical/pragtical.github.io/edit/main/docs/api/core.process.md",tags:[],version:"current",sidebarPosition:29,frontMatter:{sidebar_position:29},sidebar:"tutorialSidebar",previous:{title:"core.object",permalink:"/docs/api/core.object"},next:{title:"core.project",permalink:"/docs/api/core.project"}},o={},d=[{value:"process.stream",id:"processstream",level:2},{value:"process.stream.__index",id:"processstream__index",level:2},{value:"process.stream.buf",id:"processstreambuf",level:2},{value:"process.stream.len",id:"processstreamlen",level:2},{value:"process.stream",id:"processstream-1",level:2},{value:"__index",id:"__index",level:3},{value:"buf",id:"buf",level:3},{value:"fd",id:"fd",level:3},{value:"len",id:"len",level:3},{value:"process",id:"process",level:3},{value:"new",id:"new",level:3},{value:"close",id:"close",level:3},{value:"read",id:"read",level:3},{value:"write",id:"write",level:3},{value:"process.stream.readoption",id:"processstreamreadoption",level:2},{value:"scan",id:"scan",level:3},{value:"timeout",id:"timeout",level:3},{value:"process.stream.writeoption",id:"processstreamwriteoption",level:2},{value:"scan",id:"scan-1",level:3},{value:"process.__index",id:"process__index",level:2},{value:"process.start",id:"processstart",level:2},{value:"process.stream.close",id:"processstreamclose",level:2},{value:"process.stream.new",id:"processstreamnew",level:2},{value:"process.stream.read",id:"processstreamread",level:2},{value:"process.stream.write",id:"processstreamwrite",level:2},{value:"process.wait",id:"processwait",level:2}];function l(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"coreprocess",children:"core.process"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'local process = require "core.process"\n'})}),"\n",(0,r.jsx)(s.h2,{id:"processstream",children:"process.stream"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(field) process.stream: process.stream\n"})}),"\n",(0,r.jsx)(s.p,{children:"An abstraction over the standard input and outputs of a process\nthat allows you to read and write data easily."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"processstream__index",children:"process.stream.__index"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(field) process.stream.__index: process.stream\n"})}),"\n",(0,r.jsx)(s.p,{children:"An abstraction over the standard input and outputs of a process\nthat allows you to read and write data easily."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"processstreambuf",children:"process.stream.buf"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(field) process.stream.buf: string[]\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"processstreamlen",children:"process.stream.len"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(field) process.stream.len: number\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"processstream-1",children:"process.stream"}),"\n",(0,r.jsx)(s.p,{children:"An abstraction over the standard input and outputs of a process\nthat allows you to read and write data easily."}),"\n",(0,r.jsx)(s.h3,{id:"__index",children:"__index"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(field) __index: process.stream\n"})}),"\n",(0,r.jsx)(s.p,{children:"An abstraction over the standard input and outputs of a process\nthat allows you to read and write data easily."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"buf",children:"buf"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(field) buf: string[]\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"fd",children:"fd"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(field) fd: process.streamtype\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"len",children:"len"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(field) len: number\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"process",children:"process"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(field) process: process\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"new",children:"new"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"function process.stream.new(proc: process, fd: process.streamtype)\n  -> process.stream\n"})}),"\n",(0,r.jsx)(s.p,{children:"Creates a stream from a process."}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"proc"})," \u2014 The process to wrap."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"fd"})," \u2014 The standard stream of the process to wrap."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"close",children:"close"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(method) process.stream:close()\n"})}),"\n",(0,r.jsx)(s.p,{children:"Closes the stream and its underlying resources."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"read",children:"read"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'(method) process.stream:read(bytes: integer|`"L"`|`"all"`|`"line"`, options?: process.stream.readoption)\n  -> data: string|nil\n'})}),"\n",(0,r.jsx)(s.p,{children:"Reads data from the stream."}),"\n",(0,r.jsxs)(s.p,{children:["When called inside a coroutine such as ",(0,r.jsx)(s.code,{children:"core.add_thread()"}),",\nthe function yields to the main thread occassionally to avoid blocking the editor.\nIf the function is not called inside the coroutine, the function returns immediately\nwithout waiting for more data."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"bytes"})," \u2014 The format or number of bytes to read."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"options"})," \u2014 Options for reading from the stream."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"return"})," ",(0,r.jsx)(s.code,{children:"data"})," \u2014 The string read from the stream, or nil if no data could be read."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'bytes:\n    | `"line"` -- Reads a single line\n    | `"all"` -- Reads the entire stream\n    | `"L"` -- Reads a single line, keeping the trailing newline character.\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"write",children:"write"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(method) process.stream:write(bytes: string, options?: process.stream.writeoption)\n  -> num_bytes: integer\n"})}),"\n",(0,r.jsx)(s.p,{children:"Writes data into the stream."}),"\n",(0,r.jsxs)(s.p,{children:["When called inside a coroutine such as ",(0,r.jsx)(s.code,{children:"core.add_thread()"}),",\nthe function yields to the main thread occassionally to avoid blocking the editor.\nIf the function is not called inside the coroutine,\nthe function writes as much data as possible before returning."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"bytes"})," \u2014 The bytes to write into the stream."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"options"})," \u2014 Options for writing to the stream."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"return"})," ",(0,r.jsx)(s.code,{children:"num_bytes"})," \u2014 The number of bytes written to the stream."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"processstreamreadoption",children:"process.stream.readoption"}),"\n",(0,r.jsx)(s.p,{children:"Options that can be passed to stream.read()."}),"\n",(0,r.jsx)(s.h3,{id:"scan",children:"scan"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(field) scan: number\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The number of seconds to yield in a coroutine. Defaults to ",(0,r.jsx)(s.code,{children:"1/config.fps"}),"."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"timeout",children:"timeout"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(field) timeout: number\n"})}),"\n",(0,r.jsx)(s.p,{children:"The number of seconds to wait before the function throws an error. Reads do not time out by default."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"processstreamwriteoption",children:"process.stream.writeoption"}),"\n",(0,r.jsx)(s.p,{children:"Options that can be passed into stream.write()."}),"\n",(0,r.jsx)(s.h3,{id:"scan-1",children:"scan"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(field) scan: number\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The number of seconds to yield in a coroutine. Defaults to ",(0,r.jsx)(s.code,{children:"1/config.fps"}),"."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"process__index",children:"process.__index"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(method) process:__index(k: any)\n  -> function|unknown\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"processstart",children:"process.start"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"function process.start(...any)\n  -> table\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"processstreamclose",children:"process.stream.close"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(method) process.stream:close()\n"})}),"\n",(0,r.jsx)(s.p,{children:"Closes the stream and its underlying resources."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"processstreamnew",children:"process.stream.new"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"function process.stream.new(proc: process, fd: process.streamtype)\n  -> process.stream\n"})}),"\n",(0,r.jsx)(s.p,{children:"Creates a stream from a process."}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"proc"})," \u2014 The process to wrap."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"fd"})," \u2014 The standard stream of the process to wrap."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"processstreamread",children:"process.stream.read"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'(method) process.stream:read(bytes: integer|`"L"`|`"all"`|`"line"`, options?: process.stream.readoption)\n  -> data: string|nil\n'})}),"\n",(0,r.jsx)(s.p,{children:"Reads data from the stream."}),"\n",(0,r.jsxs)(s.p,{children:["When called inside a coroutine such as ",(0,r.jsx)(s.code,{children:"core.add_thread()"}),",\nthe function yields to the main thread occassionally to avoid blocking the editor.\nIf the function is not called inside the coroutine, the function returns immediately\nwithout waiting for more data."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"bytes"})," \u2014 The format or number of bytes to read."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"options"})," \u2014 Options for reading from the stream."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"return"})," ",(0,r.jsx)(s.code,{children:"data"})," \u2014 The string read from the stream, or nil if no data could be read."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'bytes:\n    | `"line"` -- Reads a single line\n    | `"all"` -- Reads the entire stream\n    | `"L"` -- Reads a single line, keeping the trailing newline character.\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"processstreamwrite",children:"process.stream.write"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(method) process.stream:write(bytes: string, options?: process.stream.writeoption)\n  -> num_bytes: integer\n"})}),"\n",(0,r.jsx)(s.p,{children:"Writes data into the stream."}),"\n",(0,r.jsxs)(s.p,{children:["When called inside a coroutine such as ",(0,r.jsx)(s.code,{children:"core.add_thread()"}),",\nthe function yields to the main thread occassionally to avoid blocking the editor.\nIf the function is not called inside the coroutine,\nthe function writes as much data as possible before returning."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"bytes"})," \u2014 The bytes to write into the stream."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"options"})," \u2014 Options for writing to the stream."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"return"})," ",(0,r.jsx)(s.code,{children:"num_bytes"})," \u2014 The number of bytes written to the stream."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"processwait",children:"process.wait"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"(method) process:wait(timeout?: number, scan?: number)\n  -> exit_code: integer|nil\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Waits for the process to exit.\nWhen called inside a coroutine such as ",(0,r.jsx)(s.code,{children:"core.add_thread()"}),",\nthe function yields to the main thread occassionally to avoid blocking the editor.\nOtherwise, the function blocks the editor until the process exited or the timeout has expired."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"timeout"})," \u2014 The amount of seconds to wait. If omitted, the function will wait indefinitely."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"param"})," ",(0,r.jsx)(s.code,{children:"scan"})," \u2014 The amount of seconds to yield while scanning. If omittted, the scan rate will be the FPS."]}),"\n",(0,r.jsxs)(s.p,{children:["@",(0,r.jsx)(s.em,{children:"return"})," ",(0,r.jsx)(s.code,{children:"exit_code"})," \u2014 The exit code for this process, or nil if the wait timed out."]}),"\n",(0,r.jsx)(s.hr,{})]})}function h(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>c,a:()=>i});var r=n(7294);const t={},a=r.createContext(t);function i(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);