"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5192],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var m=a.createContext({}),d=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=d(e.components);return a.createElement(m.Provider,{value:n},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,m=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),l=d(t),u=i,h=l["".concat(m,".").concat(u)]||l[u]||p[u]||o;return t?a.createElement(h,r(r({ref:n},s),{},{components:t})):a.createElement(h,r({ref:n},s))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var c={};for(var m in n)hasOwnProperty.call(n,m)&&(c[m]=n[m]);c.originalType=e,c[l]="string"==typeof e?e:i,r[1]=c;for(var d=2;d<o;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5626:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var a=t(7462),i=(t(7294),t(3905));const o={sidebar_position:4,description:"Learn how to create and call commands programmatically."},r="Commands",c={unversionedId:"developer-guide/commands",id:"developer-guide/commands",title:"Commands",description:"Learn how to create and call commands programmatically.",source:"@site/docs/developer-guide/commands.md",sourceDirName:"developer-guide",slug:"/developer-guide/commands",permalink:"/docs/developer-guide/commands",draft:!1,editUrl:"https://github.com/pragtical/pragtical.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/developer-guide/commands.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Learn how to create and call commands programmatically."},sidebar:"tutorialSidebar",previous:{title:"Simple Plugin",permalink:"/docs/developer-guide/simple-plugin"},next:{title:"Managing Keyboard Shortcuts",permalink:"/docs/developer-guide/managing-keyboard-shortcuts"}},m={},d=[{value:"Adding commands",id:"adding-commands",level:3},{value:"Running commands",id:"running-commands",level:3},{value:"Utility functions",id:"utility-functions",level:3}],s={toc:d},l="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(l,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"commands"},"Commands"),(0,i.kt)("p",null,"As explained in the User Guide, a lot of Pragtical's functionalities\nare implemented as commands."),(0,i.kt)("p",null,"Each command has a predicate \u2014 a condition to check if Pragtical should\nrun the command.\nThe predicate will return a boolean and other values to be consumed\nby the command function."),(0,i.kt)("p",null,"The simplest command is a class.\nThis tells Pragtical to check whether the current view is an instance of\na class.\nFor instance, one can pass ",(0,i.kt)("inlineCode",{parentName:"p"},"DocView")," as a predicate so that the command\nonly runs if the user is editing a document."),(0,i.kt)("p",null,"A simpler form of the predicate above is a string that specifies the\nmodule to import.\nPragtical will import the module and checks whether the current view\nis an instance of the module.\nTo simplify our previous example, we can simply pass ",(0,i.kt)("inlineCode",{parentName:"p"},"core.docview"),"\nas a predicate to avoid importing ",(0,i.kt)("inlineCode",{parentName:"p"},"DocView")," ourselves."),(0,i.kt)("p",null,"The string predicate also supports strict checking \u2014\nwhen the module name ends with ",(0,i.kt)("inlineCode",{parentName:"p"},"!"),", Pragtical will check whether the\ncurrent view is an instance of the class and not it's child classes.\nFor instance, passing ",(0,i.kt)("inlineCode",{parentName:"p"},"core.view")," will match ",(0,i.kt)("inlineCode",{parentName:"p"},"DocView")," as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"CommandView"),",\nbut passing ",(0,i.kt)("inlineCode",{parentName:"p"},"core.view!")," will only match ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," and not ",(0,i.kt)("inlineCode",{parentName:"p"},"DocView"),"."),(0,i.kt)("p",null,"The class and string predicates returns a boolean, the current view\nand other values passed into the predicate."),(0,i.kt)("p",null,"Lastly, the predicate could also be a function.\nThis function accepts a variable number of arguments, pass\nthrough ",(0,i.kt)("inlineCode",{parentName:"p"},"command.add()")," and returns a boolean and other values.\nIf the function returns true, the command will be executed.\nOther values are passed into the command function as arguments.\nFor instance, we can create a predicate like this instead of passing\n",(0,i.kt)("inlineCode",{parentName:"p"},"DocView")," as a predicate:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local function predicate()\n  return core.current_view:is(DocView)\nend\n")),(0,i.kt)("h3",{id:"adding-commands"},"Adding commands"),(0,i.kt)("p",null,"To add a command, use ",(0,i.kt)("inlineCode",{parentName:"p"},"command.add()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local type function Predicate(any...): boolean\n\nfunction command.add(predicate: Predicate | string | Object,\n                      commands: {string, Predicate}): () end\n")),(0,i.kt)("p",null,"The first argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"command.add()")," is the predicate.\nThis predicate is set for each command passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"command.add()"),".\nIf no predicates are required, ",(0,i.kt)("inlineCode",{parentName:"p"},"nil")," can be passed.\nThe second parameter is a table of functions mapped to each command."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local command = require "core.command"\nlocal DocView = require "core.docview"\n\n-- add "test:print-message" which prints a message to stdout\n-- this command will be available at all times\ncommand.add(nil, { ["test:print-message"] = function() core.log("Hello world!") end })\n\n-- a predicate function\nlocal function docview_predicate(custom_msg)\n  return core.active_view:is(DocView), core.active_view, true, custom_msg\nend\n\nlocal function print_doc_name(dv, custom_predicate, custom_msg)\n  if not custom_msg then\n    custom_msg = custom_predicate and "custom predicate used!: %s" or "name: %s"\n  end\n  core.log(custom_msg, dv.doc.filename)\nend\n\n-- add "test:print-doc-name" which prints the name of currently opened file\n-- This command will only be available if the user is editing a document.\n-- this will log "custom predicate used!: <filename>"\ncommand.add(docview_predicate, { ["test:print-doc-name"] = print_doc_name })\n\n-- the line above can be simplified into this\n-- this will log "name: <filename>"\ncommand.add(DocView, { ["test:print-doc-name"] = print_doc_name })\n\n-- the line above can be simplified into this, removing a require\n-- this will log "name: <filename>"\ncommand.add("core.docview", { ["test:print-doc-name"] = print_doc_name })\n\n-- if you have subclasses of DocView and don\'t want to match them,\n-- append a exclamation mark at the end.\n-- this will log "name: <filename>"\ncommand.add("core.docview!", { ["test:print-doc-name"] = print_doc_name })\n')),(0,i.kt)("h3",{id:"running-commands"},"Running commands"),(0,i.kt)("p",null,"Users can run these commands via the command palette while\nplugins can run these commands programmatically via ",(0,i.kt)("inlineCode",{parentName:"p"},"command.perform()"),"."),(0,i.kt)("p",null,"If you want to check whether a command can run without running the command,\n(the command exists and the predicate passed),\nyou can use ",(0,i.kt)("inlineCode",{parentName:"p"},"command.is_valid()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"function command.perform(cmd: string, ...: any): boolean end\nfunction command.is_valid(cmd: string, ...: any): boolean end\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"command.perform()")," accepts a command as the first parameter.\nIf the command requires other parameters, it can be passed into\n",(0,i.kt)("inlineCode",{parentName:"p"},"command.perform()"),".\nIf a command is found and executed successfully, the function\nreturns ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local command = require "core.command"\n\n-- open the command prompt\ncommand.perform "core:find-command"\n\n-- assuming we\'ve run the code in the section above,\n-- we can try passing a custom message via command:perform!\ncommand.perform("test:print-doc-name", "custom message! %s")\n\n-- command palette should be accessible all the time\n-- prints true\nprint(command.is_valid "core:find-command")\n')),(0,i.kt)("h3",{id:"utility-functions"},"Utility functions"),(0,i.kt)("p",null,"To get a prettified name of a command, shown in the command palette,\nuse ",(0,i.kt)("inlineCode",{parentName:"p"},"command.prettify_name()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"function command.prettify_name(name: string): string end\n")),(0,i.kt)("p",null,"The function accepts a command-like string and returns a prettified\ncommand string.\nAll the dashes are replaced with spaces and the first letter of\nall words are capitalized."))}p.isMDXComponent=!0}}]);