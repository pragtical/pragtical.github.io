"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2726],{28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var c=a(96540);const t={},s=c.createContext(t);function o(e){const n=c.useContext(s);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),c.createElement(s.Provider,{value:n},e.children)}},89315:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>r});const c=JSON.parse('{"id":"developer-guide/commands-and-shortcuts/commands","title":"Commands","description":"Learn how to create and call commands programmatically.","source":"@site/docs/developer-guide/commands-and-shortcuts/commands.md","sourceDirName":"developer-guide/commands-and-shortcuts","slug":"/developer-guide/commands-and-shortcuts/commands","permalink":"/docs/developer-guide/commands-and-shortcuts/commands","draft":false,"unlisted":false,"editUrl":"https://github.com/pragtical/pragtical.github.io/edit/main/docs/developer-guide/commands-and-shortcuts/commands.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"description":"Learn how to create and call commands programmatically."},"sidebar":"tutorialSidebar","previous":{"title":"Commands and Shortcuts","permalink":"/docs/category/commands-and-shortcuts"},"next":{"title":"Managing Keyboard Shortcuts","permalink":"/docs/developer-guide/commands-and-shortcuts/managing-keyboard-shortcuts"}}');var t=a(74848),s=a(28453);const o={sidebar_position:1,description:"Learn how to create and call commands programmatically."},i="Commands",d={},r=[{value:"Adding commands",id:"adding-commands",level:3},{value:"Running commands",id:"running-commands",level:3},{value:"Utility functions",id:"utility-functions",level:3}];function m(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"commands",children:"Commands"})}),"\n",(0,t.jsx)(n.p,{children:"As explained in the User Guide, a lot of Pragtical's functionalities\nare implemented as commands."}),"\n",(0,t.jsx)(n.p,{children:"Each command has a predicate \u2014 a condition to check if Pragtical should\nrun the command.\nThe predicate will return a boolean and other values to be consumed\nby the command function."}),"\n",(0,t.jsxs)(n.p,{children:["The simplest command is a class.\nThis tells Pragtical to check whether the current view is an instance of\na class.\nFor instance, one can pass ",(0,t.jsx)(n.code,{children:"DocView"})," as a predicate so that the command\nonly runs if the user is editing a document."]}),"\n",(0,t.jsxs)(n.p,{children:["A simpler form of the predicate above is a string that specifies the\nmodule to import.\nPragtical will import the module and checks whether the current view\nis an instance of the module.\nTo simplify our previous example, we can simply pass ",(0,t.jsx)(n.code,{children:"core.docview"}),"\nas a predicate to avoid importing ",(0,t.jsx)(n.code,{children:"DocView"})," ourselves."]}),"\n",(0,t.jsxs)(n.p,{children:["The string predicate also supports strict checking \u2014\nwhen the module name ends with ",(0,t.jsx)(n.code,{children:"!"}),", Pragtical will check whether the\ncurrent view is an instance of the class and not it's child classes.\nFor instance, passing ",(0,t.jsx)(n.code,{children:"core.view"})," will match ",(0,t.jsx)(n.code,{children:"DocView"})," as well as ",(0,t.jsx)(n.code,{children:"CommandView"}),",\nbut passing ",(0,t.jsx)(n.code,{children:"core.view!"})," will only match ",(0,t.jsx)(n.code,{children:"View"})," and not ",(0,t.jsx)(n.code,{children:"DocView"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The class and string predicates returns a boolean, the current view\nand other values passed into the predicate."}),"\n",(0,t.jsxs)(n.p,{children:["Lastly, the predicate could also be a function.\nThis function accepts a variable number of arguments, pass\nthrough ",(0,t.jsx)(n.code,{children:"command.add()"})," and returns a boolean and other values.\nIf the function returns true, the command will be executed.\nOther values are passed into the command function as arguments.\nFor instance, we can create a predicate like this instead of passing\n",(0,t.jsx)(n.code,{children:"DocView"})," as a predicate:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local function predicate()\n  return core.current_view:is(DocView)\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"adding-commands",children:"Adding commands"}),"\n",(0,t.jsxs)(n.p,{children:["To add a command, use ",(0,t.jsx)(n.code,{children:"command.add()"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local type function Predicate(any...): boolean\n\nfunction command.add(predicate: Predicate | string | Object,\n                      commands: {string, Predicate}): () end\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The first argument to ",(0,t.jsx)(n.code,{children:"command.add()"})," is the predicate.\nThis predicate is set for each command passed to ",(0,t.jsx)(n.code,{children:"command.add()"}),".\nIf no predicates are required, ",(0,t.jsx)(n.code,{children:"nil"})," can be passed.\nThe second parameter is a table of functions mapped to each command."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local command = require "core.command"\nlocal DocView = require "core.docview"\n\n-- add "test:print-message" which prints a message to stdout\n-- this command will be available at all times\ncommand.add(nil, { ["test:print-message"] = function() core.log("Hello world!") end })\n\n-- a predicate function\nlocal function docview_predicate(custom_msg)\n  return core.active_view:is(DocView), core.active_view, true, custom_msg\nend\n\nlocal function print_doc_name(dv, custom_predicate, custom_msg)\n  if not custom_msg then\n    custom_msg = custom_predicate and "custom predicate used!: %s" or "name: %s"\n  end\n  core.log(custom_msg, dv.doc.filename)\nend\n\n-- add "test:print-doc-name" which prints the name of currently opened file\n-- This command will only be available if the user is editing a document.\n-- this will log "custom predicate used!: <filename>"\ncommand.add(docview_predicate, { ["test:print-doc-name"] = print_doc_name })\n\n-- the line above can be simplified into this\n-- this will log "name: <filename>"\ncommand.add(DocView, { ["test:print-doc-name"] = print_doc_name })\n\n-- the line above can be simplified into this, removing a require\n-- this will log "name: <filename>"\ncommand.add("core.docview", { ["test:print-doc-name"] = print_doc_name })\n\n-- if you have subclasses of DocView and don\'t want to match them,\n-- append a exclamation mark at the end.\n-- this will log "name: <filename>"\ncommand.add("core.docview!", { ["test:print-doc-name"] = print_doc_name })\n'})}),"\n",(0,t.jsx)(n.h3,{id:"running-commands",children:"Running commands"}),"\n",(0,t.jsxs)(n.p,{children:["Users can run these commands via the command palette while\nplugins can run these commands programmatically via ",(0,t.jsx)(n.code,{children:"command.perform()"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If you want to check whether a command can run without running the command,\n(the command exists and the predicate passed),\nyou can use ",(0,t.jsx)(n.code,{children:"command.is_valid()"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function command.perform(cmd: string, ...: any): boolean end\nfunction command.is_valid(cmd: string, ...: any): boolean end\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"command.perform()"})," accepts a command as the first parameter.\nIf the command requires other parameters, it can be passed into\n",(0,t.jsx)(n.code,{children:"command.perform()"}),".\nIf a command is found and executed successfully, the function\nreturns ",(0,t.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local command = require "core.command"\n\n-- open the command prompt\ncommand.perform "core:find-command"\n\n-- assuming we\'ve run the code in the section above,\n-- we can try passing a custom message via command:perform!\ncommand.perform("test:print-doc-name", "custom message! %s")\n\n-- command palette should be accessible all the time\n-- prints true\nprint(command.is_valid "core:find-command")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"utility-functions",children:"Utility functions"}),"\n",(0,t.jsxs)(n.p,{children:["To get a prettified name of a command, shown in the command palette,\nuse ",(0,t.jsx)(n.code,{children:"command.prettify_name()"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function command.prettify_name(name: string): string end\n"})}),"\n",(0,t.jsx)(n.p,{children:"The function accepts a command-like string and returns a prettified\ncommand string.\nAll the dashes are replaced with spaces and the first letter of\nall words are capitalized."})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}}}]);