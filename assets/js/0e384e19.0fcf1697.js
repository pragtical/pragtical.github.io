"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9671],{7876:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var t=i(5893),r=i(1151);const a={sidebar_position:1,description:"Welcome to Pragtical!"},s="Introduction",o={id:"intro",title:"Introduction",description:"Welcome to Pragtical!",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/pragtical/pragtical.github.io/edit/main/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Welcome to Pragtical!"},sidebar:"tutorialSidebar",next:{title:"Set Up",permalink:"/docs/category/set-up"}},l={},c=[{value:"History",id:"history",level:2},{value:"Name",id:"name",level:2},{value:"Goals",id:"goals",level:2},{value:"Performance",id:"performance",level:3},{value:"More Features",id:"more-features",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Pragtical"})," - The practical and pragmatic code editor."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"screenshot",src:i(3342).Z+"",width:"1870",height:"1043"})}),"\n",(0,t.jsx)(n.p,{children:"Pragtical is a cross-platform code editor with a modern graphical interface\ndeveloped using C and Lua(JIT), which utilizes SDL for input management and\nuser interface rendering. It is a lighter alternative to web-based editors like\nVSCode and can be easily extended or themed with plugins written in Lua.\nCurrently, it has syntax support for various programming languages (contributed\nby the community), adding new ones is straightforward. Some of its core\nfeatures include: auto-completion, easy graphical configuration or advanced\nconfiguration with Lua, support for multiple file encodings, multi-threaded\nproject-wide find and replace, a command palette for a keyboard-focused workflow,\ngraphical and keyboard-driven file navigation, customizability of key bindings,\nand more. Other features shipped as plugins include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/plugins?plugin=lsp",children:"LSP"})," (implementing Language Server Protocol support for intellisense)"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/plugins?plugin=editorconfig",children:"EditorConfig"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/plugins?plugin=terminal",children:"Integrated Terminal"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/plugins?plugin=evergreen",children:"TreeSitter"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/plugins?plugin=formatter",children:"Code Formatters"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/plugins?plugin=scm",children:"Source Control Management"})," (Git and Fossil)"]}),"\n",(0,t.jsxs)(n.li,{children:["and more (",(0,t.jsx)(n.a,{href:"https://github.com/pragtical/plugins",children:"https://github.com/pragtical/plugins"}),")..."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"history",children:"History"}),"\n",(0,t.jsxs)(n.p,{children:["Originally, ",(0,t.jsx)(n.strong,{children:"Pragtical"})," was forked from ",(0,t.jsx)(n.a,{href:"https://github.com/lite-xl/lite-xl",children:"Lite XL"})," (which is also a fork of ",(0,t.jsx)(n.a,{href:"https://github.com/rxi/lite",children:"lite"}),")\nwith a focus on being practical rather than minimalist. Over time, it has gained\nits own identity with various features and improvements not available in its\npredecessors. If you're interested, some of the reasons for the fork are explained\n",(0,t.jsx)(n.a,{href:"https://github.com/pragtical/pragtical/issues/6#issuecomment-1581650875",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"name",children:"Name"}),"\n",(0,t.jsxs)(n.p,{children:["The name was chosen as a counter-response to the approach taken by its\nimmediate predecessor. It is a mixture of the words ",(0,t.jsx)(n.code,{children:"pragmatic"})," and ",(0,t.jsx)(n.code,{children:"practical"}),",\ntwo words that properly define our development approach as follows:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"governed through practice or action, rather than theory, speculation or idealism"}),"\n",(0,t.jsx)(n.li,{children:"willing to see things as they really are and deal with them sensibly"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"As a result we belief that new features introduced through pull requests should\nbe evaluated taking a practical approach, without going into lenghty idealistic\ndiscussions that slowdown progress, merging code when logical."}),"\n",(0,t.jsx)(n.h2,{id:"goals",children:"Goals"}),"\n",(0,t.jsx)(n.p,{children:"We differentiate from our ancestors by striving to make Pragtical an editor\nthat has amplified the set of features, to give you and us a better out of the\nbox experience, while keeping an eye on performance and ease of extensibility.\nAlso, we are simplifying the release process by reducing the amount of builds\nto choose from and trying a release often approach."}),"\n",(0,t.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"JIT"})," - Pragtical takes a LuaJIT first approach, meaning that our official\nbuilds use LuaJIT instead of PUC Lua for the performance benefits that come\nwith it. Also having a LuaJIT first approach gives us FFI for free which allows\neasy interfacing with native C libraries for easier plugin development. LuaJIT\nhas proven to be a mature Lua implementation that will provide a stable\ndevelopment ecosystem for the foreseeable future."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Threading"})," - a supported feature inside the core on components where it is\npractical to use, like file searching and replacing, where performance gains are\nevident."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"more-features",children:"More Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Widgets"})," - more tightly integrated as part of the core for easier gui\ndevelopment and reusability, also ensuring that plugin developers can with\nmore ease develop user interfaces when in need."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Settings UI"})," - if you are not using a terminal editor like n/vim it means\nyou are looking for a more point and click approach which is why we include a\ngraphical interface to adjust your preferences out of the box. But don't\nworry, configuring the editor through Lua will keep working because it is also\npragtical \ud83d\ude09"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Encoding"})," - while UTF-8 has overtaken as the preferred encoding for text\ndocuments for its convenience, we can sometimes encounter a document in another\nencoding. Loading and saving documents with different encodings will be\nsupported for when the need arrives, a feature that is also commonly found in\nother editors because it is pragtical."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"IPC"})," - shared memory functionality is part of the core and IPC plugin\nshipped by default to allow opening files and tab dragging between currently\nopened instances."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"CLI"})," - Integrated command line interface API that can be extended by\nplugins to provide new CLI flags."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Search/Replace"})," - Project-wide search and replace support, better user\ninterface for both documents and project search/replace."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},3342:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/1-8c32578d91ec6de4dbd8906447aa1858.png"},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>s});var t=i(7294);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);