"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8436],{28453:(e,s,r)=>{r.d(s,{R:()=>c,x:()=>d});var n=r(96540);const i={},l=n.createContext(i);function c(e){const s=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(l.Provider,{value:s},e.children)}},35445:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>t,contentTitle:()=>d,default:()=>R,frontMatter:()=>c,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"api/process","title":"process","description":"Functionality that allows you to launch subprocesses and read","source":"@site/docs/api/process.md","sourceDirName":"api","slug":"/api/process","permalink":"/docs/api/process","draft":false,"unlisted":false,"editUrl":"https://github.com/pragtical/pragtical.github.io/edit/main/docs/api/process.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"encoding","permalink":"/docs/api/encoding"},"next":{"title":"regex","permalink":"/docs/api/regex"}}');var i=r(74848),l=r(28453);const c={sidebar_position:7},d="process",t={},o=[{value:"ERROR_INVAL",id:"error_inval",level:2},{value:"ERROR_NOMEM",id:"error_nomem",level:2},{value:"ERROR_PIPE",id:"error_pipe",level:2},{value:"ERROR_TIMEDOUT",id:"error_timedout",level:2},{value:"ERROR_WOULDBLOCK",id:"error_wouldblock",level:2},{value:"REDIRECT_DEFAULT",id:"redirect_default",level:2},{value:"REDIRECT_DISCARD",id:"redirect_discard",level:2},{value:"REDIRECT_PARENT",id:"redirect_parent",level:2},{value:"REDIRECT_PIPE",id:"redirect_pipe",level:2},{value:"REDIRECT_STDOUT",id:"redirect_stdout",level:2},{value:"STREAM_STDERR",id:"stream_stderr",level:2},{value:"STREAM_STDIN",id:"stream_stdin",level:2},{value:"STREAM_STDOUT",id:"stream_stdout",level:2},{value:"WAIT_DEADLINE",id:"wait_deadline",level:2},{value:"WAIT_INFINITE",id:"wait_infinite",level:2},{value:"stream",id:"stream",level:2},{value:"process.options",id:"processoptions",level:2},{value:"cwd",id:"cwd",level:3},{value:"env",id:"env",level:3},{value:"stderr",id:"stderr",level:3},{value:"stdin",id:"stdin",level:3},{value:"stdout",id:"stdout",level:3},{value:"timeout",id:"timeout",level:3},{value:"start",id:"start",level:2},{value:"strerror",id:"strerror",level:2},{value:"__index",id:"__index",level:2},{value:"close_stream",id:"close_stream",level:2},{value:"kill",id:"kill",level:2},{value:"pid",id:"pid",level:2},{value:"read",id:"read",level:2},{value:"read_stderr",id:"read_stderr",level:2},{value:"read_stdout",id:"read_stdout",level:2},{value:"returncode",id:"returncode",level:2},{value:"running",id:"running",level:2},{value:"terminate",id:"terminate",level:2},{value:"wait",id:"wait",level:2},{value:"write",id:"write",level:2}];function a(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"process",children:"process"})}),"\n",(0,i.jsx)(s.p,{children:"Functionality that allows you to launch subprocesses and read\nor write to them in a non-blocking fashion."}),"\n",(0,i.jsx)(s.h2,{id:"error_inval",children:"ERROR_INVAL"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) ERROR_INVAL: integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"Error triggered when trying to terminate or kill a non running process,\nits value is platform dependent, so the value declared on this\ninterface does not represents the real one."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"error_nomem",children:"ERROR_NOMEM"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) ERROR_NOMEM: integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"Error triggered when no memory is available to allocate the process,\nits value is platform dependent, so the value declared on this\ninterface does not represents the real one."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"error_pipe",children:"ERROR_PIPE"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) ERROR_PIPE: integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"Error triggered when the stdout, stderr or stdin fails while reading\nor writing, its value is platform dependent, so the value declared on this\ninterface does not represents the real one."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"error_timedout",children:"ERROR_TIMEDOUT"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) ERROR_TIMEDOUT: integer\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Error triggered when a process takes more time than that specified\nby the deadline parameter given on process",":start","(),\nits value is platform dependent, so the value declared on this\ninterface does not represents the real one."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"error_wouldblock",children:"ERROR_WOULDBLOCK"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) ERROR_WOULDBLOCK: integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"Error triggered when a read or write action is blocking,\nits value is platform dependent, so the value declared on this\ninterface does not represents the real one."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"redirect_default",children:"REDIRECT_DEFAULT"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) REDIRECT_DEFAULT: integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"Default behavior for redirecting streams.\nThis flag is deprecated and for backwards compatibility with reproc only.\nThe behavior of this flag may change in future versions of Pragtical."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"redirect_discard",children:"REDIRECT_DISCARD"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) REDIRECT_DISCARD: integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"Discard this stream (piping it to /dev/null)"}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"redirect_parent",children:"REDIRECT_PARENT"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) REDIRECT_PARENT: integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"Redirect this stream to the parent."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"redirect_pipe",children:"REDIRECT_PIPE"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) REDIRECT_PIPE: integer\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Allow Process API to read this stream via process",":read"," functions."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"redirect_stdout",children:"REDIRECT_STDOUT"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) REDIRECT_STDOUT: integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"Redirect this stream to stdout.\nThis flag can only be used on process.options.stderr."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"stream_stderr",children:"STREAM_STDERR"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) STREAM_STDERR: integer\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Used for the process",":close_stream","() method to close stderr."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"stream_stdin",children:"STREAM_STDIN"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) STREAM_STDIN: integer\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Used for the process",":close_stream","() method to close stdin."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"stream_stdout",children:"STREAM_STDOUT"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) STREAM_STDOUT: integer\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Used for the process",":close_stream","() method to close stdout."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"wait_deadline",children:"WAIT_DEADLINE"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) WAIT_DEADLINE: integer\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Instruct process",":wait","() to wait until the deadline given on process",":start","()"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"wait_infinite",children:"WAIT_INFINITE"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) WAIT_INFINITE: integer\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Instruct process",":wait","() to wait until the process ends."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"stream",children:"stream"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) stream: process.stream\n"})}),"\n",(0,i.jsx)(s.p,{children:"An abstraction over the standard input and outputs of a process\nthat allows you to read and write data easily."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"processoptions",children:"process.options"}),"\n",(0,i.jsx)(s.p,{children:"Options that can be passed to process.start()"}),"\n",(0,i.jsx)(s.h3,{id:"cwd",children:"cwd"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) cwd: string\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"env",children:"env"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) env: table<string, string>\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"stderr",children:"stderr"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) stderr: `process.REDIRECT_DEFAULT`|`process.REDIRECT_DISCARD`|`process.REDIRECT_PARENT`|`process.REDIRECT_PIPE`|`process.REDIRECT_STDOUT`\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"stdin",children:"stdin"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) stdin: `process.REDIRECT_DEFAULT`|`process.REDIRECT_DISCARD`|`process.REDIRECT_PARENT`|`process.REDIRECT_PIPE`|`process.REDIRECT_STDOUT`\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"stdout",children:"stdout"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) stdout: `process.REDIRECT_DEFAULT`|`process.REDIRECT_DISCARD`|`process.REDIRECT_PARENT`|`process.REDIRECT_PIPE`|`process.REDIRECT_STDOUT`\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"timeout",children:"timeout"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(field) timeout: number\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"start",children:"start"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"function process.start(command_and_params: table, options: process.options)\n  -> process|nil\n  2. errmsg: string\n  3. errcode: integer|`process.ERROR_INVAL`|`process.ERROR_NOMEM`|`process.ERROR_PIPE`|`process.ERROR_TIMEDOUT`...(+1)\n"})}),"\n",(0,i.jsx)(s.p,{children:"Create and start a new process"}),"\n",(0,i.jsxs)(s.p,{children:["@",(0,i.jsx)(s.em,{children:"param"})," ",(0,i.jsx)(s.code,{children:"command_and_params"})," \u2014 First index is the command to execute"]}),"\n",(0,i.jsx)(s.p,{children:"and subsequente elements are parameters for the command."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"errcode:\n    | `process.ERROR_PIPE`\n    | `process.ERROR_WOULDBLOCK`\n    | `process.ERROR_TIMEDOUT`\n    | `process.ERROR_INVAL`\n    | `process.ERROR_NOMEM`\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"strerror",children:"strerror"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"function process.strerror(code: integer)\n  -> string|nil\n"})}),"\n",(0,i.jsx)(s.p,{children:"Translates an error code into a useful text message"}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"__index",children:"__index"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(method) process:__index(k: any)\n  -> function|unknown\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"close_stream",children:"close_stream"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(method) process:close_stream(stream: `process.STREAM_STDERR`|`process.STREAM_STDIN`|`process.STREAM_STDOUT`)\n  -> integer|nil\n  2. errmsg: string\n  3. errcode: integer|`process.ERROR_INVAL`|`process.ERROR_NOMEM`|`process.ERROR_PIPE`|`process.ERROR_TIMEDOUT`...(+1)\n"})}),"\n",(0,i.jsx)(s.p,{children:"Allows you to close a stream pipe that you will not be using."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"stream:\n    | `process.STREAM_STDIN`\n    | `process.STREAM_STDOUT`\n    | `process.STREAM_STDERR`\n\nerrcode:\n    | `process.ERROR_PIPE`\n    | `process.ERROR_WOULDBLOCK`\n    | `process.ERROR_TIMEDOUT`\n    | `process.ERROR_INVAL`\n    | `process.ERROR_NOMEM`\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"kill",children:"kill"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(method) process:kill()\n  -> boolean|nil\n  2. errmsg: string\n  3. errcode: integer|`process.ERROR_INVAL`|`process.ERROR_NOMEM`|`process.ERROR_PIPE`|`process.ERROR_TIMEDOUT`...(+1)\n"})}),"\n",(0,i.jsx)(s.p,{children:"Sends SIGKILL to the process"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"errcode:\n    | `process.ERROR_PIPE`\n    | `process.ERROR_WOULDBLOCK`\n    | `process.ERROR_TIMEDOUT`\n    | `process.ERROR_INVAL`\n    | `process.ERROR_NOMEM`\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"pid",children:"pid"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(method) process:pid()\n  -> id: integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"Get the process id."}),"\n",(0,i.jsxs)(s.p,{children:["@",(0,i.jsx)(s.em,{children:"return"})," ",(0,i.jsx)(s.code,{children:"id"})," \u2014 Process id or 0 if not running."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"read",children:"read"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(method) process:read(stream: `process.STREAM_STDERR`|`process.STREAM_STDIN`|`process.STREAM_STDOUT`, len?: integer)\n  -> string|nil\n  2. errmsg: string\n  3. errcode: integer|`process.ERROR_INVAL`|`process.ERROR_NOMEM`|`process.ERROR_PIPE`|`process.ERROR_TIMEDOUT`...(+1)\n"})}),"\n",(0,i.jsx)(s.p,{children:"Read from the given stream type, if the process fails with a ERROR_PIPE it is\nautomatically destroyed returning nil along error message and code."}),"\n",(0,i.jsxs)(s.p,{children:["@",(0,i.jsx)(s.em,{children:"param"})," ",(0,i.jsx)(s.code,{children:"len"})," \u2014 Amount of bytes to read, defaults to 2048."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"stream:\n    | `process.STREAM_STDIN`\n    | `process.STREAM_STDOUT`\n    | `process.STREAM_STDERR`\n\nerrcode:\n    | `process.ERROR_PIPE`\n    | `process.ERROR_WOULDBLOCK`\n    | `process.ERROR_TIMEDOUT`\n    | `process.ERROR_INVAL`\n    | `process.ERROR_NOMEM`\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"read_stderr",children:"read_stderr"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(method) process:read_stderr(len?: integer)\n  -> string|nil\n  2. errmsg: string\n  3. errcode: integer|`process.ERROR_INVAL`|`process.ERROR_NOMEM`|`process.ERROR_PIPE`|`process.ERROR_TIMEDOUT`...(+1)\n"})}),"\n",(0,i.jsx)(s.p,{children:"Read from stderr, if the process fails with a ERROR_PIPE it is\nautomatically destroyed returning nil along error message and code."}),"\n",(0,i.jsxs)(s.p,{children:["@",(0,i.jsx)(s.em,{children:"param"})," ",(0,i.jsx)(s.code,{children:"len"})," \u2014 Amount of bytes to read, defaults to 2048."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"errcode:\n    | `process.ERROR_PIPE`\n    | `process.ERROR_WOULDBLOCK`\n    | `process.ERROR_TIMEDOUT`\n    | `process.ERROR_INVAL`\n    | `process.ERROR_NOMEM`\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"read_stdout",children:"read_stdout"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(method) process:read_stdout(len?: integer)\n  -> string|nil\n  2. errmsg: string\n  3. errcode: integer|`process.ERROR_INVAL`|`process.ERROR_NOMEM`|`process.ERROR_PIPE`|`process.ERROR_TIMEDOUT`...(+1)\n"})}),"\n",(0,i.jsx)(s.p,{children:"Read from stdout, if the process fails with a ERROR_PIPE it is\nautomatically destroyed returning nil along error message and code."}),"\n",(0,i.jsxs)(s.p,{children:["@",(0,i.jsx)(s.em,{children:"param"})," ",(0,i.jsx)(s.code,{children:"len"})," \u2014 Amount of bytes to read, defaults to 2048."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"errcode:\n    | `process.ERROR_PIPE`\n    | `process.ERROR_WOULDBLOCK`\n    | `process.ERROR_TIMEDOUT`\n    | `process.ERROR_INVAL`\n    | `process.ERROR_NOMEM`\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"returncode",children:"returncode"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(method) process:returncode()\n  -> number|nil\n"})}),"\n",(0,i.jsx)(s.p,{children:"Get the exit code of the process or nil if still running."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"running",children:"running"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(method) process:running()\n  -> boolean\n"})}),"\n",(0,i.jsx)(s.p,{children:"Check if the process is running"}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"terminate",children:"terminate"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(method) process:terminate()\n  -> boolean|nil\n  2. errmsg: string\n  3. errcode: integer|`process.ERROR_INVAL`|`process.ERROR_NOMEM`|`process.ERROR_PIPE`|`process.ERROR_TIMEDOUT`...(+1)\n"})}),"\n",(0,i.jsx)(s.p,{children:"Sends SIGTERM to the process"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"errcode:\n    | `process.ERROR_PIPE`\n    | `process.ERROR_WOULDBLOCK`\n    | `process.ERROR_TIMEDOUT`\n    | `process.ERROR_INVAL`\n    | `process.ERROR_NOMEM`\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"wait",children:"wait"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(method) process:wait(timeout: integer|`process.WAIT_DEADLINE`|`process.WAIT_INFINITE`)\n  -> exit_status: integer|nil\n  2. errmsg: string\n  3. errcode: integer|`process.ERROR_INVAL`|`process.ERROR_NOMEM`|`process.ERROR_PIPE`|`process.ERROR_TIMEDOUT`...(+1)\n"})}),"\n",(0,i.jsx)(s.p,{children:"Wait the specified amount of time for the process to exit."}),"\n",(0,i.jsxs)(s.p,{children:["@",(0,i.jsx)(s.em,{children:"param"})," ",(0,i.jsx)(s.code,{children:"timeout"})," \u2014 Time to wait in milliseconds,"]}),"\n",(0,i.jsx)(s.p,{children:"if 0, the function will only check if process is running without waiting."}),"\n",(0,i.jsxs)(s.p,{children:["@",(0,i.jsx)(s.em,{children:"return"})," ",(0,i.jsx)(s.code,{children:"exit_status"})," \u2014 The process exit status or nil on error"]}),"\n",(0,i.jsxs)(s.p,{children:["@",(0,i.jsx)(s.em,{children:"return"})," ",(0,i.jsx)(s.code,{children:"errmsg"})]}),"\n",(0,i.jsxs)(s.p,{children:["@",(0,i.jsx)(s.em,{children:"return"})," ",(0,i.jsx)(s.code,{children:"errcode"})]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"timeout:\n    | `process.WAIT_INFINITE`\n    | `process.WAIT_DEADLINE`\n\nerrcode:\n    | `process.ERROR_PIPE`\n    | `process.ERROR_WOULDBLOCK`\n    | `process.ERROR_TIMEDOUT`\n    | `process.ERROR_INVAL`\n    | `process.ERROR_NOMEM`\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"write",children:"write"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"(method) process:write(data: string)\n  -> bytes: integer|nil\n  2. errmsg: string\n  3. errcode: integer|`process.ERROR_INVAL`|`process.ERROR_NOMEM`|`process.ERROR_PIPE`|`process.ERROR_TIMEDOUT`...(+1)\n"})}),"\n",(0,i.jsx)(s.p,{children:"Write to the stdin, if the process fails with a ERROR_PIPE it is\nautomatically destroyed returning nil along error message and code."}),"\n",(0,i.jsxs)(s.p,{children:["@",(0,i.jsx)(s.em,{children:"return"})," ",(0,i.jsx)(s.code,{children:"bytes"})," \u2014 The amount of bytes written or nil if error"]}),"\n",(0,i.jsxs)(s.p,{children:["@",(0,i.jsx)(s.em,{children:"return"})," ",(0,i.jsx)(s.code,{children:"errmsg"})]}),"\n",(0,i.jsxs)(s.p,{children:["@",(0,i.jsx)(s.em,{children:"return"})," ",(0,i.jsx)(s.code,{children:"errcode"})]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-lua",children:"errcode:\n    | `process.ERROR_PIPE`\n    | `process.ERROR_WOULDBLOCK`\n    | `process.ERROR_TIMEDOUT`\n    | `process.ERROR_INVAL`\n    | `process.ERROR_NOMEM`\n"})}),"\n",(0,i.jsx)(s.hr,{})]})}function R(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);