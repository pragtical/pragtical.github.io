"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[284],{8599:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>s});const c=JSON.parse('{"id":"api/core.command","title":"core.command","description":"Functions to register and handle commands.","source":"@site/docs/api/core.command.md","sourceDirName":"api","slug":"/api/core.command","permalink":"/docs/api/core.command","draft":false,"unlisted":false,"editUrl":"https://github.com/pragtical/pragtical.github.io/edit/main/docs/api/core.command.md","tags":[],"version":"current","sidebarPosition":19,"frontMatter":{"sidebar_position":19},"sidebar":"tutorialSidebar","previous":{"title":"core.cli","permalink":"/docs/api/core.cli"},"next":{"title":"core.commandview","permalink":"/docs/api/core.commandview"}}');var r=a(74848),d=a(28453);const i={sidebar_position:19},t="core.command",o={},s=[{value:"map",id:"map",level:2},{value:"core.command.command",id:"corecommandcommand",level:2},{value:"perform",id:"perform",level:3},{value:"predicate",id:"predicate",level:3},{value:"add",id:"add",level:2},{value:"add_defaults",id:"add_defaults",level:2},{value:"generate_predicate",id:"generate_predicate",level:2},{value:"get_all_valid",id:"get_all_valid",level:2},{value:"is_valid",id:"is_valid",level:2},{value:"perform",id:"perform-1",level:2},{value:"prettify_name",id:"prettify_name",level:2}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"corecommand",children:"core.command"})}),"\n",(0,r.jsx)(n.p,{children:"Functions to register and handle commands."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local command = require "core.command"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"map",children:"map"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(field) map: { [string]: core.command.command }\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"corecommandcommand",children:"core.command.command"}),"\n",(0,r.jsx)(n.p,{children:"The predicate and its associated function."}),"\n",(0,r.jsx)(n.h3,{id:"perform",children:"perform"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(field) perform: fun(...any)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"predicate",children:"predicate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(field) predicate: fun(...any):boolean, ...unknown\n"})}),"\n",(0,r.jsxs)(n.p,{children:["A predicate function accepts arguments from ",(0,r.jsx)(n.code,{children:"command.perform()"})," and evaluates to a boolean.\nIf the function returns true, then the function associated with the command is executed."]}),"\n",(0,r.jsx)(n.p,{children:"The predicate function can also return other values after the boolean, which will\nbe passed into the function associated with the command."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"add",children:"add"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function core.command.add(predicate: string|core.object|fun(...any):boolean, ...unknown, map: { [string]: fun(...any) })\n"})}),"\n",(0,r.jsx)(n.p,{children:"Adds commands to the map."}),"\n",(0,r.jsx)(n.p,{children:"The function accepts a table containing a list of commands\nand their functions.\nIf a command already exists, it will be replaced.\nSee:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"[core.command.predicate](file:///usr/share/pragtical/core/command.lua#28#10)"}),"\n",(0,r.jsx)(n.li,{children:"[core.command.command_name](file:///usr/share/pragtical/core/command.lua#35#10)"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"add_defaults",children:"add_defaults"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function core.command.add_defaults()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Inserts the default commands for Pragtical into the map."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"generate_predicate",children:"generate_predicate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function core.command.generate_predicate(predicate: string|core.object|fun(...any):boolean, ...unknown|nil)\n  -> fun(...any):boolean, ...unknown\n"})}),"\n",(0,r.jsx)(n.p,{children:"This function takes in a predicate and produces a predicate function\nthat is internally used to dispatch and execute commands."}),"\n",(0,r.jsx)(n.p,{children:"This function should not be called manually."}),"\n",(0,r.jsxs)(n.p,{children:["@",(0,r.jsx)(n.em,{children:"param"})," ",(0,r.jsx)(n.code,{children:"predicate"})," \u2014 If nil, the predicate always evaluates to true."]}),"\n",(0,r.jsx)(n.p,{children:"See: [core.command.predicate](file:///usr/share/pragtical/core/command.lua#28#10)"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"get_all_valid",children:"get_all_valid"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function core.command.get_all_valid()\n  -> string[]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns all the commands that can be executed (their predicates evaluate to true)."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"is_valid",children:"is_valid"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function core.command.is_valid(name: string, ...any)\n  -> boolean\n"})}),"\n",(0,r.jsx)(n.p,{children:"Checks whether a command can be executed (its predicate evaluates to true)."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"perform-1",children:"perform"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function core.command.perform(name: string, ...any)\n  -> boolean\n"})}),"\n",(0,r.jsx)(n.p,{children:"Performs a command."}),"\n",(0,r.jsx)(n.p,{children:"The arguments passed into this function are forwarded to the predicate function.\nIf the predicate function returns more than 1 value, the other values are passed\nto the command."}),"\n",(0,r.jsx)(n.p,{children:"Otherwise, the arguments passed into this function are passed directly\nto the command."}),"\n",(0,r.jsxs)(n.p,{children:["@",(0,r.jsx)(n.em,{children:"return"})," \u2014 true if the command is performed successfully."]}),"\n",(0,r.jsx)(n.p,{children:"See:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"[core.command.predicate](file:///usr/share/pragtical/core/command.lua#28#10)"}),"\n",(0,r.jsx)(n.li,{children:"[core.command.predicate_function](file:///usr/share/pragtical/core/command.lua#12#10)"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"prettify_name",children:"prettify_name"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function core.command.prettify_name(name: string)\n  -> string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Prettifies the command name."}),"\n",(0,r.jsx)(n.p,{children:"This function adds a space between the colon and the command name,\nreplaces dashes with spaces and capitalizes the command appropriately.\nSee: [core.command.command_name](file:///usr/share/pragtical/core/command.lua#35#10)"}),"\n",(0,r.jsx)(n.hr,{})]})}function m(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>t});var c=a(96540);const r={},d=c.createContext(r);function i(e){const n=c.useContext(d);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),c.createElement(d.Provider,{value:n},e.children)}}}]);