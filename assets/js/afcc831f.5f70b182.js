"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9938],{28453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>l});var t=n(96540);const s={},r=t.createContext(s);function o(e){const i=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:i},e.children)}},98396:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"user-guide/ide-setup","title":"Setup Pragtical as an IDE","description":"Set up Pragtical as your integrated development environment.","source":"@site/docs/user-guide/ide-setup.md","sourceDirName":"user-guide","slug":"/user-guide/ide-setup","permalink":"/docs/user-guide/ide-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/pragtical/pragtical.github.io/edit/main/docs/user-guide/ide-setup.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"description":"Set up Pragtical as your integrated development environment."},"sidebar":"tutorialSidebar","previous":{"title":"Language Server Support","permalink":"/docs/user-guide/lsp"},"next":{"title":"Diff Viewer","permalink":"/docs/user-guide/diff-viewer"}}');var s=n(74848),r=n(28453);const o={sidebar_position:8,description:"Set up Pragtical as your integrated development environment."},l="Setup Pragtical as an IDE",d={},a=[{value:"Bells and Whistles",id:"bells-and-whistles",level:2},{value:"Intellisense",id:"intellisense",level:2},{value:"Code Snippets",id:"code-snippets",level:2},{value:"Code Formatters",id:"code-formatters",level:2},{value:"Integrated Terminal",id:"integrated-terminal",level:2},{value:"Version Control",id:"version-control",level:2},{value:"TODO Treeview",id:"todo-treeview",level:2},{value:"Build Integration",id:"build-integration",level:2},{value:"Debug Integration",id:"debug-integration",level:2},{value:"Automatic Setup",id:"automatic-setup",level:2}];function c(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"setup-pragtical-as-an-ide",children:"Setup Pragtical as an IDE"})}),"\n",(0,s.jsx)(i.p,{children:"Pragtical can be configured to be a proper IDE for most programming languages.\nThe following is a brief overview of the plugins that, when used together,\nprovide the experience of a minimal and modern IDE."}),"\n",(0,s.jsx)(i.h2,{id:"bells-and-whistles",children:"Bells and Whistles"}),"\n",(0,s.jsx)(i.p,{children:"The following plugins are meant to enrich Pragtical with handy features that\nimprove the coding experience:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"autoinsert"})," and ",(0,s.jsx)(i.code,{children:"lfautoinsert"})," add automatic bracket/quote insertion and\ntext-wrapping."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"autosave"})," allows automatic file saving after every change."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"bracketmatch"})," underlines brackets matching pairs under the caret."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"colorpreview"})," underlays color values (e.g. ",(0,s.jsx)(i.code,{children:"#ff00ff"})," or ",(0,s.jsx)(i.code,{children:"rgb(255, 0, 255)"}),")\nwith their respective color."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"indentguide"})," adds indent guides to make it easier to see function boundaries."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"rainbowparen"})," applies rainbow colors to nesting parentheses to make it easier\nto distinguish them."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"scalestatus"})," displays current scale (zoom) in the status view (it depends on\nthe ",(0,s.jsx)(i.code,{children:"scale"})," plugin)."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"selectionhighlight"})," highlights regions of code that match the current selection,\nto preview for search/replace actions."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"sticky_scroll"})," keeps track of the current scope at the top of the view."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"minimap"})," adds VSCode's minimap."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"devicons"})," provides fancy icons in the project treeview for many file types."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"intellisense",children:"Intellisense"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"lsp"})," is a plugin that provides support for Intellisense (code completion,\ngoto-definition, document symbols, function signatures and so on) through the\nLSP protocol, while ",(0,s.jsx)(i.code,{children:"lintplus"})," provides support for info/warning/error diagnostics."]}),"\n",(0,s.jsxs)(i.p,{children:["There is also ",(0,s.jsx)(i.code,{children:"lsp_snippets"}),", which adds snippets support from ",(0,s.jsx)(i.code,{children:"lsp"})," to the\n",(0,s.jsx)(i.code,{children:"snippets"})," plugin."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"lsp"})," can be configured manually by following the ",(0,s.jsx)(i.a,{href:"/docs/user-guide/lsp",children:"this guide"}),", or it\ncan interface with the ",(0,s.jsx)(i.code,{children:"lsp-servers"})," repository that allows the\ninstallation of bundled LSP servers, which don't require manual configuration."]}),"\n",(0,s.jsxs)(i.p,{children:["An example of installing bundled LSP servers is ",(0,s.jsx)(i.code,{children:"ppm install lsp_rust"})," which\ninstalls the binary files required to run ",(0,s.jsx)(i.code,{children:"rust-analyzer"}),"."]}),"\n",(0,s.jsx)(i.h2,{id:"code-snippets",children:"Code Snippets"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"snippets"})," adds support for code snippets."]}),"\n",(0,s.jsxs)(i.p,{children:["Snippets can easily be added by following the ",(0,s.jsx)(i.a,{href:"https://github.com/vqns/lite-xl-snippets?tab=readme-ov-file#usage",children:"official guide"}),"."]}),"\n",(0,s.jsx)(i.h2,{id:"code-formatters",children:"Code Formatters"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"formatter"})," provides file-specific formatting for several programming languages."]}),"\n",(0,s.jsx)(i.h2,{id:"integrated-terminal",children:"Integrated Terminal"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"terminal"})," provides an integrated terminal."]}),"\n",(0,s.jsx)(i.h2,{id:"version-control",children:"Version Control"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"scm"})," provides source code control integration to Pragtical."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"gitblame"})," can be added to show git commit information of the line where the cursor rests."]}),"\n",(0,s.jsx)(i.h2,{id:"todo-treeview",children:"TODO Treeview"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"todotreeview"})," is a plugin that adds a custom treeview with the goal of keeping\ntrack of flagged comments (TODO, WIP, FIX, ...) for better workflow organization."]}),"\n",(0,s.jsx)(i.h2,{id:"build-integration",children:"Build Integration"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"build"})," provides a build system, messages window, and easily clickable errors."]}),"\n",(0,s.jsxs)(i.p,{children:["At the moment it only supports ",(0,s.jsx)(i.code,{children:"make"}),", but it can be extended to any build system."]}),"\n",(0,s.jsx)(i.h2,{id:"debug-integration",children:"Debug Integration"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"debugger"})," provides debugger integration, with pluggable backends."]}),"\n",(0,s.jsxs)(i.p,{children:["At the moment it only supports ",(0,s.jsx)(i.code,{children:"gdb"}),"."]}),"\n",(0,s.jsx)(i.h2,{id:"automatic-setup",children:"Automatic Setup"}),"\n",(0,s.jsx)(i.p,{children:"The following examples are configurations and scripts that bundle together the\nessential components of a minimal IDE:"}),"\n",(0,s.jsx)(i.admonition,{type:"warning",children:(0,s.jsx)(i.p,{children:"Build and debugger plugins haven't been properly tested with Pragtical."})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"https://github.com/adamharrison/lite-xl-ide",children:"Adam's configuration"})," contains the ",(0,s.jsx)(i.code,{children:"build"})," and ",(0,s.jsx)(i.code,{children:"debugger"})," plugins,\nas well as several IDE meta-packages (e.g. ",(0,s.jsx)(i.code,{children:"ide_c"}),", ",(0,s.jsx)(i.code,{children:"ide_java"}),", ",(0,s.jsx)(i.code,{children:"ide_python"}),")\nthat add IDE-like functionalities for many popular programming languages."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"https://github.com/PerilousBooklet/lite-xl-ide",children:"PerilousBooklet's configuration"})," contains documentation about IDE support\nprogress status."]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);