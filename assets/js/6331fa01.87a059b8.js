"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5188],{28453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>d});var t=a(96540);const r={},h=t.createContext(r);function l(e){const n=t.useContext(h);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(h.Provider,{value:n},e.children)}},37366:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>o,frontMatter:()=>l,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"api/thread","title":"thread","description":"Provides threading capabilities.","source":"@site/docs/api/thread.md","sourceDirName":"api","slug":"/api/thread","permalink":"/docs/api/thread","draft":false,"unlisted":false,"editUrl":"https://github.com/pragtical/pragtical.github.io/edit/main/docs/api/thread.md","tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15},"sidebar":"tutorialSidebar","previous":{"title":"system","permalink":"/docs/api/system"},"next":{"title":"utf8extra","permalink":"/docs/api/utf8extra"}}');var r=a(74848),h=a(28453);const l={sidebar_position:15},d="thread",s={},i=[{value:"thread.Channel",id:"threadchannel",level:2},{value:"thread.Thread",id:"threadthread",level:2},{value:"thread.Channel",id:"threadchannel-1",level:2},{value:"__tostring",id:"__tostring",level:3},{value:"clear",id:"clear",level:3},{value:"first",id:"first",level:3},{value:"last",id:"last",level:3},{value:"pop",id:"pop",level:3},{value:"push",id:"push",level:3},{value:"supply",id:"supply",level:3},{value:"wait",id:"wait",level:3},{value:"thread.Thread",id:"threadthread-1",level:2},{value:"__eq",id:"__eq",level:3},{value:"__tostring",id:"__tostring-1",level:3},{value:"get_id",id:"get_id",level:3},{value:"get_name",id:"get_name",level:3},{value:"wait",id:"wait-1",level:3},{value:"thread.Channel.__tostring",id:"threadchannel__tostring",level:2},{value:"thread.Channel.clear",id:"threadchannelclear",level:2},{value:"thread.Channel.first",id:"threadchannelfirst",level:2},{value:"thread.Channel.last",id:"threadchannellast",level:2},{value:"thread.Channel.pop",id:"threadchannelpop",level:2},{value:"thread.Channel.push",id:"threadchannelpush",level:2},{value:"thread.Channel.supply",id:"threadchannelsupply",level:2},{value:"thread.Channel.wait",id:"threadchannelwait",level:2},{value:"thread.Thread.__eq",id:"threadthread__eq",level:2},{value:"thread.Thread.__tostring",id:"threadthread__tostring",level:2},{value:"thread.Thread.get_id",id:"threadthreadget_id",level:2},{value:"thread.Thread.get_name",id:"threadthreadget_name",level:2},{value:"thread.Thread.wait",id:"threadthreadwait",level:2},{value:"thread.create",id:"threadcreate",level:2},{value:"thread.get_channel",id:"threadget_channel",level:2},{value:"thread.get_cpu_count",id:"threadget_cpu_count",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",...(0,h.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"thread",children:"thread"})}),"\n",(0,r.jsx)(n.p,{children:"Provides threading capabilities."}),"\n",(0,r.jsx)(n.h2,{id:"threadchannel",children:"thread.Channel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(field) thread.Channel: thread.Channel\n"})}),"\n",(0,r.jsx)(n.p,{children:"A channel object."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadthread",children:"thread.Thread"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(field) thread.Thread: thread.Thread\n"})}),"\n",(0,r.jsx)(n.p,{children:"A thread object."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadchannel-1",children:"thread.Channel"}),"\n",(0,r.jsx)(n.p,{children:"A channel object."}),"\n",(0,r.jsx)(n.h3,{id:"__tostring",children:"__tostring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:__tostring()\n  -> string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Metamethod that automatically converts a channel to a string representation."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"clear",children:"clear"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:clear()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Remove all elements from the channel."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"first",children:"first"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:first()\n  -> boolean|string|number|table|nil\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the first element of the list in the channel."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"last",children:"last"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:last()\n  -> boolean|string|number|table|nil\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the last element of the list in the channel."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"pop",children:"pop"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:pop()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Remove the first element of a channel."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"push",children:"push"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:push(element: boolean|string|number|table|nil)\n  -> boolean|nil\n  2. errorMessage: string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Add a new element to the end of a channel list."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"supply",children:"supply"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:supply(element: boolean|string|number|table|nil)\n  -> boolean|nil\n  2. errorMessage: string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Add a new element to the end of a channel list and waits for thread to read it."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"wait",children:"wait"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:wait()\n  -> boolean|string|number|table|nil\n"})}),"\n",(0,r.jsx)(n.p,{children:"Wait until the channel has one element and return it."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadthread-1",children:"thread.Thread"}),"\n",(0,r.jsx)(n.p,{children:"A thread object."}),"\n",(0,r.jsx)(n.h3,{id:"__eq",children:"__eq"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Thread:__eq(thread1: thread.Thread, thread2: thread.Thread)\n  -> boolean\n"})}),"\n",(0,r.jsx)(n.p,{children:"Metamethod to automatically compare two threads."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"__tostring-1",children:"__tostring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Thread:__tostring()\n  -> string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Metamethod that automatically converts a thread to a string representation."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"get_id",children:"get_id"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Thread:get_id()\n  -> integer\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the id of a thread."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"get_name",children:"get_name"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Thread:get_name()\n  -> string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the name assigned to a thread."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"wait-1",children:"wait"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Thread:wait()\n  -> integer\n"})}),"\n",(0,r.jsx)(n.p,{children:"Wait for a thread to finish and get the return code."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadchannel__tostring",children:"thread.Channel.__tostring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:__tostring()\n  -> string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Metamethod that automatically converts a channel to a string representation."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadchannelclear",children:"thread.Channel.clear"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:clear()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Remove all elements from the channel."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadchannelfirst",children:"thread.Channel.first"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:first()\n  -> boolean|string|number|table|nil\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the first element of the list in the channel."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadchannellast",children:"thread.Channel.last"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:last()\n  -> boolean|string|number|table|nil\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the last element of the list in the channel."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadchannelpop",children:"thread.Channel.pop"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:pop()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Remove the first element of a channel."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadchannelpush",children:"thread.Channel.push"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:push(element: boolean|string|number|table|nil)\n  -> boolean|nil\n  2. errorMessage: string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Add a new element to the end of a channel list."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadchannelsupply",children:"thread.Channel.supply"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:supply(element: boolean|string|number|table|nil)\n  -> boolean|nil\n  2. errorMessage: string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Add a new element to the end of a channel list and waits for thread to read it."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadchannelwait",children:"thread.Channel.wait"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Channel:wait()\n  -> boolean|string|number|table|nil\n"})}),"\n",(0,r.jsx)(n.p,{children:"Wait until the channel has one element and return it."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadthread__eq",children:"thread.Thread.__eq"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Thread:__eq(thread1: thread.Thread, thread2: thread.Thread)\n  -> boolean\n"})}),"\n",(0,r.jsx)(n.p,{children:"Metamethod to automatically compare two threads."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadthread__tostring",children:"thread.Thread.__tostring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Thread:__tostring()\n  -> string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Metamethod that automatically converts a thread to a string representation."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadthreadget_id",children:"thread.Thread.get_id"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Thread:get_id()\n  -> integer\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the id of a thread."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadthreadget_name",children:"thread.Thread.get_name"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Thread:get_name()\n  -> string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the name assigned to a thread."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadthreadwait",children:"thread.Thread.wait"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"(method) thread.Thread:wait()\n  -> integer\n"})}),"\n",(0,r.jsx)(n.p,{children:"Wait for a thread to finish and get the return code."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadcreate",children:"thread.create"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function thread.create(name: string, callback: function, ...boolean|string|number|table|nil)\n  -> thread.Thread|nil\n  2. errorMessage: string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create a new thread and starts it."}),"\n",(0,r.jsxs)(n.p,{children:["@",(0,r.jsx)(n.em,{children:"param"})," ",(0,r.jsx)(n.code,{children:"..."})," \u2014 Optional arguments passed to callback"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadget_channel",children:"thread.get_channel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function thread.get_channel(name: string)\n  -> thread.Channel|nil\n  2. errorMessage: string\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a new channel or retrieve existing one."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"threadget_cpu_count",children:"thread.get_cpu_count"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"function thread.get_cpu_count()\n  -> number\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the number of CPU cores available."}),"\n",(0,r.jsx)(n.p,{children:"Returns the total number of logical CPU cores. On CPUs that include\ntechnologies such as hyperthreading, the number of logical cores may be\nmore than the number of physical cores."}),"\n",(0,r.jsx)(n.hr,{})]})}function o(e={}){const{wrapper:n}={...(0,h.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);