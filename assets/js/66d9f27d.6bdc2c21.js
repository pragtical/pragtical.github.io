"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5676],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=l(t),u=o,k=c["".concat(s,".").concat(u)]||c[u]||m[u]||r;return t?a.createElement(k,i(i({ref:n},p),{},{components:t})):a.createElement(k,i({ref:n},p))}));function k(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d[c]="string"==typeof e?e:o,i[1]=d;for(var l=2;l<r;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7881:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_position:5,description:"Learn in detail how to add and manage keyboard shortcuts in Pragtical."},i="Managing Keyboard Shortcuts",d={unversionedId:"developer-guide/managing-keyboard-shortcuts",id:"developer-guide/managing-keyboard-shortcuts",title:"Managing Keyboard Shortcuts",description:"Learn in detail how to add and manage keyboard shortcuts in Pragtical.",source:"@site/docs/developer-guide/managing-keyboard-shortcuts.md",sourceDirName:"developer-guide",slug:"/developer-guide/managing-keyboard-shortcuts",permalink:"/docs/developer-guide/managing-keyboard-shortcuts",draft:!1,editUrl:"https://github.com/pragtical/pragtical.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/developer-guide/managing-keyboard-shortcuts.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"Learn in detail how to add and manage keyboard shortcuts in Pragtical."},sidebar:"tutorialSidebar",previous:{title:"Commands",permalink:"/docs/developer-guide/commands"},next:{title:"Classes and Objects",permalink:"/docs/developer-guide/classes-and-objects"}},s={},l=[{value:"Keyboard shortcut format",id:"keyboard-shortcut-format",level:3},{value:"Adding Keyboard Shortcuts",id:"adding-keyboard-shortcuts",level:3},{value:"Removing a Keyboard Shortcut",id:"removing-a-keyboard-shortcut",level:3},{value:"Getting Keyboard Shortcuts",id:"getting-keyboard-shortcuts",level:3},{value:"Overriding the Keymap",id:"overriding-the-keymap",level:3}],p={toc:l},c="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"managing-keyboard-shortcuts"},"Managing Keyboard Shortcuts"),(0,o.kt)("p",null,"Mouse clicks, wheel and keyboard events are handled by\n",(0,o.kt)("inlineCode",{parentName:"p"},"core.keymap")," before it was passed to other parts of the editor.\nThe keymap holds the state of various keys, including the modifiers\n(",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.modkeys"),") and runs a command when it's appropriate.\nThe keymap holds a map of key combinations to commands (",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.map"),")\nand a map of commands to key combinations (",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.reverse_map"),")."),(0,o.kt)("h3",{id:"keyboard-shortcut-format"},"Keyboard shortcut format"),(0,o.kt)("p",null,"The string is split into parts delimited by ",(0,o.kt)("inlineCode",{parentName:"p"},"+")," and\neach part of the split string is treated as a key.\nFor the list of valid keys, check out ","[SDL's documentation][8]",".\nFor mouse buttons, the format is as follows:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"[nclicks][type]click")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"nclicks")," is the number of clicks and defaults to 1 when not specified.\n",(0,o.kt)("inlineCode",{parentName:"p"},"type")," is optional and can be one of ",(0,o.kt)("inlineCode",{parentName:"p"},"l"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"r"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"m"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"y"),".\nThese letters correspond to left, right middle, mouse 4 and\nmouse 5.\nBy default, ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"l"),"."),(0,o.kt)("p",null,"Pragtical does not support consecutive keystrokes, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"ctrl+k ctrl+b"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'-- bind core:find-command to ctrl+k\nkeymap.add { ["ctrl+k"] = "core:find-command" }\n\n-- bind core:find-command to clicking middle mouse\nkeymap.add { ["mclick"] = "core:find-command" }\n\n-- bind core:find-command to double clicking right mouse\nkeymap.add { ["2mclick"] = "core:find-command" }\n')),(0,o.kt)("h3",{id:"adding-keyboard-shortcuts"},"Adding Keyboard Shortcuts"),(0,o.kt)("p",null,"Ways to add keyboard shortcuts were already discussed in the user guide.\nTo add keyboard shortcuts programmatically, use ",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.add()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"-- a composite type for commands\nlocal type Commands = string | {string}\n\nfunction keymap.add(map: {string: Commands}, overwrite: boolean): () end\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"keymap.add()")," takes in a table of keyboard shortcuts and the commands\nfor each keyboard shortcut.\nIf the second parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"overwrite")," is true, then the commands\nwill be replaced instead of appended."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local keymap = require "core.keymap"\n\n-- bind alt + ijkl to move the cursor\nkeymap.add {\n  ["alt+j"] = "doc:move-to-previous-char",\n  ["alt+l"] = "doc:move-to-next-char",\n  ["alt+i"] = "doc:move-to-previous-line",\n  ["alt+k"] = "doc:move-to-next-line",\n}\n\n-- you can also bind a keybind to execute multiple actions\nkeymap.add {\n  ["ctrl+c"] = ["doc:move-to-next-line", "doc:move-to-next-word"]\n}\n\n-- you can also overwrite current keybind\n-- override up for down\nkeymap.add({\n  ["down"] = "doc:move-to-previous-line",\n  ["up"] = "doc:move-to-next-line",\n}, true)\n')),(0,o.kt)("h3",{id:"removing-a-keyboard-shortcut"},"Removing a Keyboard Shortcut"),(0,o.kt)("p",null,"To remove a keyboard shortcut, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.unbind()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"function keymap.unbind(shortcut: string, command?: string): () end\n")),(0,o.kt)("p",null,"The function accepts a keyboard shortcut and optionally a command to unbind.\nIf a command is specified, the function will unbind that command\nfrom the key.\nOtherwise, it will unbind all commands from the shortcut."),(0,o.kt)("h3",{id:"getting-keyboard-shortcuts"},"Getting Keyboard Shortcuts"),(0,o.kt)("p",null,"To get all the keyboard shortcuts associated with a command, use\n",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.get_binding()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.get_bindings()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"function keymap.get_binding(cmd: string): string... end\n\nfunction keymap.get_bindings(cmd: string): {string} end\n")),(0,o.kt)("p",null,"Both functions accept a command and returns the keyboard\nshortcuts associated to it.\nHowever, ",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.get_bindings()")," returns a table instead\nof a list of values."),(0,o.kt)("h3",{id:"overriding-the-keymap"},"Overriding the Keymap"),(0,o.kt)("p",null,"If your plugin need to override the keymap for extra functionality\n(e.g. redirecting keyboard shortcuts to a terminal), you\ncan override ",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.on_key_pressed()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.on_mouse_wheel()"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.on_mouse_pressed()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.on_key_released()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"function keymap.on_key_pressed(key: string, ...: any): boolean end\n\nfunction keymap.on_mouse_wheel(delta_y: number,\n                                delta_x: number,\n                                ...: any): boolean end\n\nfunction keymap.on_mouse_pressed(button: string,\n                                  x: number,\n                                  y: number,\n                                  clicks: number): boolean end\n\nfunction keymap.on_key_released(key: string): () end\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"keymap.on_key_pressed()")," accepts the key that is being pressed.\nThe other values are reserved for internal usage and should be\npassed as-is."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"keymap.on_mouse_wheel()"),' accepts the X and Y delta \u2014 the number\nof "steps" scrolled on the mouse wheel.\nOther values are reserved for internal usage and should be passed\nas-is.'),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"keymap.on_mouse_pressed()")," accepts the type of button being pressed,\nthe coordinates where the button is pressed and the number of\nconsecutive clicks."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"keymap.on_key_released()")," accepts the key that is released."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"keymap.on_key_pressed()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.on_mouse_wheel()")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"keymap.on_mouse_pressed()")," returns a boolean that signals\nif the event is being handled.\nIf the function returns true, then the event is considered\nhandled and will not be propagated further.\nYou must handle this condition if you decide to override\nany of these functions."),(0,o.kt)("p",null,'??? warning "Since v2.1.0, text composition events (IME) should be taken into consideration."\nIn recent versions of Pragtical, text composition/input events\nhas been added to support IMEs.\nWhen text input is enabled, you may receive a key down event\nand a text input event.\nYou need to consider how to handle these new events too.'),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local keymap = require "core.keymap"\n\n-- a simple function that logs your keypresses\nlocal keymap_on_key_pressed = keymap.on_key_pressed\nfunction keymap.on_key_pressed(key, ...)\n  local handled = keymap_on_key_pressed(self, key, ...)\n  print(key, "Pressed!")\nend\n\nlocal ime = require "core.ime"\n\n-- to handle IME text composition events, you need to\n-- check the ime.editing value.\n-- If this value is true, text is being composited.\n-- You might want to ignore the keypresses.\nfunction keymap.on_key_pressed(key, ...)\n  -- on Linux this behavior is not observed so it can\n  -- be skipped\n  if PLATFORM ~= "Linux" and ime.editing then return false end\n  local handled = keymap_on_key_pressed(self, key, ...)\n  print(key, "Pressed!")\nend\n')))}m.isMDXComponent=!0}}]);