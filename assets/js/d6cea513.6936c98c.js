"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7261],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=l,k=d["".concat(p,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(k,i(i({ref:t},s),{},{components:n})):a.createElement(k,i({ref:t},s))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:l,i[1]=o;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2896:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(7462),l=(n(7294),n(3905));const r={sidebar_position:5,description:"Build Pragtical from source code."},i="Build",o={unversionedId:"setup/building",id:"setup/building",title:"Build",description:"Build Pragtical from source code.",source:"@site/docs/setup/building.md",sourceDirName:"setup",slug:"/setup/building",permalink:"/docs/setup/building",draft:!1,editUrl:"https://github.com/pragtical/pragtical.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/setup/building.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"Build Pragtical from source code."},sidebar:"tutorialSidebar",previous:{title:"macOS",permalink:"/docs/setup/macos"},next:{title:"User Guide",permalink:"/docs/category/user-guide"}},p={},u=[{value:"Dependencies",id:"dependencies",level:2},{value:"Building with Meson",id:"building-with-meson",level:2},{value:"Building with Helper Script",id:"building-with-helper-script",level:2},{value:"Portable Mode",id:"portable-mode",level:2},{value:"Meson Build Flags",id:"meson-build-flags",level:2},{value:"Environment Setup",id:"environment-setup",level:2},{value:"Linux",id:"linux",level:3},{value:"macOS",id:"macos",level:3},{value:"Windows MSYS2",id:"windows-msys2",level:3}],s={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,l.kt)(d,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"build"},"Build"),(0,l.kt)("p",null,"Once you have downloaded the source code, you can build Pragtical using Meson.\nIn addition, the ",(0,l.kt)("inlineCode",{parentName:"p"},"build-packages.sh")," script can be used to compile Pragtical and\ncreate an OS-specific package for Linux, Windows or macOS."),(0,l.kt)("h2",{id:"dependencies"},"Dependencies"),(0,l.kt)("p",null,"The following libraries are required:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"LuaJIT or Lua 5.4"),(0,l.kt)("li",{parentName:"ul"},"SDL2"),(0,l.kt)("li",{parentName:"ul"},"freetype2"),(0,l.kt)("li",{parentName:"ul"},"pcre2"),(0,l.kt)("li",{parentName:"ul"},"uchardet")),(0,l.kt)("p",null,"If they are not installed on your system you can force meson to download and\nbuild them for you by using the following flag ",(0,l.kt)("inlineCode",{parentName:"p"},"--wrap-mode=forcefallback"),".\nOtherwise, if they are present, they will be used to compile Pragtical."),(0,l.kt)("admonition",{title:"Lua Meson subproject is preferred over currently installed system Lua.",type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Due to the discrepancies of the Lua version shipped by the various Linux\ndistributions, we adapted the build system to make use of the Meson Lua\nsubproject by default to prevent incompatibility issues."),(0,l.kt)("p",{parentName:"admonition"},"If you are sure the Lua version installed on your system is compatible\nuse the setup flag: ",(0,l.kt)("inlineCode",{parentName:"p"},"-Duse_system_lua=true"))),(0,l.kt)("h2",{id:"building-with-meson"},"Building with Meson"),(0,l.kt)("p",null,"To build Pragtical with Meson the commands below can be used:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'meson setup --buildtype=release --prefix <prefix> build\nmeson compile -C build\nmeson install -C build --skip-subprojects="freetype2,pcre2" --dest-dir ../pragtical\n')),(0,l.kt)("p",null,"where ",(0,l.kt)("inlineCode",{parentName:"p"},"<prefix>")," depends on the OS you are using:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"on Linux is ",(0,l.kt)("inlineCode",{parentName:"li"},"/usr")),(0,l.kt)("li",{parentName:"ul"},"on macOS application bundle can be ",(0,l.kt)("inlineCode",{parentName:"li"},'"/Pragtical.app"')),(0,l.kt)("li",{parentName:"ul"},"on Windows you don't need to use this flag")),(0,l.kt)("p",null,"If you are using a version of Meson below 0.54\nyou need to use different commands to compile and install:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"meson setup --buildtype=release build\nninja -C build\nninja -C build install\n")),(0,l.kt)("h2",{id:"building-with-helper-script"},"Building with Helper Script"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"build-packages.sh")," automates some of the steps required to setup your\nenvironment, for usage instructions execute:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"bash build-packages.sh -h\n")),(0,l.kt)("p",null,"The script will run Meson and create an archive with the application.\nPragtical can be easily installed by unpacking the archive in any directory\nof your choice."),(0,l.kt)("p",null,'On Windows two packages will be created, one called "portable" using the "data"\nfolder next to the executable and the other one using a Unix-like file layout.\nThe portable version conforms to the directory structure of normal Windows\nprograms while the Unix-like file layout is meant for a Unix-like environment.'),(0,l.kt)("p",null,"Pragtical does not hard-code any directories and instead relies on environment\nvariables. This allows the package to be run in any directory."),(0,l.kt)("h2",{id:"portable-mode"},"Portable Mode"),(0,l.kt)("p",null,"When running ",(0,l.kt)("inlineCode",{parentName:"p"},"meson setup")," you may specify ",(0,l.kt)("inlineCode",{parentName:"p"},"-Dportable=true")," to install Pragtical\nas a portable application."),(0,l.kt)("p",null,"Pragtical needs the ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," directory to run properly. When ",(0,l.kt)("inlineCode",{parentName:"p"},"portable")," is\nenabled, Pragtical will use the ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," directory placed next to the executable.\nOtherwise, Pragtical will use Unix-like directory locations. It will use\n",(0,l.kt)("inlineCode",{parentName:"p"},"$prefix/share/pragtical")," for ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," and the executable will be located in\n",(0,l.kt)("inlineCode",{parentName:"p"},"$prefix/bin"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"$prefix")," is determined when the application starts such that\n",(0,l.kt)("inlineCode",{parentName:"p"},"$prefix/bin")," corresponds to the location of the executable."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"user")," directory does not depend on the ",(0,l.kt)("inlineCode",{parentName:"p"},"portable")," option and will always be\n",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.config/pragtical"),". On Windows, ",(0,l.kt)("inlineCode",{parentName:"p"},"$USERPROFILE")," will be used instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME"),"."),(0,l.kt)("h2",{id:"meson-build-flags"},"Meson Build Flags"),(0,l.kt)("p",null,"To know all the available build flags please consult the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pragtical/pragtical/blob/master/meson_options.txt"},"meson_options.txt"),"\nfile. For reference here are the available ones at time of writing that you\ncan define at the setup stage with ",(0,l.kt)("inlineCode",{parentName:"p"},"-D<flag_name>=<value>"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Flag"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bundle"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Build a macOS bundle")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"source-only"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Configure source files only, doesn't checks for dependencies")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"portable"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Portable install")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"renderer"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Use SDL renderer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dirmonitor_backend"),(0,l.kt)("td",{parentName:"tr",align:null},"combo"),(0,l.kt)("td",{parentName:"tr",align:null},"'' (auto-detect)"),(0,l.kt)("td",{parentName:"tr",align:null},"Define what dirmonitor backend to use: 'inotify', 'fsevents', 'kqueue', 'win32', 'dummy'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"arch_tuple"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"''"),(0,l.kt)("td",{parentName:"tr",align:null},"Specify a custom architecture tuple")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"use_system_lua"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Prefer System Lua over the meson wrap")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"extra_colors"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Include additional colors")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"extra_languages"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Include additional language plugins")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ppm"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Include the plugin manager")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jit"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Use luajit")))),(0,l.kt)("h2",{id:"environment-setup"},"Environment Setup"),(0,l.kt)("p",null,"Some of the steps that may be required depending on your Operating System if\nyou decide against using the ",(0,l.kt)("inlineCode",{parentName:"p"},"--wrap-mode=forcefallback")," flag."),(0,l.kt)("h3",{id:"linux"},"Linux"),(0,l.kt)("p",null,"On Debian-based systems the required libraries and Meson can be installed\nusing the following commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# To install the required libraries:\nsudo apt install libfreetype6-dev libsdl2-dev libpcre2-dev libuchardet-dev\n\n# To install Meson:\nsudo apt install meson\n# or pip3 install --user meson\n")),(0,l.kt)("h3",{id:"macos"},"macOS"),(0,l.kt)("p",null,"On macOS you can install a package manager such as ",(0,l.kt)("a",{parentName:"p",href:"https://brew.sh/"},"brew")," to\ninstall all the required dependencies."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"brew intall meson freetype sdl2 pcre2 uchardet\n")),(0,l.kt)("p",null,"Otherwise you can skip this and just use the already mentioned\n",(0,l.kt)("inlineCode",{parentName:"p"},"--wrap-mode=forcefallback")," flag."),(0,l.kt)("h3",{id:"windows-msys2"},"Windows MSYS2"),(0,l.kt)("p",null,"The build environment chosen for Pragtical on Windows is ",(0,l.kt)("a",{parentName:"p",href:"https://www.msys2.org/"},"MSYS2"),".\nFollow the installation instructions in the link."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Open ",(0,l.kt)("inlineCode",{parentName:"li"},"MinGW 64-bit")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"MinGW 32-bit")," shell from the start menu."),(0,l.kt)("li",{parentName:"ul"},"Update the MSYS2 installation with ",(0,l.kt)("inlineCode",{parentName:"li"},"pacman -Syu")),(0,l.kt)("li",{parentName:"ul"},"Restart the shell"),(0,l.kt)("li",{parentName:"ul"},"Install the dependencies:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pacman -S \\\n  ${MINGW_PACKAGE_PREFIX}-freetype \\\n  ${MINGW_PACKAGE_PREFIX}-gcc \\\n  ${MINGW_PACKAGE_PREFIX}-ninja \\\n  ${MINGW_PACKAGE_PREFIX}-pcre2 \\\n  ${MINGW_PACKAGE_PREFIX}-pkg-config \\\n  ${MINGW_PACKAGE_PREFIX}-python-pip \\\n  ${MINGW_PACKAGE_PREFIX}-SDL2 \\\n  ${MINGW_PACKAGE_PREFIX}-uchardet \\\npip3 install meson\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"${MINGW_PACKAGE_PREFIX}")," expands either to ",(0,l.kt)("inlineCode",{parentName:"p"},"mingw-w64-i686")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"mingw-w64-x86_64"),"\ndepending on the current MSYS2 shell used."))}c.isMDXComponent=!0}}]);