"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2092],{6865:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>h});var t=i(5893),r=i(1151);const s={sidebar_position:2},a="bit",o={id:"api/bit",title:"bit",description:"Mike Pall bit operations library included on every Lua runtime for",source:"@site/docs/api/bit.md",sourceDirName:"api",slug:"/api/bit",permalink:"/docs/api/bit",draft:!1,unlisted:!1,editUrl:"https://github.com/pragtical/pragtical.github.io/edit/main/docs/api/bit.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"globals",permalink:"/docs/api/globals"},next:{title:"dirmonitor",permalink:"/docs/api/dirmonitor"}},l={},h=[{value:"arshift",id:"arshift",level:2},{value:"band",id:"band",level:2},{value:"bnot",id:"bnot",level:2},{value:"bor",id:"bor",level:2},{value:"bswap",id:"bswap",level:2},{value:"bxor",id:"bxor",level:2},{value:"lshift",id:"lshift",level:2},{value:"rol",id:"rol",level:2},{value:"ror",id:"ror",level:2},{value:"rshift",id:"rshift",level:2},{value:"tobit",id:"tobit",level:2},{value:"tohex",id:"tohex",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"bit",children:"bit"}),"\n",(0,t.jsxs)(n.p,{children:["Mike Pall bit operations library included on every Lua runtime for\nconsistency with the patch ",(0,t.jsx)(n.a,{href:"https://github.com/LuaJIT/LuaJIT/issues/384",children:"https://github.com/LuaJIT/LuaJIT/issues/384"}),"\napplied for newer Lua versions support."]}),"\n",(0,t.jsxs)(n.p,{children:["See: ",(0,t.jsx)(n.a,{href:"https://bitop.luajit.org/",children:"https://bitop.luajit.org/"})]}),"\n",(0,t.jsx)(n.h2,{id:"arshift",children:"arshift"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function bit.arshift(x: integer, n: integer)\n  -> y: integer\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns either the bitwise logical arithmetic right-shift of its first\nargument by the number of bits given by the second argument."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"band",children:"band"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function bit.band(x: integer, x2: integer, ...integer)\n  -> y: integer\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns the bitwise ",(0,t.jsx)(n.code,{children:"and"})," of all of its arguments."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"bnot",children:"bnot"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function bit.bnot(x: integer)\n  -> y: integer\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns the bitwise ",(0,t.jsx)(n.code,{children:"not"})," of its argument."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"bor",children:"bor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function bit.bor(x: integer, x2: integer, ...integer)\n  -> y: integer\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns the bitwise ",(0,t.jsx)(n.code,{children:"or"})," of all of its arguments."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"bswap",children:"bswap"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function bit.bswap(x: integer)\n  -> y: integer\n"})}),"\n",(0,t.jsx)(n.p,{children:"Swaps the bytes of its argument and returns it. This can be used to\nconvert little-endian 32 bit numbers to big-endian 32 bit numbers or\nvice versa."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"bxor",children:"bxor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function bit.bxor(x: integer, x2: integer, ...integer)\n  -> y: integer\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns the bitwise ",(0,t.jsx)(n.code,{children:"xor"})," of all of its arguments."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"lshift",children:"lshift"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function bit.lshift(x: integer, n: integer)\n  -> y: integer\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns either the bitwise logical left-shift of its first argument by the\nnumber of bits given by the second argument."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"rol",children:"rol"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function bit.rol(x: integer, n: integer)\n  -> y: integer\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns the bitwise left rotation of its first argument by the number of\nbits given by the second argument. Bits shifted out on one side are\nshifted back in on the other side."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"ror",children:"ror"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function bit.ror(x: integer, n: integer)\n  -> y: integer\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns the bitwise right rotation of its first argument by the number of\nbits given by the second argument. Bits shifted out on one side are\nshifted back in on the other side."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"rshift",children:"rshift"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function bit.rshift(x: integer, n: integer)\n  -> y: integer\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns either the bitwise logical right-shift of its first argument by the\nnumber of bits given by the second argument."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"tobit",children:"tobit"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function bit.tobit(x: integer)\n  -> y: integer\n"})}),"\n",(0,t.jsx)(n.p,{children:"Normalizes a number to the numeric range for bit operations and returns it.\nThis function is usually not needed since all bit operations already\nnormalize all of their input arguments."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"tohex",children:"tohex"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"function bit.tohex(x: integer, n?: integer)\n  -> y: integer\n"})}),"\n",(0,t.jsx)(n.p,{children:"Converts its first argument to a hex string. The number of hex digits is\ngiven by the absolute value of the optional second argument. Positive\nnumbers between 1 and 8 generate lowercase hex digits. Negative numbers\ngenerate uppercase hex digits. Only the least-significant 4*|n| bits are\nused. The default is to generate 8 lowercase hex digits."}),"\n",(0,t.jsx)(n.hr,{})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>a});var t=i(7294);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);