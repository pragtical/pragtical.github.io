"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5807],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=c(n),m=s,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[d]="string"==typeof e?e:s,i[1]=r;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1230:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=n(7462),s=(n(7294),n(3905));const o={sidebar_position:6,description:"Learn about Pragtical's class implementation."},i="Classes and Objects",r={unversionedId:"developer-guide/classes-and-objects",id:"developer-guide/classes-and-objects",title:"Classes and Objects",description:"Learn about Pragtical's class implementation.",source:"@site/docs/developer-guide/classes-and-objects.md",sourceDirName:"developer-guide",slug:"/developer-guide/classes-and-objects",permalink:"/docs/developer-guide/classes-and-objects",draft:!1,editUrl:"https://github.com/pragtical/pragtical.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/developer-guide/classes-and-objects.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,description:"Learn about Pragtical's class implementation."},sidebar:"tutorialSidebar",previous:{title:"Managing Keyboard Shortcuts",permalink:"/docs/developer-guide/managing-keyboard-shortcuts"},next:{title:"Using Regular Expressions",permalink:"/docs/developer-guide/using-regular-expressions"}},l={},c=[{value:"Creating classes",id:"creating-classes",level:2},{value:"Super class",id:"super-class",level:2},{value:"Class relationships",id:"class-relationships",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"classes-and-objects"},"Classes and Objects"),(0,s.kt)("p",null,"We've briefly talked about the class implementation used by Pragtical\nin the introduction.\nIn this article, we'll talk about how to use the implementation\nefficiently."),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Some methods here will be written differently than in\nthe source code.\nThis is to clarify how the methods ",(0,s.kt)("em",{parentName:"p"},"should")," be called.")),(0,s.kt)("h2",{id:"creating-classes"},"Creating classes"),(0,s.kt)("p",null,"Similar to many other languages, all classes extend the ",(0,s.kt)("inlineCode",{parentName:"p"},"Object")," class.\nTo extend a class, one can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"Object.extend()")," method."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"function Object.extend(base_class: Object): Object end\n")),(0,s.kt)("p",null,"This method accepts one parameter \u2014 the class to copy.\nThis method will create a copy of a ",(0,s.kt)("inlineCode",{parentName:"p"},"Object")," that can\nbe extended without affecting the original object."),(0,s.kt)("p",null,"You can now define or override methods and metamethods of this\nnewly created class.\nTo initialize a class, you can override the ",(0,s.kt)("inlineCode",{parentName:"p"},"Object:new()")," method."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'-- load the Object class\nlocal Object = require "core.object"\n-- since the source class is usually the one you want to copy,\n-- we often simplify it to Object:extend().\n-- This is equivalent to Object.extend(Object).\nlocal Animal = Object:extend()\n-- define a constructor for Animal\nfunction Animal:new()\n  self.type = "animal"\nend\n')),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("inlineCode",{parentName:"p"},"Object")," implements the ",(0,s.kt)("inlineCode",{parentName:"p"},"__tostring()")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"__call()")," metamethods.\nYou can override the ",(0,s.kt)("inlineCode",{parentName:"p"},"__tostring()")," metamethod to return a string\nthat suits your class.")),(0,s.kt)("h2",{id:"super-class"},"Super class"),(0,s.kt)("p",null,"You can access the super class via ",(0,s.kt)("inlineCode",{parentName:"p"},"Object.super"),".\nFor instance, to call the constructor of the super class, you can do:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'local Object = require "core.object"\nlocal Animal = Object:extend()\nfunction Animal:new()\n  self.type = "animal"\nend\n\nlocal Dog = Animal:extend()\nfunction Dog:new()\n  -- call the superclass constructor\n  -- note the use of . instead of : and explicitly passing self\n  Dog.super.new(self)\nend\n')),(0,s.kt)("p",null,"Note that you must call super class methods with ",(0,s.kt)("inlineCode",{parentName:"p"},".")," instead of ",(0,s.kt)("inlineCode",{parentName:"p"},":"),"\nand pass ",(0,s.kt)("inlineCode",{parentName:"p"},"self")," as the first parameter.\nIf you call the method with ",(0,s.kt)("inlineCode",{parentName:"p"},":"),", it will call the method with ",(0,s.kt)("inlineCode",{parentName:"p"},"self"),"\nas ",(0,s.kt)("inlineCode",{parentName:"p"},"super"),", which is ",(0,s.kt)("strong",{parentName:"p"},"the super class")," and not ",(0,s.kt)("strong",{parentName:"p"},"the instance"),"."),(0,s.kt)("h2",{id:"class-relationships"},"Class relationships"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"Object")," class also provide utility methods for checking relations\nbetween classes and object."),(0,s.kt)("p",null,"To check whether an object is strictly an instance of a class\n(not an instance of a child class),\nuse ",(0,s.kt)("inlineCode",{parentName:"p"},"Object:is()"),".\nTo do the inverse, use ",(0,s.kt)("inlineCode",{parentName:"p"},"Object:is_class_of()"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"function Object:is(class: Object): boolean end\nfunction Object.is_class_of(class: Object, instance: Object): boolean end\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Object:is()")," accepts a parameter \u2014 the class to compare it to.\nIf the object is strictly an instance of the class,\nthe method returns true."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Object.is_class_of()")," accepts a class and compares it against\nan instance of an object.\nIf the object is a strictly an instance of the class,\nthe method returns true."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"local Animal = Object:extend()\nlocal Dog = Animal:extend()\nlocal Cat = Animal:extend()\nlocal doggo = Dog()\n\nprint(doggo:is(Dog)) -- prints true\nprint(doggo:is(Cat)) -- prints false\nprint(doggo:is(Animal)) -- also prints false\n\n-- note that since we're going to pass Dog as the first parameter,\n-- we might as well as use the colon notation\nprint(Dog:is_class_of(doggo)) -- prints true\nprint(Cat:is_class_of(doggo)) -- prints false\nprint(Animal:is_class_of(doggo)) -- prints false\n")),(0,s.kt)("p",null,"To check whether an object is an instance of a class\n(or an instance of child class), use ",(0,s.kt)("inlineCode",{parentName:"p"},"Object:extends()"),".\nTo do the inverse, use ",(0,s.kt)("inlineCode",{parentName:"p"},"Object:is_extended_by()"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"function Object:extends(class: Object): boolean end\nfunction Object.is_extended_by: Object, instance: Object): boolean end\n")),(0,s.kt)("p",null,"The methods accept the same parameters as ",(0,s.kt)("inlineCode",{parentName:"p"},"Object:is()"),"\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"Object:is_class_of()"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"local Animal = Object:extend()\nlocal Dog = Animal:extend()\nlocal Cat = Animal:extend()\nlocal doggo = Dog()\n\nprint(doggo:extends(Dog)) -- prints true\nprint(doggo:extends(Cat)) -- prints false\nprint(doggo:extends(Animal)) -- prints true\n\n-- note that since we're going to pass Dog as the first parameter,\n-- we might as well as use the colon notation\nprint(Dog:is_extended_by(doggo)) -- prints true\nprint(Cat:is_extended_by(doggo)) -- prints false\nprint(Animal:is_extended_by(doggo)) -- prints true\n")))}u.isMDXComponent=!0}}]);