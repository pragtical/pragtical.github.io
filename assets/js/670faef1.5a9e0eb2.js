"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3298],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||o;return n?r.createElement(h,s(s({ref:t},d),{},{components:n})):r.createElement(h,s({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5804:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:9,description:"Learn how to use the Process API to start and manage child processes."},s="Child Processes",i={unversionedId:"developer-guide/child-processes",id:"developer-guide/child-processes",title:"Child Processes",description:"Learn how to use the Process API to start and manage child processes.",source:"@site/docs/developer-guide/child-processes.md",sourceDirName:"developer-guide",slug:"/developer-guide/child-processes",permalink:"/docs/developer-guide/child-processes",draft:!1,editUrl:"https://github.com/pragtical/pragtical.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/developer-guide/child-processes.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,description:"Learn how to use the Process API to start and manage child processes."},sidebar:"tutorialSidebar",previous:{title:"Interacting with the OS",permalink:"/docs/developer-guide/interacting-with-the-os"},next:{title:"Documents",permalink:"/docs/developer-guide/documents"}},l={},p=[{value:"Example: reading a file with <code>cat</code>",id:"example-reading-a-file-with-cat",level:2},{value:"Terms",id:"terms",level:2},{value:"Using the Process API",id:"using-the-process-api",level:2},{value:"Reading from a child process",id:"reading-from-a-child-process",level:3},{value:"Waiting for a child process",id:"waiting-for-a-child-process",level:3},{value:"Terminating a child process",id:"terminating-a-child-process",level:3},{value:"Miscellaneous",id:"miscellaneous",level:3},{value:"Error handling",id:"error-handling",level:3}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"child-processes"},"Child Processes"),(0,a.kt)("p",null,"Pragtical provides a process API to launch external applications.\nThis API is meant to replace Lua's ",(0,a.kt)("inlineCode",{parentName:"p"},"io.popen"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"system.exec()")," and lite's ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rxi/console/blob/fb3d414d085d4110364314d6cd8380dc1d386249/init.lua#L100"},"pipe-to-a-file")," approach."),(0,a.kt)("p",null,"Advantages of this API includes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Proper argument escaping (arguments are supplied via a table)"),(0,a.kt)("li",{parentName:"ul"},"Non-blocking IO"),(0,a.kt)("li",{parentName:"ul"},"Able to detach processes from Pragtical"),(0,a.kt)("li",{parentName:"ul"},"Does not create temporary files"),(0,a.kt)("li",{parentName:"ul"},"Mostly cross-platform (does not require special code for each shell)"),(0,a.kt)("li",{parentName:"ul"},"Does not create a console window on Windows")),(0,a.kt)("p",null,"Unless you plan to run a command and forget about it, you should stick\nwith the Process API as it provides more features."),(0,a.kt)("h2",{id:"example-reading-a-file-with-cat"},"Example: reading a file with ",(0,a.kt)("inlineCode",{parentName:"h2"},"cat")),(0,a.kt)("p",null,"This example uses ",(0,a.kt)("inlineCode",{parentName:"p"},"cat")," to read a file. This approach is impractical,\nbut it demonstrates the typical usage of the Process API."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local core = require "core"\n\nlocal filename = "myfile.lua"\nlocal proc = process.start { "cat", filename }\n\n-- we use core.add_thread so that we don\'t softlock the editor\n-- while reading the output of the child process.\ncore.add_thread(function()\n  local readbuf = {}\n  while true do\n    -- yield so that the rest of the editor can carry out its tasks\n    -- eg. accepting input, updating the UI\n    coroutine.yield(1)\n\n    -- try to read from the standard output of the process.\n    local read = proc:read_stdout()\n    -- read == nil is a pretty good indication that the pipe is closed\n    -- therefore, no more data can be read.\n    if read == nil then break end\n    if read ~= "" then\n      -- if we read something, append it into the table\n      readbuf[#readbuf+1] = read\n    end\n    -- efficiently concatenate all the output into a string\n    local process_output = table.concat(readbuf)\n    -- note: never use core.log(process_output)!\n    -- core.log() accepts the same parameters as string.format(),\n    -- so you risk injecting invalid format strings!\n    core.log("read: %s", process_output)\nend)\n')),(0,a.kt)("h2",{id:"terms"},"Terms"),(0,a.kt)("p",null,"To prevent confusion, these terms are used to describe various things:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Terms"),(0,a.kt)("th",{parentName:"tr",align:null},"Meaning"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Child process"),(0,a.kt)("td",{parentName:"tr",align:null},"A process created with Process API via ",(0,a.kt)("inlineCode",{parentName:"td"},"process.start()"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Parent process"),(0,a.kt)("td",{parentName:"tr",align:null},"The parent process that owns the child. This usually refers to Pragtical.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Process"),(0,a.kt)("td",{parentName:"tr",align:null},"Any process (including child and parent processes).")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Stream"),(0,a.kt)("td",{parentName:"tr",align:null},"An entity used to transfer data between child and parent processes. Think of it as a queue that can only be enqueued and dequeued.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Standard input"),(0,a.kt)("td",{parentName:"tr",align:null},"The standard input of most processes, also known as stdin.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Standard error"),(0,a.kt)("td",{parentName:"tr",align:null},"The standard error of most processes, also known as stderr.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Standard output"),(0,a.kt)("td",{parentName:"tr",align:null},"The standard output of most processes, also known as stdout.")))),(0,a.kt)("h2",{id:"using-the-process-api"},"Using the Process API"),(0,a.kt)("p",null,"To create a child process, use ",(0,a.kt)("inlineCode",{parentName:"p"},"process.start()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local type RedirectType = number\n\nlocal record ProcessOptions\n  timeout: number,\n  cwd: string,\n  stdin: RedirectType,\n  stdout: RedirectType,\n  stderr: RedirectType,\n  env: {string: string}\nend\n\nfunction process.start(program_args: {string} | string,\n                        options: ProcessOptions): Process\nend\n")),(0,a.kt)("p",null,"The first argument of the function is a table containing the program name\nand its arguments.\nThe program name and its arguments need not be escaped as the API does it\nwhen necessary."),(0,a.kt)("p",null,"Since v2.1.0, users can provide a string instead of a table as the first\nargument to prevent the function from escaping them.\nThis may help with legacy software on Windows such as ",(0,a.kt)("inlineCode",{parentName:"p"},"cmd.exe"),".\nHowever, this should not be done on POSIX platforms as the entire string will be\ntreated as the program name and cause issues."),(0,a.kt)("admonition",{title:"Before v2.1.0, this table is not escaped on Windows.",type:"note"}),(0,a.kt)("p",null,"The second argument specifies options to control process creation."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"timeout")," is an advisory value that will be used by ",(0,a.kt)("inlineCode",{parentName:"p"},"process:wait()")," and\nis optional."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cwd")," is the current working directory of the program.\nIf specified, the child process would run as if it was started in the directory."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"stdin"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"stdout")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"stderr")," tells Pragtical how to treat standard\ninput and output of the child process.\nThere are four possible values:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"process.REDIRECT_DEFAULT")," is the default behavior. It will be deprecated\nin future versions as specifying ",(0,a.kt)("inlineCode",{parentName:"li"},"nil")," is preferred."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"process.REDIRECT_PIPE")," allows the Process API to write/read\nthe input/output of the child process."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"process.REDIRECT_PARENT")," redirects the child process' input/output\nto the parent.\nIf ",(0,a.kt)("inlineCode",{parentName:"li"},"stdin")," has this value, child process will accept input from the parent\nprocess' console.\nIf ",(0,a.kt)("inlineCode",{parentName:"li"},"stdout")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"stderr")," has this value, child process will output to the\nparent process' console."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"process.REDIRECT_DISCARD")," discards any data to/from child process."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"process.REDIRECT_STDOUT")," can only be used on ",(0,a.kt)("inlineCode",{parentName:"li"},"stderr")," and will redirect\nthe child process' standard error to its standard output.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"env")," is a table containing the environment variables for the child process as\nkey-value pairs."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"On POSIX platforms, this table will ",(0,a.kt)("strong",{parentName:"p"},"extend")," the parent's environment.\nOn Windows, this table will ",(0,a.kt)("strong",{parentName:"p"},"replace")," the parent's environment.\nIn the future, this inconsistency may be fixed.")),(0,a.kt)("p",null,"The function returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Process")," object that the user should hold onto until\nthe child process can be safely terminated.\nIf the ",(0,a.kt)("inlineCode",{parentName:"p"},"Process")," object is garbage-collected, the child process will be killed."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- run something in the background\nlocal proc = process.start { "bash", "-c", "echo hello world" }\n\n-- start a process and read its output\nlocal proc = process.start({ "cat", "myfile" }, { stdout = process.REDIRECT_PIPE })\n-- might or might not print something as the child process\n-- might not have written data to the standard output\nprint(proc:read_stdout())\n\n-- start a script with verbose output (accepting options over env vars)\nlocal proc = process.start({ "./site.rb" }, { env = { VERBOSE = "1" } })\n')),(0,a.kt)("h3",{id:"reading-from-a-child-process"},"Reading from a child process"),(0,a.kt)("p",null,"If the child process is created with proper output modes,\none can read the standard output/error of the child process with the API."),(0,a.kt)("p",null,"To read from the child process' standard output, use ",(0,a.kt)("inlineCode",{parentName:"p"},"process:read_stdout(len)"),"."),(0,a.kt)("p",null,"To read from the child process' standard error, use ",(0,a.kt)("inlineCode",{parentName:"p"},"process:read_stderr(len)"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"function process:read_stdout(len?: number): string, string, number end\nfunction process:read_stderr(len?: number): string, string, number end\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"len")," parameter is optional and is used to specify the maximum number of\nbytes to read from the stream."),(0,a.kt)("p",null,"These methods return a string with size up to ",(0,a.kt)("inlineCode",{parentName:"p"},"len")," if data can be read.\nOtherwise, they will return ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),", an error message and the error code."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- proc is a process with stdout set to process.REDIRECT_PIPE\n-- read default number of bytes (2048) from the process' standard output\nprint(proc:read_stdout())\n\n-- read default number of bytes (2048) from the process' standard error\n-- ensure that stderr of the process is not set to process.REDIRECT_STDOUT!\nprint(proc:read_stderr())\n")),(0,a.kt)("h3",{id:"waiting-for-a-child-process"},"Waiting for a child process"),(0,a.kt)("p",null,"You might want to wait for a child process to end."),(0,a.kt)("p",null,"To check if a child process is still running, use ",(0,a.kt)("inlineCode",{parentName:"p"},"process:running()"),"."),(0,a.kt)("p",null,"To wait for a child process to end, use ",(0,a.kt)("inlineCode",{parentName:"p"},"process:wait(time)"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"function process:running(): boolean end\nfunction process:wait(timeout: number): number, string, number end\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"process:running()")," returns a boolean immediately indicating whether the process\nhas ended."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Do not use ",(0,a.kt)("inlineCode",{parentName:"p"},"process:running()")," to determine when to stop reading the output\nof a child process.\nA child process can end and leave residual data in the stream.\nInstead, you should call ",(0,a.kt)("inlineCode",{parentName:"p"},"process.read_stdout()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"process.read_stderr()"),"\nuntil an appropriate error (",(0,a.kt)("inlineCode",{parentName:"p"},"process.ERROR_PIPE"),") occurs.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"process:wait(time)")," will wait for specified number of milliseconds before\nreturning.\nIf the child process has ended, it will return the exit code of the process.\nIf the child process is still running or an error occurred,\nit will return ",(0,a.kt)("inlineCode",{parentName:"p"},"nil")," followed by an error message and error code."),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"time")," is 0, the method returns immediately.\nIf ",(0,a.kt)("inlineCode",{parentName:"p"},"time")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"process.WAIT_INFINITE"),", the method waits until the child process\nends.\nIf ",(0,a.kt)("inlineCode",{parentName:"p"},"time")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"process.WAIT_DEADLINE"),", the method uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"timeout")," value\nspecified when calling ",(0,a.kt)("inlineCode",{parentName:"p"},"process.start()"),".\nIf this value is not specified, it will wait until the child process ends."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- wait for a process to end\ncore.add_thread(function()\n  while process:running() do\n    coroutine.yield(0)\n    print("I am still running")\n  end\n  print("Oh no!")\nend)\n\n-- wait for a process to end, and print its exit code.\nprint("The process exited with the exit code " .. process:wait(process.WAIT_INFINITE))\n')),(0,a.kt)("h3",{id:"terminating-a-child-process"},"Terminating a child process"),(0,a.kt)("p",null,"The Process API allows the user to terminate a child process gracefully\nor forcefully."),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"process:terminate()")," to terminate a child process gracefully.\nIf it fails, use ",(0,a.kt)("inlineCode",{parentName:"p"},"process:kill()")," to forcefully terminate it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"function process:terminate(): boolean, string, number end\nfunction process:kill(): boolean, string, number end\n")),(0,a.kt)("p",null,"On POSIX platforms, ",(0,a.kt)("inlineCode",{parentName:"p"},"process:terminate()")," sends ",(0,a.kt)("inlineCode",{parentName:"p"},"SIGTERM")," to the child process\nwhile ",(0,a.kt)("inlineCode",{parentName:"p"},"process:kill()")," sends ",(0,a.kt)("inlineCode",{parentName:"p"},"SIGKILL")," to the child process."),(0,a.kt)("p",null,"On Windows, ",(0,a.kt)("inlineCode",{parentName:"p"},"process:terminate()")," uses ",(0,a.kt)("inlineCode",{parentName:"p"},"GenerateConsoleCtrlEvent(CTRL_BREAK_EVENT)"),"\nto simulate CTRL+BREAK.\n",(0,a.kt)("inlineCode",{parentName:"p"},"process:kill()")," uses ",(0,a.kt)("inlineCode",{parentName:"p"},"TerminateProcess()")," to terminate the process immediately."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"process:kill()")," can only ",(0,a.kt)("strong",{parentName:"p"},"request")," a process to be killed.\nOn POSIX, signals are delivered asynchronously; a child process can be too\nbusy to process them (e.g. stuck at a blocking ",(0,a.kt)("inlineCode",{parentName:"p"},"read()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"write()")," call).\nThis is the same on Windows except ",(0,a.kt)("inlineCode",{parentName:"p"},"TerminateProcess()")," will\nrequest cancellation of all pending IO operations.\nThis is impossible on POSIX platforms.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- try to terminate child process\nproc:terminate()\n\n-- wait for child process to end\nif not proc:wait(1000) then\n  -- didn't work, have to terminate it forcefully\n  proc:kill()\nend\n")),(0,a.kt)("h3",{id:"miscellaneous"},"Miscellaneous"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"process:pid()")," can be used to obtain the PID of a child process.\nIt will return ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," if the process is not running."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"process:returncode()")," can be used to get the exit code of the child process\nwithout calling ",(0,a.kt)("inlineCode",{parentName:"p"},"process:wait()"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"process.strerror()")," can be used to convert error codes emitted by the\nprocess API into human-readable error messages.\nIf an error message is unavailable, ",(0,a.kt)("inlineCode",{parentName:"p"},"nil")," will be returned."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"process:close_stream()")," can be used to close the child process' streams."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"function process:pid(): number end\nfunction process:returncode(): number end\nfunction process.strerror(errcode: number): string end\nfunction process:close_stream(stream: number): number, string, number end\n")),(0,a.kt)("p",null,"!!! note\n",(0,a.kt)("inlineCode",{parentName:"p"},"process:pid()")," will not return the correct process ID if\nthe child process ended early."),(0,a.kt)("h3",{id:"error-handling"},"Error handling"),(0,a.kt)("p",null,"The Process API functions and methods\nwill return error messages/codes or throw errors."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"process.start()")," will throw an error if the program cannot be run.\nOn Windows, this usually results in an error message\n",(0,a.kt)("inlineCode",{parentName:"p"},'"Error creating a process: 2"'),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"process:read()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"process:read_stdout()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"process:read_stderr()")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"process:write()")," may throw errors if:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The child process died."),(0,a.kt)("li",{parentName:"ul"},"The child process closed their side of the input/output."),(0,a.kt)("li",{parentName:"ul"},"The input/output is closed via ",(0,a.kt)("inlineCode",{parentName:"li"},"process:close_stream()"),".")),(0,a.kt)("p",null,"Not all errors are documented here.\nIn general, it is recommended to call the functions with ",(0,a.kt)("inlineCode",{parentName:"p"},"pcall()")," until this\ninconsistency is fixed in the future."))}u.isMDXComponent=!0}}]);