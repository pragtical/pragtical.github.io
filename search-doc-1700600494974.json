[{"title":"Pragtical v3.1.0 Release","type":0,"sectionRef":"#","url":"/blog/pragtical-v310-release","content":"","keywords":""},{"title":"Changes Log​","type":1,"pageTitle":"Pragtical v3.1.0 Release","url":"/blog/pragtical-v310-release#changes-log","content":""},{"title":"New Features​","type":1,"pageTitle":"Pragtical v3.1.0 Release","url":"/blog/pragtical-v310-release#new-features","content":"Merged project rework with fixes and performance improvements (ce5e8db4) "},{"title":"Documentation​","type":1,"pageTitle":"Pragtical v3.1.0 Release","url":"/blog/pragtical-v310-release#documentation","content":"Merged documentation for core.dirwatch (#1565) Merged documentation for core.contextmenu (#1567) "},{"title":"Backward Incompatible Changes​","type":1,"pageTitle":"Pragtical v3.1.0 Release","url":"/blog/pragtical-v310-release#backward-incompatible-changes","content":"Project handling functions have been completely replaced as explained on (#1455) "},{"title":"Fixes​","type":1,"pageTitle":"Pragtical v3.1.0 Release","url":"/blog/pragtical-v310-release#fixes","content":"settings: respect disabled plugins on lua modules (c2ffe3e2) plugin workspace: delay workspace loading (41e5caa0) Fix autoreload plugin bugs and performance issues (ec0ae57f) "},{"title":"Other Changes​","type":1,"pageTitle":"Pragtical v3.1.0 Release","url":"/blog/pragtical-v310-release#other-changes","content":"Merged feat(src/renderer): unify fontgroup baseline (#1560) Merged and customized use Lua wrap by default (#1481) Updated all meson wraps to latest versions comment typo in data/core/init.lua (#1549) "},{"title":"Lite XL Inherited Changes​","type":1,"pageTitle":"Pragtical v3.1.0 Release","url":"/blog/pragtical-v310-release#lite-xl-inherited-changes","content":"Fix #1538 log scrolls automatically (the real PR) (#1546) Skip checking files if no filename was provided to syntax.get (8a8bd2f9) Changed log view settings (#266) Allow setting custom glyphset size (#1542) style(src/renderer): use FreeType header names (#1554) Return state when tokenizing plaintext syntaxes (b6ac4f1e) feat(src/renderer): stream fonts with SDL_RWops on all platforms (#1555) Updated extension for mac. (#1563) Documentation for core.command (#1564) Full Changelog: https://github.com/pragtical/pragtical/compare/v3.0.0...v3.1.0 "},{"title":"First Blog Post","type":0,"sectionRef":"#","url":"/blog/first-blog-post","content":"The website is still a work in progress but things seem to be getting in order with docusaurus :)","keywords":""},{"title":"Pragtical v3.1.1 Release","type":0,"sectionRef":"#","url":"/blog/pragtical-v311-release","content":"","keywords":""},{"title":"New Features​","type":1,"pageTitle":"Pragtical v3.1.1 Release","url":"/blog/pragtical-v311-release#new-features","content":"Merged Windows dark title bar theme support from lite-xl/lite-xl#514 with some changes to make it less invasive (7ca48a83) Introduced new color schemes yaru and yaru_dark "},{"title":"Build System​","type":1,"pageTitle":"Pragtical v3.1.1 Release","url":"/blog/pragtical-v311-release#build-system","content":"CI Latest Builds: switched from debug to debugoptimized (cf880c5a) Added widget as a meson subproject (bdddc4c6) Added colors and languages as meson subproject (111ca76f) "},{"title":"Documentation​","type":1,"pageTitle":"Pragtical v3.1.1 Release","url":"/blog/pragtical-v311-release#documentation","content":"Fixed common.relative_path() doc comments (f44f10fa) "},{"title":"UI Enhancements​","type":1,"pageTitle":"Pragtical v3.1.1 Release","url":"/blog/pragtical-v311-release#ui-enhancements","content":"Added GUI for treeview show hidden/ignored (64eee3d3) "},{"title":"Fixes​","type":1,"pageTitle":"Pragtical v3.1.1 Release","url":"/blog/pragtical-v311-release#fixes","content":"Do not append cwd to absolute files on startup (853e6b76) "},{"title":"Other Changes​","type":1,"pageTitle":"Pragtical v3.1.1 Release","url":"/blog/pragtical-v311-release#other-changes","content":"Added compat for lua 5.4 userdata (uv) functions (e048a9c8) Refactored core.project into a core.object (a5df5be8) Added doc commentsExposed compile_ignore_files() as a method Recompile ignore patterns when changed from gui (c3edcafc) "},{"title":"Lite XL Inherited Changes​","type":1,"pageTitle":"Pragtical v3.1.1 Release","url":"/blog/pragtical-v311-release#lite-xl-inherited-changes","content":"Normalize stroke before adding keybind (#1334)Make DocView aware of scrollbars sizes (#1177) Full Changelog: https://github.com/pragtical/pragtical/compare/v3.1.0...v3.1.1 "},{"title":"Pragtical v3.0.0 Release","type":0,"sectionRef":"#","url":"/blog/pragtical-v300-release","content":"","keywords":""},{"title":"Changes Log​","type":1,"pageTitle":"Pragtical v3.0.0 Release","url":"/blog/pragtical-v300-release#changes-log","content":""},{"title":"New Features​","type":1,"pageTitle":"Pragtical v3.0.0 Release","url":"/blog/pragtical-v300-release#new-features","content":"Add more syntax symbols (00a0e9ca) Added core functions to lighten or darken colors using pixel blending. Support custom symbol types on language plugins (c348be99) Added font metadata support lite-xl/lite-xl#1028 Added encoding support lite-xl/lite-xl#1161 Added shared memory support lite-xl/lite-xl#1486 Added IPC plugin with shared memory backend (87fc7105) force draw on core.tab_drag_received (e5709850) Added widgets as a git submodule (a4681a62) language_lua: doc comments highlighting lite-xl/lite-xl#1019 language_js: support for embedded html syntax (like the one used on ReactJS) (#4) Added support for background threads (co-routines) that keep running even when the window has no focus (#5) core.add_background_thread(...) Merged text overwriting lite-xl/lite-xl#1495 "},{"title":"Performance Improvements​","type":1,"pageTitle":"Pragtical v3.0.0 Release","url":"/blog/pragtical-v300-release#performance-improvements","content":"Added LuaJIT support lite-xl/lite-xl#880 Enable LuaJIT by default (8d84ab29) Added multi-threading support lite-xl/lite-xl#830 Added multi-threaded project search (f8591176)Added multi-threaded find files (f8591176) Reduce default coroutine timeout lite-xl/lite-xl#1468 Use less cpu when only running background coroutines (f230c38f) Change LuaJIT optimization defaults (8733c5fb) Disable the compat fix_pattern (85f7a077) "},{"title":"Documentation​","type":1,"pageTitle":"Pragtical v3.0.0 Release","url":"/blog/pragtical-v300-release#documentation","content":"Merge documentation for config options lite-xl/lite-xl#1512 Merged documentation for core.common lite-xl/lite-xl#1510 "},{"title":"Backward Incompatible Changes​","type":1,"pageTitle":"Pragtical v3.0.0 Release","url":"/blog/pragtical-v300-release#backward-incompatible-changes","content":"Language plugins file match pattern will no longer support using the ^pattern to match the beginning of a file, PATHSEP should be used instead "},{"title":"UI Enhancements​","type":1,"pageTitle":"Pragtical v3.0.0 Release","url":"/blog/pragtical-v300-release#ui-enhancements","content":"Add icons support to autocomplete plugin (0559cd7a) Added initial commandview suggestions mouse support (276d92a6) Added improved scaling support from lite-xl/lite-xl#1347 Added settings plugin (d5327a8d) added config for tabs top margin (90150bf6) Scale the entire UI by default on scale plugin (a5096b47) Added friendlier search/replace user interface (518226eb) Add missing config spec settings to treeview (d71175d1) Better coroutine handling on no focus (456b8b25) "},{"title":"Fixes​","type":1,"pageTitle":"Pragtical v3.0.0 Release","url":"/blog/pragtical-v300-release#fixes","content":"Fix node resizing on mouse drag (c2733928) "},{"title":"Other Changes​","type":1,"pageTitle":"Pragtical v3.0.0 Release","url":"/blog/pragtical-v300-release#other-changes","content":"Autocomplete plugin improvements (81b45706) Support suggestion symbols scoping global: all open documentslocal: current documentrelated: all open documents with same syntaxnone: language syntax symbols only Register style.syntax[] entries as iconsOther related fixes Attach command buffer to Renderer Window (#3) Unified non-addons and addons releases (35d01f5f) Removed lhelper as a build option (56b3a6c0) Single pattern for common.utf8_chars (9ccfade6) innosetup: installation path to environment task (allows command line access) (ce995eb2) LuaJIT compat: allow nil msg on debug.traceback (ca0791a8) Fix LuaJIT build on MacOS crosscompile (7d8340c4) Updated MOD_VERSION_MINOR (4ea0da57) Added workflow to produce setup and portable builds on every commit. Rebranding of project name and assets. "},{"title":"Lite XL Inherited Changes​","type":1,"pageTitle":"Pragtical v3.0.0 Release","url":"/blog/pragtical-v300-release#lite-xl-inherited-changes","content":"Allow command buffer to be expanded (#1297)do not allow users to create an empty font group (#1303)Make api_require's nodes const (#1296)Fix a memory leak (#1305)Don't set a value twice (#1306)Make dirwatch sorting compatible with what file_bisect expects (#1300)Handle readlink errors (#1292)linewrapping: Disable horizontal scrolling when enabled (#1309)plugin api: added missing luaL_typeerror (#1313)defer lua error until after cleanup (#1310)fix: center title and version in emptyview (#1311)Reorganize resources/ + wasm target (#1244)replace uses of SDL_Window with RenWindow (#1319)Create Renderer Only When It Doesn't Exist (#1315)language_md: add nix code block highlighting (#1323)Use table.move to implement common.splice (#1324)Make empty groups in regex.gmatch return their offset (#1325)remove static libgcc from meson (#1290)Avoid drawing hidden text in DocView:draw_line_text (#1298)Added in Config Postload (#1336)plugin api: allow usage on multiple source files (#1335)Add &quot;Open with Lite XL&quot; to windows' context menu (#1333)pass RenWindow by argument (#1321)ci: fix msys build now requiring ca-certificates (#1348)Getting rid of annoying forward slash on windows. (#1345)Abstracted open_doc out to allow for more easy overriding. (#1344)feat: add option to only draw whitespace if it is within selection (#1321)Replace globally when replacing from selection (#1331)Context menu fixes and keyboard navigation (#1338)fix: exec() error not returned to parent (#1363)Make mod-version follow semver (#1036)Improved plugins config table handling (#1356)Restore in-selection replace as discussed in #1331 (#1368)NagView: properly rescale on scale change (#1379)plugins scale: also rescale style.expanded_scrollbar_size (#1380)Improve DocView:get_visible_line_range precision (#1382)Allow groups to be used in end delimiter patterns in tokenizer (#1317)Make mouse scrollwheel hovering tabs scroll the tab bar (#1314)Correct the inverted tabs scrolling (02a99b17)Make tab scrolling more flexible (#1384)fix incorrect x_offset if opened docs have different tab sizes (#1383)Added in ability to specify prefix via env variable. (#1388)Use correct view for scrolling to find-replace:repeat-find results (#1400)Add manifest on Windows (#1405)Split Command struct into different structs for each command type (#1407)refactor(main): move SetProcessDPIAware to manifests (#1413)Improve text width calculation precision (#1408)Use clipping functions provided by SDL (#1426)Make TreeView follow the current tab (#1411)Asynchronous process reaping (#1412)Made coroutines make more sense, and fixed a bug. (#1381)Disable trimwhitespace and drawwhitespace via their configs (#1446)Allow tokenizer to pause and resume in the middle of a line (#1444)Added in explicit touchscreen keyboard support. (#1389)fix cursors positions when deleting multiple selections (#1393)add autocompletion to multicursor (#1394)Added in support for foreground and background events. (#1395)Fix invalid EXEFILE and EXEDIR on Windows (#1396)fix(windows-utf8-patch): fix os.getenv() not supporting UTF-8 output (#1397)Add View dragging (#1402)fix: fix differing stacktrace on stdout and file (#1404)fix(CI): bump dependency versions (#1434)Optimizing MSYS2 CI (#1435)Update api_require to expose more symbols (#1437)Make system.path_compare more case-aware (#1457)feat: add statusview item to show selections (#1445)Fix for api_require wrong macro &amp;&amp; conditions (#1465)upgrade header files to Lua 5.4 (#1436)Cross compiling improvements + macOS universal binary (#1458)Show error message in crash message box (#1461)refactor(plugin_api): move the header into include/ (#1440)Merge carets after doc:move-to-{previous,next}-char (#1462)StatusView compat fix with older Lua runtimes (8cb84254)Make system.path_compare more digit-aware (#1474)fix(process): check for HANDLE_INVALID (#1475)Added in double-clicking on emptyview and tab bar. (#1478)Restore horizontal scroll position after scale change (#494)Allowed for overrides of toolbar items (#1157)detectindent: fix wrong detection reported by Adam (#1500)Move lineguide below blinking cursor, fixes #1488 (#1511)Close lua state when exiting on a runtime error (#1487)Add mouse grab (#1501)Add top tab margins (#1479)Increase number of loadable glyphsets (#1524) "},{"title":"Pragtical v3.1.2 Release","type":0,"sectionRef":"#","url":"/blog/pragtical-v312-release","content":"","keywords":""},{"title":"New Features​","type":1,"pageTitle":"Pragtical v3.1.2 Release","url":"/blog/pragtical-v312-release#new-features","content":"Syntax files symbol_pattern, non_word_chars props (#12) New Welcome Screen - Converted emptyview to widget with additions (e08f1b18) "},{"title":"Fixes​","type":1,"pageTitle":"Pragtical v3.1.2 Release","url":"/blog/pragtical-v312-release#fixes","content":"Fixes #10 by using the scrollbar expanded size (#11) Fix core:open-file to not be dependant on chdir (47bfcb07) Respect coroutines redraw requests while on focus (f450b612) Do not process clicks on contextmenu divider (#22) Fixed issue with open file command (d8906c21) MacOS: allow combining cmd+ctrl and replace alt with option (0674f1f5) "},{"title":"Enhancements​","type":1,"pageTitle":"Pragtical v3.1.2 Release","url":"/blog/pragtical-v312-release#enhancements","content":"Improvements to language_css (f2a0790d) Better compat math.{tointeger|type|ult} for luajit (80bce6c0) Added Mike Pall bitops library to non jit lua for consistency (5efc02a8) Use native bit operators on Lua &gt;= 5.3 (10cecbec) Highlight CUDA source code the same as C++ (#15) "},{"title":"UI Enhancements​","type":1,"pageTitle":"Pragtical v3.1.2 Release","url":"/blog/pragtical-v312-release#ui-enhancements","content":"statusview: separate item for doc position percent lite-xl/lite-xl#1579 Highlight default theme on settings ui, fixes #23 (cd7181df) treeview: do not show hidden files by default (ecda0a0a) "},{"title":"Colors​","type":1,"pageTitle":"Pragtical v3.1.2 Release","url":"/blog/pragtical-v312-release#colors","content":"Added new Yaru dark and light theme (5fa3cc13) Improvements to tokyo-night (551c351d) Added solarized_dark theme (b9791efa) Improvements to Monokai themes (79264c47) "},{"title":"Build System​","type":1,"pageTitle":"Pragtical v3.1.2 Release","url":"/blog/pragtical-v312-release#build-system","content":"Switch to an older ubuntu builder, fixes #13 (#16) Fixes for msvc ci run (39caabc0) Applied msvc fixes from lite-xl/lite-xl#1572 Rename latest builds to rolling (51754f33) "},{"title":"Widgets​","type":1,"pageTitle":"Pragtical v3.1.2 Release","url":"/blog/pragtical-v312-release#widgets","content":"Widget: delay RootView requireListBox: rendering fixesSkip ctrl+wheel by default, better tooltip removeFix floating ListBox rows offsetListBox: horizontal scroll supportSelectBox: hide list when clicking outsideBetter handle ctrl modkey stateMake widgets inherit name from parent (#2)Give selectbox container same name as the selectbox (#1) "},{"title":"Lite XL Inherited Changes​","type":1,"pageTitle":"Pragtical v3.1.2 Release","url":"/blog/pragtical-v312-release#lite-xl-inherited-changes","content":"Normalize strokes in fixed order (#1572) fix(core): defer core:open-log until everything is loaded (#1585) Fix scrollbar misinterpreting percent (#1587) Fix returned percent when clicking the Scrollbar track (e07ea0fe) Adds super as a modkey. (#1590) Add NaN guard to View:update_scrollbar (aa0d6f6c) Fixed C++14 digit separators (#1593) Fix Scrollbar.{expanded,contracted}_size documentation (70245ba0) Full Changelog: https://github.com/pragtical/pragtical/compare/v3.1.1...v3.1.2 "},{"title":"Changes Log","type":0,"sectionRef":"#","url":"/blog","content":"","keywords":""},{"title":"New Features​","type":1,"pageTitle":"Changes Log","url":"/blog#new-features","content":"Syntax files symbol_pattern, non_word_chars props (#12) New Welcome Screen - Converted emptyview to widget with additions (e08f1b18) "},{"title":"Fixes​","type":1,"pageTitle":"Changes Log","url":"/blog#fixes","content":"Fixes #10 by using the scrollbar expanded size (#11) Fix core:open-file to not be dependant on chdir (47bfcb07) Respect coroutines redraw requests while on focus (f450b612) Do not process clicks on contextmenu divider (#22) Fixed issue with open file command (d8906c21) MacOS: allow combining cmd+ctrl and replace alt with option (0674f1f5) "},{"title":"Enhancements​","type":1,"pageTitle":"Changes Log","url":"/blog#enhancements","content":"Improvements to language_css (f2a0790d) Better compat math.{tointeger|type|ult} for luajit (80bce6c0) Added Mike Pall bitops library to non jit lua for consistency (5efc02a8) Use native bit operators on Lua &gt;= 5.3 (10cecbec) Highlight CUDA source code the same as C++ (#15) "},{"title":"UI Enhancements​","type":1,"pageTitle":"Changes Log","url":"/blog#ui-enhancements","content":"statusview: separate item for doc position percent lite-xl/lite-xl#1579 Highlight default theme on settings ui, fixes #23 (cd7181df) treeview: do not show hidden files by default (ecda0a0a) "},{"title":"Colors​","type":1,"pageTitle":"Changes Log","url":"/blog#colors","content":"Added new Yaru dark and light theme (5fa3cc13) Improvements to tokyo-night (551c351d) Added solarized_dark theme (b9791efa) Improvements to Monokai themes (79264c47) "},{"title":"Build System​","type":1,"pageTitle":"Changes Log","url":"/blog#build-system","content":"Switch to an older ubuntu builder, fixes #13 (#16) Fixes for msvc ci run (39caabc0) Applied msvc fixes from lite-xl/lite-xl#1572 Rename latest builds to rolling (51754f33) "},{"title":"Widgets​","type":1,"pageTitle":"Changes Log","url":"/blog#widgets","content":"Widget: delay RootView requireListBox: rendering fixesSkip ctrl+wheel by default, better tooltip removeFix floating ListBox rows offsetListBox: horizontal scroll supportSelectBox: hide list when clicking outsideBetter handle ctrl modkey stateMake widgets inherit name from parent (#2)Give selectbox container same name as the selectbox (#1) "},{"title":"Lite XL Inherited Changes​","type":1,"pageTitle":"Changes Log","url":"/blog#lite-xl-inherited-changes","content":"Normalize strokes in fixed order (#1572) fix(core): defer core:open-log until everything is loaded (#1585) Fix scrollbar misinterpreting percent (#1587) Fix returned percent when clicking the Scrollbar track (e07ea0fe) Adds super as a modkey. (#1590) Add NaN guard to View:update_scrollbar (aa0d6f6c) Fixed C++14 digit separators (#1593) Fix Scrollbar.{expanded,contracted}_size documentation (70245ba0) Full Changelog: https://github.com/pragtical/pragtical/compare/v3.1.1...v3.1.2 "},{"title":"Contributors","type":0,"sectionRef":"#","url":"/docs/about/contributors","content":"Contributors This is a non-exhaustive list of people that contributed to Pragtical. You can get the contributors for a particular release on the release page. Name\tContributionsrxi\tDevelopment of the original lite editor. Francesco\tCreator of lite-xl fork from rxi/lite. Adam\tMaintainer, renderer enhancements, multi-language syntax highlighting and many other improvements. Guldoman\tMaintainer, IME support, various bug fixes and performance improvements. Jefferson González\tLSP and widget toolkit, syntax highlighting improvements and many other contributions. Takase\tNagView, Process API improvements and various bug fixes for Windows. redtide\tContinuous integration, build scripts and the website. Jan\tBuild system maintenance, dirmonitor improvements and bug fixes. Jipok\tText editing improvements and bug fixes. liquidev\tTab style and animations improvements. Cukmekerb\tSyntax highlighting improvements. Nils Kvist\tPopup window replacement with CommandView dialog. George Linkovsky\tmacOS bug fixes. TorchedSammy\tVarious plugins and UI improvements. Janis-Leuenberger\tAdd keymap bindings help file and macOS testing. Mat Mariani\tHelp for macOS port. Some resources taken from mathewmariani/lite-macos. daubaris\tInitial implementation of Xft.dpi query using xrdb command. Robert Štojs\tContinuous integration configuration. Aqil Contractor\tText rendering enhancement, bug hunter and tester.","keywords":""},{"title":"FAQ","type":0,"sectionRef":"#","url":"/docs/about/faq","content":"FAQ Can I get smart autocompletion (intellisense/LSP)?​ Check out the lsp plugin. Where is the integrated terminal?​ Work is being done on pragtical-terminal and pragtical-tmt. Both plugins have their own supported features and bugs, so you should try both out and see which one works for you. Tabs and indent size?​ In your user config (the cog icon in the file tree): config.tab_type = &quot;soft&quot; -- soft for spaces, hard for real tabs (\\t) config.indent_size = 4 -- 4 spaces How to enable line wrapping?​ You can enable line wrapping by pressing F10, alternatively hard wrapping is supported via autowrap plugin. How to bind commands to keys?​ local keymap = require &quot;core.keymap&quot; keymap.add { [&quot;ctrl+escape&quot;] = &quot;core:quit&quot; } How to unbind commands for certain keys?​ -- the second parameter lets you override commands for certain keys -- in this case it maps it to nothing keymap.add({ [&quot;ctrl+escape&quot;] = {} }, true) How to get commands for those keybinds?​ You can search for commands in the command palette. For each command, replace the spaces on the right side with dashes. For example: Core: Find Command → core:find-command What version of Lua does Pragtical use?​ LuaJIT using compat-5.3 for compatbility on the C api and user space up to Lua 5.3 with the exception of missing bit operators. The editor should also compile with latest versions of Lua 5.4 Vim mode?​ You need to vibe. Where's feature X? How about Y?​ You can get more info in Features.","keywords":""},{"title":"Documents","type":0,"sectionRef":"#","url":"/docs/developer-guide/documents","content":"","keywords":""},{"title":"Creating Docs​","type":1,"pageTitle":"Documents","url":"/docs/developer-guide/documents#creating-docs","content":"To create a Doc, you usually create instances of it directly. Instead, it is often easier to call core.open_doc(). This function will do bookkeeping and various checks before creating the Doc with the correct state. function core.open_doc(filename: string): Doc end  The function accepts a filename and returns a Doc. "},{"title":"Getting Existing Docs​","type":1,"pageTitle":"Documents","url":"/docs/developer-guide/documents#getting-existing-docs","content":"To get an existing Doc, you can use "},{"title":"Classes and Objects","type":0,"sectionRef":"#","url":"/docs/developer-guide/classes-and-objects","content":"","keywords":""},{"title":"Commands","type":0,"sectionRef":"#","url":"/docs/developer-guide/commands","content":"","keywords":""},{"title":"Adding commands​","type":1,"pageTitle":"Commands","url":"/docs/developer-guide/commands#adding-commands","content":"To add a command, use command.add(). local type function Predicate(any...): boolean function command.add(predicate: Predicate | string | Object, commands: {string, Predicate}): () end  The first argument to command.add() is the predicate. This predicate is set for each command passed to command.add(). If no predicates are required, nil can be passed. The second parameter is a table of functions mapped to each command. Example: local command = require &quot;core.command&quot; local DocView = require &quot;core.docview&quot; -- add &quot;test:print-message&quot; which prints a message to stdout -- this command will be available at all times command.add(nil, { [&quot;test:print-message&quot;] = function() core.log(&quot;Hello world!&quot;) end }) -- a predicate function local function docview_predicate(custom_msg) return core.active_view:is(DocView), core.active_view, true, custom_msg end local function print_doc_name(dv, custom_predicate, custom_msg) if not custom_msg then custom_msg = custom_predicate and &quot;custom predicate used!: %s&quot; or &quot;name: %s&quot; end core.log(custom_msg, dv.doc.filename) end -- add &quot;test:print-doc-name&quot; which prints the name of currently opened file -- This command will only be available if the user is editing a document. -- this will log &quot;custom predicate used!: &lt;filename&gt;&quot; command.add(docview_predicate, { [&quot;test:print-doc-name&quot;] = print_doc_name }) -- the line above can be simplified into this -- this will log &quot;name: &lt;filename&gt;&quot; command.add(DocView, { [&quot;test:print-doc-name&quot;] = print_doc_name }) -- the line above can be simplified into this, removing a require -- this will log &quot;name: &lt;filename&gt;&quot; command.add(&quot;core.docview&quot;, { [&quot;test:print-doc-name&quot;] = print_doc_name }) -- if you have subclasses of DocView and don't want to match them, -- append a exclamation mark at the end. -- this will log &quot;name: &lt;filename&gt;&quot; command.add(&quot;core.docview!&quot;, { [&quot;test:print-doc-name&quot;] = print_doc_name })  "},{"title":"Running commands​","type":1,"pageTitle":"Commands","url":"/docs/developer-guide/commands#running-commands","content":"Users can run these commands via the command palette while plugins can run these commands programmatically via command.perform(). If you want to check whether a command can run without running the command, (the command exists and the predicate passed), you can use command.is_valid(). function command.perform(cmd: string, ...: any): boolean end function command.is_valid(cmd: string, ...: any): boolean end  command.perform() accepts a command as the first parameter. If the command requires other parameters, it can be passed intocommand.perform(). If a command is found and executed successfully, the function returns true. Example: local command = require &quot;core.command&quot; -- open the command prompt command.perform &quot;core:find-command&quot; -- assuming we've run the code in the section above, -- we can try passing a custom message via command:perform! command.perform(&quot;test:print-doc-name&quot;, &quot;custom message! %s&quot;) -- command palette should be accessible all the time -- prints true print(command.is_valid &quot;core:find-command&quot;)  "},{"title":"Utility functions​","type":1,"pageTitle":"Commands","url":"/docs/developer-guide/commands#utility-functions","content":"To get a prettified name of a command, shown in the command palette, use command.prettify_name(). function command.prettify_name(name: string): string end  The function accepts a command-like string and returns a prettified command string. All the dashes are replaced with spaces and the first letter of all words are capitalized. "},{"title":"Creating classes​","type":1,"pageTitle":"Classes and Objects","url":"/docs/developer-guide/classes-and-objects#creating-classes","content":"Similar to many other languages, all classes extend the Object class. To extend a class, one can use the Object.extend() method. function Object.extend(base_class: Object): Object end  This method accepts one parameter — the class to copy. This method will create a copy of a Object that can be extended without affecting the original object. You can now define or override methods and metamethods of this newly created class. To initialize a class, you can override the Object:new() method. -- load the Object class local Object = require &quot;core.object&quot; -- since the source class is usually the one you want to copy, -- we often simplify it to Object:extend(). -- This is equivalent to Object.extend(Object). local Animal = Object:extend() -- define a constructor for Animal function Animal:new() self.type = &quot;animal&quot; end  tip Object implements the __tostring() and __call() metamethods. You can override the __tostring() metamethod to return a string that suits your class. "},{"title":"Super class​","type":1,"pageTitle":"Classes and Objects","url":"/docs/developer-guide/classes-and-objects#super-class","content":"You can access the super class via Object.super. For instance, to call the constructor of the super class, you can do: local Object = require &quot;core.object&quot; local Animal = Object:extend() function Animal:new() self.type = &quot;animal&quot; end local Dog = Animal:extend() function Dog:new() -- call the superclass constructor -- note the use of . instead of : and explicitly passing self Dog.super.new(self) end  Note that you must call super class methods with . instead of :and pass self as the first parameter. If you call the method with :, it will call the method with selfas super, which is the super class and not the instance. "},{"title":"Class relationships​","type":1,"pageTitle":"Classes and Objects","url":"/docs/developer-guide/classes-and-objects#class-relationships","content":"The Object class also provide utility methods for checking relations between classes and object. To check whether an object is strictly an instance of a class (not an instance of a child class), use Object:is(). To do the inverse, use Object:is_class_of(). function Object:is(class: Object): boolean end function Object.is_class_of(class: Object, instance: Object): boolean end  Object:is() accepts a parameter — the class to compare it to. If the object is strictly an instance of the class, the method returns true. Object.is_class_of() accepts a class and compares it against an instance of an object. If the object is a strictly an instance of the class, the method returns true. Example: local Animal = Object:extend() local Dog = Animal:extend() local Cat = Animal:extend() local doggo = Dog() print(doggo:is(Dog)) -- prints true print(doggo:is(Cat)) -- prints false print(doggo:is(Animal)) -- also prints false -- note that since we're going to pass Dog as the first parameter, -- we might as well as use the colon notation print(Dog:is_class_of(doggo)) -- prints true print(Cat:is_class_of(doggo)) -- prints false print(Animal:is_class_of(doggo)) -- prints false  To check whether an object is an instance of a class (or an instance of child class), use Object:extends(). To do the inverse, use Object:is_extended_by(). function Object:extends(class: Object): boolean end function Object.is_extended_by: Object, instance: Object): boolean end  The methods accept the same parameters as Object:is()and Object:is_class_of(). local Animal = Object:extend() local Dog = Animal:extend() local Cat = Animal:extend() local doggo = Dog() print(doggo:extends(Dog)) -- prints true print(doggo:extends(Cat)) -- prints false print(doggo:extends(Animal)) -- prints true -- note that since we're going to pass Dog as the first parameter, -- we might as well as use the colon notation print(Dog:is_extended_by(doggo)) -- prints true print(Cat:is_extended_by(doggo)) -- prints false print(Animal:is_extended_by(doggo)) -- prints true  "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/developer-guide/introduction","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Introduction","url":"/docs/developer-guide/introduction#overview","content":"Pragtical is a fork of lite. As such, a lot of concepts used in lite is inherited in Pragtical.Lite: An Implementation Overview is an excellent article that explains many concepts about lite. "},{"title":"Types of plugins​","type":1,"pageTitle":"Introduction","url":"/docs/developer-guide/introduction#types-of-plugins","content":"There are a few types of plugins. Syntaxes and colors are considered as subset of plugins. These subsets of plugins only interact with the syntax highlighter and the style table respectively. "},{"title":"More resources​","type":1,"pageTitle":"Introduction","url":"/docs/developer-guide/introduction#more-resources","content":"Here are more resources on how to create syntaxes, themes and other plugins for Pragtical. Syntaxes and Themes: Creating Syntaxes — Learn how to create syntaxes for highlighting various types of files.Creating Themes — Learn to create themes for Pragtical. Others: Simple Plugin — Learn to write a simple plugin that draws text in the top right corner of the editor window.Commands — Learn how to create and call commands programmatically.Managing Keyboard Shortcuts — Learn how to manage keyboard shortcuts.Classes and Objects — Learn how to extend Pragtical with classes and objects.Using Regular Expressions — Learn how to use regular expressions in Pragtical.Interacting with the OS — Learn how to interact with the OS, such as reading and writing to the clipboard, setting window properties and getting high-resolution time.Child Processes — Learn how to use the Process API to start and manage child processes. "},{"title":"Tips and tricks​","type":1,"pageTitle":"Introduction","url":"/docs/developer-guide/introduction#tips-and-tricks","content":"Here are some tips for plugin developers. "},{"title":"Interactive debugging​","type":1,"pageTitle":"Introduction","url":"/docs/developer-guide/introduction#interactive-debugging","content":"Other than using GDB to debug the C part of Pragtical, you can also debug the Lua part with lite-debugger. To use the debugger, install it as a plugin and callcommand.perform &quot;debugger:break&quot; to stop the VM and start debugging interactively. "},{"title":"Differing stack traces on a critical error​","type":1,"pageTitle":"Introduction","url":"/docs/developer-guide/introduction#differing-stack-traces-on-a-critical-error","content":"On an older version of Pragtical, the stack trace printed on the terminal when a critical error occur may differ with the stack trace printed in error.txt. In this case, the stack trace in error.txt is more complete and should be referred. This is a bug and will be fixed in future versions of Pragtical. "},{"title":"print() function does not work in Windows​","type":1,"pageTitle":"Introduction","url":"/docs/developer-guide/introduction#print-function-does-not-work-in-windows","content":"On Windows, we compile Pragtical using the GUI subsystem by default. This causes Pragtical to close the stdout. To work around this behavior, you can force Pragtical to keep stdout open by redirecting its output in a terminal. On PowerShell: ./pragtical | tee -variable null  On cmd.exe: ./pragtical &gt; NUL  "},{"title":"Child Processes","type":0,"sectionRef":"#","url":"/docs/developer-guide/child-processes","content":"","keywords":""},{"title":"Example: reading a file with cat​","type":1,"pageTitle":"Child Processes","url":"/docs/developer-guide/child-processes#example-reading-a-file-with-cat","content":"This example uses cat to read a file. This approach is impractical, but it demonstrates the typical usage of the Process API. local core = require &quot;core&quot; local filename = &quot;myfile.lua&quot; local proc = process.start { &quot;cat&quot;, filename } -- we use core.add_thread so that we don't softlock the editor -- while reading the output of the child process. core.add_thread(function() local readbuf = {} while true do -- yield so that the rest of the editor can carry out its tasks -- eg. accepting input, updating the UI coroutine.yield(1) -- try to read from the standard output of the process. local read = proc:read_stdout() -- read == nil is a pretty good indication that the pipe is closed -- therefore, no more data can be read. if read == nil then break end if read ~= &quot;&quot; then -- if we read something, append it into the table readbuf[#readbuf+1] = read end -- efficiently concatenate all the output into a string local process_output = table.concat(readbuf) -- note: never use core.log(process_output)! -- core.log() accepts the same parameters as string.format(), -- so you risk injecting invalid format strings! core.log(&quot;read: %s&quot;, process_output) end)  "},{"title":"Terms​","type":1,"pageTitle":"Child Processes","url":"/docs/developer-guide/child-processes#terms","content":"To prevent confusion, these terms are used to describe various things: Terms\tMeaningChild process\tA process created with Process API via process.start() Parent process\tThe parent process that owns the child. This usually refers to Pragtical. Process\tAny process (including child and parent processes). Stream\tAn entity used to transfer data between child and parent processes. Think of it as a queue that can only be enqueued and dequeued. Standard input\tThe standard input of most processes, also known as stdin. Standard error\tThe standard error of most processes, also known as stderr. Standard output\tThe standard output of most processes, also known as stdout. "},{"title":"Using the Process API​","type":1,"pageTitle":"Child Processes","url":"/docs/developer-guide/child-processes#using-the-process-api","content":"To create a child process, use process.start(). local type RedirectType = number local record ProcessOptions timeout: number, cwd: string, stdin: RedirectType, stdout: RedirectType, stderr: RedirectType, env: {string: string} end function process.start(program_args: {string} | string, options: ProcessOptions): Process end  The first argument of the function is a table containing the program name and its arguments. The program name and its arguments need not be escaped as the API does it when necessary. Since v2.1.0, users can provide a string instead of a table as the first argument to prevent the function from escaping them. This may help with legacy software on Windows such as cmd.exe. However, this should not be done on POSIX platforms as the entire string will be treated as the program name and cause issues. Before v2.1.0, this table is not escaped on Windows. The second argument specifies options to control process creation. timeout is an advisory value that will be used by process:wait() and is optional. cwd is the current working directory of the program. If specified, the child process would run as if it was started in the directory. stdin, stdout and stderr tells Pragtical how to treat standard input and output of the child process. There are four possible values: process.REDIRECT_DEFAULT is the default behavior. It will be deprecated in future versions as specifying nil is preferred.process.REDIRECT_PIPE allows the Process API to write/read the input/output of the child process.process.REDIRECT_PARENT redirects the child process' input/output to the parent. If stdin has this value, child process will accept input from the parent process' console. If stdout or stderr has this value, child process will output to the parent process' console.process.REDIRECT_DISCARD discards any data to/from child process.process.REDIRECT_STDOUT can only be used on stderr and will redirect the child process' standard error to its standard output. env is a table containing the environment variables for the child process as key-value pairs. note On POSIX platforms, this table will extend the parent's environment. On Windows, this table will replace the parent's environment. In the future, this inconsistency may be fixed. The function returns a Process object that the user should hold onto until the child process can be safely terminated. If the Process object is garbage-collected, the child process will be killed. Examples: -- run something in the background local proc = process.start { &quot;bash&quot;, &quot;-c&quot;, &quot;echo hello world&quot; } -- start a process and read its output local proc = process.start({ &quot;cat&quot;, &quot;myfile&quot; }, { stdout = process.REDIRECT_PIPE }) -- might or might not print something as the child process -- might not have written data to the standard output print(proc:read_stdout()) -- start a script with verbose output (accepting options over env vars) local proc = process.start({ &quot;./site.rb&quot; }, { env = { VERBOSE = &quot;1&quot; } })  "},{"title":"Reading from a child process​","type":1,"pageTitle":"Child Processes","url":"/docs/developer-guide/child-processes#reading-from-a-child-process","content":"If the child process is created with proper output modes, one can read the standard output/error of the child process with the API. To read from the child process' standard output, use process:read_stdout(len). To read from the child process' standard error, use process:read_stderr(len). function process:read_stdout(len?: number): string, string, number end function process:read_stderr(len?: number): string, string, number end  The len parameter is optional and is used to specify the maximum number of bytes to read from the stream. These methods return a string with size up to len if data can be read. Otherwise, they will return nil, an error message and the error code. Examples: -- proc is a process with stdout set to process.REDIRECT_PIPE -- read default number of bytes (2048) from the process' standard output print(proc:read_stdout()) -- read default number of bytes (2048) from the process' standard error -- ensure that stderr of the process is not set to process.REDIRECT_STDOUT! print(proc:read_stderr())  "},{"title":"Waiting for a child process​","type":1,"pageTitle":"Child Processes","url":"/docs/developer-guide/child-processes#waiting-for-a-child-process","content":"You might want to wait for a child process to end. To check if a child process is still running, use process:running(). To wait for a child process to end, use process:wait(time). function process:running(): boolean end function process:wait(timeout: number): number, string, number end  process:running() returns a boolean immediately indicating whether the process has ended. note Do not use process:running() to determine when to stop reading the output of a child process. A child process can end and leave residual data in the stream. Instead, you should call process.read_stdout() or process.read_stderr()until an appropriate error (process.ERROR_PIPE) occurs. process:wait(time) will wait for specified number of milliseconds before returning. If the child process has ended, it will return the exit code of the process. If the child process is still running or an error occurred, it will return nil followed by an error message and error code. If time is 0, the method returns immediately. If time is process.WAIT_INFINITE, the method waits until the child process ends. If time is process.WAIT_DEADLINE, the method uses the timeout value specified when calling process.start(). If this value is not specified, it will wait until the child process ends. Examples: -- wait for a process to end core.add_thread(function() while process:running() do coroutine.yield(0) print(&quot;I am still running&quot;) end print(&quot;Oh no!&quot;) end) -- wait for a process to end, and print its exit code. print(&quot;The process exited with the exit code &quot; .. process:wait(process.WAIT_INFINITE))  "},{"title":"Terminating a child process​","type":1,"pageTitle":"Child Processes","url":"/docs/developer-guide/child-processes#terminating-a-child-process","content":"The Process API allows the user to terminate a child process gracefully or forcefully. Use process:terminate() to terminate a child process gracefully. If it fails, use process:kill() to forcefully terminate it. function process:terminate(): boolean, string, number end function process:kill(): boolean, string, number end  On POSIX platforms, process:terminate() sends SIGTERM to the child process while process:kill() sends SIGKILL to the child process. On Windows, process:terminate() uses GenerateConsoleCtrlEvent(CTRL_BREAK_EVENT)to simulate CTRL+BREAK.process:kill() uses TerminateProcess() to terminate the process immediately. note process:kill() can only request a process to be killed. On POSIX, signals are delivered asynchronously; a child process can be too busy to process them (e.g. stuck at a blocking read() or write() call). This is the same on Windows except TerminateProcess() will request cancellation of all pending IO operations. This is impossible on POSIX platforms. Examples: -- try to terminate child process proc:terminate() -- wait for child process to end if not proc:wait(1000) then -- didn't work, have to terminate it forcefully proc:kill() end  "},{"title":"Miscellaneous​","type":1,"pageTitle":"Child Processes","url":"/docs/developer-guide/child-processes#miscellaneous","content":"process:pid() can be used to obtain the PID of a child process. It will return 0 if the process is not running. process:returncode() can be used to get the exit code of the child process without calling process:wait(). process.strerror() can be used to convert error codes emitted by the process API into human-readable error messages. If an error message is unavailable, nil will be returned. process:close_stream() can be used to close the child process' streams. function process:pid(): number end function process:returncode(): number end function process.strerror(errcode: number): string end function process:close_stream(stream: number): number, string, number end  !!! noteprocess:pid() will not return the correct process ID if the child process ended early. "},{"title":"Error handling​","type":1,"pageTitle":"Child Processes","url":"/docs/developer-guide/child-processes#error-handling","content":"The Process API functions and methods will return error messages/codes or throw errors. process.start() will throw an error if the program cannot be run. On Windows, this usually results in an error message&quot;Error creating a process: 2&quot;. process:read(), process:read_stdout(), process:read_stderr() andprocess:write() may throw errors if: The child process died.The child process closed their side of the input/output.The input/output is closed via process:close_stream(). Not all errors are documented here. In general, it is recommended to call the functions with pcall() until this inconsistency is fixed in the future. "},{"title":"Interacting with the OS","type":0,"sectionRef":"#","url":"/docs/developer-guide/interacting-with-the-os","content":"","keywords":""},{"title":"Using the System API​","type":1,"pageTitle":"Interacting with the OS","url":"/docs/developer-guide/interacting-with-the-os#using-the-system-api","content":"There are many functions that belong to this API; not all are necessary for plugin development. As such, we'll ignore them here and only document the useful ones. "},{"title":"Clipboard​","type":1,"pageTitle":"Interacting with the OS","url":"/docs/developer-guide/interacting-with-the-os#clipboard","content":"system.set_clipboard() sets the clipboard content, while system.get_clipboard() retrieves the clipboard content. The functions do not support rich content such as images and files. function system.set_clipboard(text: string): () end function system.get_clipboard(text: string): string end  Examples: system.set_clipboard(&quot;wow magic&quot;) -- prints: -- wow magic print(system.get_clipboard(&quot;wow magic&quot;))  "},{"title":"File / Directory operations​","type":1,"pageTitle":"Interacting with the OS","url":"/docs/developer-guide/interacting-with-the-os#file--directory-operations","content":"These functions deal with files, directories and paths. -- Returns a list of files and directories in a directory. function system.list_dir(path: string): {string}, string end -- Creates a new directory. function system.mkdir(path: string): boolean, string end -- Removes a directory. function system.rmdir(path: string): boolean string end -- Changes the current working directory (equivalent to the `cd` command) function system.chdir(path: string): () end -- Resolves the input path (removing all '.' and '..') into an absolute path. function system.absolute_path(path: string): () end -- Types of paths local enum FileType &quot;file&quot; &quot;dir&quot; end -- The information for a path local record FileInfo modified: number size: number type: FileType symlink: boolean end -- Returns information for a file or a directory. function system.get_file_info(path: string): FileInfo, string end  system.get_file_info() returns a table with the following properties: modified: Modification time in seconds (UNIX timestamp).size: Size of the file in bytes.type: Type of the path (Can be file or dir).symlink: The directory is a symlink (Only set on Linux and on directories). All the functions listed above except system.chdir() will return nilfollowed by an error message when an error occurred.system.chdir() will throw an error if an error occurred. Examples: -- DO NOT RUN THIS CODE! -- the code and its outputs are purely for demonstration only, -- and will not reflect your actual usage. local dir = &quot;../pragtical&quot; local dir_resolved = system.absolute_path(dir) -- prints: -- /home/user/gh/pragtical print(dir_resolved) -- prints: -- .git =&gt; dir -- docs =&gt; dir -- .editorconfig =&gt; file -- LICENSE =&gt; file -- ... -- pragtical =&gt; file for i, d in ipairs(system.list_dir(dir_resolved)) do local info = system.get_file_info(dir_resolved .. &quot;/&quot; .. d) print(d .. &quot; =&gt; &quot; .. info.type) end -- create some directories -- this will not work because system.mkdir() doesn't create directories -- recursively, just like `mkdir` command without the `-p` option. -- prints: -- false No such file or directory print(system.mkdir(dir_resolved .. &quot;/1/2&quot;)) -- these will work -- prints: -- true print(system.mkdir(dir_resolved .. &quot;/1&quot;)) -- prints: -- true print(system.mkdir(dir_resolved .. &quot;/1/2&quot;)) -- system.rmdir() does not support removing non-empty dirs, so -- this will not work and print an error -- prints: -- false Directory not empty print(system.rmdir(dir_resolved .. &quot;/1&quot;)) -- instead, you should try to remove them recursively, making sure that each -- directory is empty -- prints: -- true print(system.rmdir(dir_resolved .. &quot;/1/2&quot;)) -- prints: -- true print(system.rmdir(dir_resolved .. &quot;/1&quot;))  "},{"title":"Timing​","type":1,"pageTitle":"Interacting with the OS","url":"/docs/developer-guide/interacting-with-the-os#timing","content":"system.get_time() returns time in seconds since Pragtical started. It is a high-precision alternative to os.time(). function system.get_time(): number end  Examples: -- prints: -- 30148.079763237 print(system.get_time())  "},{"title":"Window manipulation​","type":1,"pageTitle":"Interacting with the OS","url":"/docs/developer-guide/interacting-with-the-os#window-manipulation","content":"These functions deal with Pragtical window. -- Sets the window opacity from 0 to 1. function system.set_window_opacity(opacity: number): boolean end -- Sets the window title. function system.set_window_title(title: string): () end local enum WindowMode &quot;normal&quot; &quot;maximized&quot; &quot;minimized&quot; &quot;fullscreen&quot; end -- Sets the window mode. function system.set_window_mode(mode: WindowMode): () end -- Enables/disables window borders (decoration). function system.set_window_bordered(enable: boolean): () end -- Sets the window hit test region. function system.set_window_hit_test(height?: number, control_width?: number, resize_border?: number): () end -- Gets the window dimension and position. function system.get_window_size(): {number, number, number, number} end -- Sets the window dimension and position. function system.set_window_size(width: number, height: number, x: number, y: number): () end -- Checks whether windows has input focus. function system.window_has_focus(): boolean end -- Shows a message box with an error message. function system.show_fatal_error(title: string, msg: string): () end  The height parameter in system.set_window_hit_test() refers to the height of the top decoration. Users can drag this part of the window to move it.control_width specifies the width of various window controls (minimize, maximize and close) buttons in the top right corner of the window.resize_border specifies the width of a &quot;border region&quot; where users can drag the window to resize it. This value does not overlap with the height parameter. system.get_window_size() returns the width, height, x-coordinate and y-coordinate of the window respectively. system.set_window_opacity() will return false if the operation failed. Otherwise, it returns true. "},{"title":"Miscellaneous​","type":1,"pageTitle":"Interacting with the OS","url":"/docs/developer-guide/interacting-with-the-os#miscellaneous","content":"system.exec() runs a command in the background. It is useful if you just want to run a program and doesn't care about its output and exit code. If you want more features, consider using the Process API. system.fuzzy_match() generates a score for sorting text based on relevance. function system.exec(command: string): () end function system.fuzzy_match(haystack: string, needle: string, file: boolean): number end  system.exec() accepts a string containing a command to run. This command will be run as system(&quot;&lt;command&gt; &amp;&quot;) on POSIX platforms andcmd /c &quot;&lt;command&gt;&quot; on Windows, so make sure that the command is escaped properly. system.fuzzy_match() takes in a haystack (a possible match) and a needle(the string to search) to generate a similarity score. If the score is 1, both strings are identical. When the third argument is true, the matching will be done backwards as this is more suitable for matching paths. "},{"title":"Creating Themes","type":0,"sectionRef":"#","url":"/docs/developer-guide/syntaxes-and-themes/creating-themes","content":"Creating Themes Themes are plugins that modify the style table.","keywords":""},{"title":"Simple Plugin","type":0,"sectionRef":"#","url":"/docs/developer-guide/simple-plugin","content":"","keywords":""},{"title":"What is Simple?​","type":1,"pageTitle":"Simple Plugin","url":"/docs/developer-guide/simple-plugin#what-is-simple","content":"Simple is a very basic plugin written with the intention of introducing developers who are new to Pragtical to the process of writing plugins for the editor. "},{"title":"What does the plugin do?​","type":1,"pageTitle":"Simple Plugin","url":"/docs/developer-guide/simple-plugin#what-does-the-plugin-do","content":"The plugin displays a message (that is taken as input from the user) in the top right corner of the editor window. It also allows the user to toggle the visibility of the message. "},{"title":"I can't write Lua!​","type":1,"pageTitle":"Simple Plugin","url":"/docs/developer-guide/simple-plugin#i-cant-write-lua","content":"If you come from other programming languages, take a look at Lua cheat sheet. If you're new to programming, you can read this. "},{"title":"Format of the tutorial​","type":1,"pageTitle":"Simple Plugin","url":"/docs/developer-guide/simple-plugin#format-of-the-tutorial","content":"The code contains comments detailing what most (if not all) of the code in the file does. "},{"title":"The code​","type":1,"pageTitle":"Simple Plugin","url":"/docs/developer-guide/simple-plugin#the-code","content":"-- mod-version:2 -- pragtical 2.0 -- you MUST put mod-version:x on the first line of your plugin -- mod-version usually maps to pragtical releases (eg. mod-version: 2 == pragtical 2.0) -- pragtical won't load the plugin if the mod-version mismatches ----------------------------------------------------------------------- -- NAME : Simple -- DESCRIPTION: A simple guide on how to make your first Pragtical plugin -- AUTHOR : Ashwin Godbole (aelobdog) -- GOALS : To render some text inside the editor ----------------------------------------------------------------------- -- Disclaimer : -- I am not a lua developer, and my knowledge about writing plugins for -- Pragtical is very limited. This file serves the purpose of helping the -- reader get started with plugin development for Pragtical, and therefore -- demonstrates only some very basic features. For more complex plugin -- development, be sure to check out the source code of some other -- plugins after going through this file. ----------------------------------------------------------------------- -- Before we start writing any code for the plugin, we must import the -- required modules from the &quot;core&quot; package. -- the &quot;core&quot; module local core = require &quot;core&quot; -- the &quot;command&quot; module will help us register commands for our plugin. local command = require &quot;core.command&quot; -- the &quot;style&quot; module will allow us to use styling options local style = require &quot;core.style&quot; -- the &quot;config&quot; module will be used to store certain things like colors -- and functions local config = require &quot;core.config&quot; -- the &quot;keymap&quot; module will allow us to set keybindings for our commands local keymap = require &quot;core.keymap&quot; -- since we want to modify RootView, we'll need to require it first local RootView = require &quot;core.rootview&quot; ----------------------------------------------------------------------- -- per-plugin config must stay in config.plugins.(plugin name) config.plugins.simple = {} -- colors are just three or four comma separated values (RGBA) (range 0 - 255) -- put inside of '{ }'. We will add our color to the config module. config.plugins.simple.text_color = {200, 140, 220} -- or use `{ common.color &quot;#C88CDC&quot; }` ----------------------------------------------------------------------- -- Let's create a function to calculate the coordinates of our text. -- While we're at it, let's add our function to the `config` module. -- We'll take the message we want to display as the argument to the -- function to determine the x and y coordinates of the text. function config.plugins.simple.get_text_coordinates(message) -- For this plugin, we want to display the text on the top right -- corner of the screen. For this, we need to know the editor's width -- and height. -- The current font's size can be obtained from the &quot;style&quot; module. -- The editor's dimensions can be obtained by -- 1. WIDTH : core.root_view.size.x -- 2. HEIGHT : core.root_view.size.y local message_width = style.code_font:get_width(message..&quot; &quot;) local font_height = style.code_font:get_size() local x = core.root_view.size.x - message_width local y = font_height / 2 return x, y end ----------------------------------------------------------------------- -- Let's now get to actually drawing the text inside the editor. -- In order to &quot;inject&quot; our own code to draw text, -- we'll need to save the original draw function -- We'll save `RootView.draw` to a variable we call `parent_draw` local parent_draw = RootView.draw -- Now let's overload the original definition of `draw` in RootView -- by redefining the function. function RootView:draw() -- We call the parent's function to keep the editor functional... -- obviously we must still draw all the other stuff ! -- So we call the `parent_draw` function before doing anything else. parent_draw(self) -- we'll add an option to toggle the message on and off. let's use a -- boolean variable to keep track of whether we want to display the -- message or not. if config.plugins.simple.show_my_message then -- We'll be getting the message to display as input from the user -- later. We'll store that user input in `config.plugins.simple.hw_message`. -- (NOTE: this variable does not come in-built in pragtical; -- it is a variable that we will define later.) -- let's store the value of config.plugins.simple.hw_message in a local variable -- `message` in case config.plugins.simple.hw_message we set the message to -- &quot;message not set yet!&quot; local message if config.plugins.simple.hw_message then message = config.plugins.simple.hw_message else message = &quot;Message not set yet !&quot; end -- let's get the coordinates for our text local x, y = config.plugins.simple.get_text_coordinates(message) -- let's finally draw the text to the window ! -- the draw_text function from `renderer` is an important function -- as it is used to display any and all text inside of the editor -- window renderer.draw_text(style.code_font, message, x, y, config.plugins.simple.text_color) end end ----------------------------------------------------------------------- -- Let's allow the user to turn the message on and off -- we'll write a function to flip our &quot;show&quot; boolean variable. local function toggle_helloworld() config.plugins.simple.show_my_message = not config.plugins.simple.show_my_message end ----------------------------------------------------------------------- -- Finally, let's add the toggle function to the command list so that -- we can call it from the C-S-p command panel. Let's add one command -- to toggle the visibility of the message on and off and one to get -- the user's message and then display it. command.add(nil, { -- Toggle the visibility of the message [&quot;simple:toggle&quot;] = toggle_helloworld, -- Set and show the message -- This is the way to get user input through the command bar. -- `core.command_view:enter` takes 2 arguments: -- * the prompt to display before taking input -- * a function that takes the &quot;input&quot; as its argument -- (NOTE: here the variable we are reading input into is `text`) [&quot;simple:setshow&quot;] = function() core.command_view:enter(&quot;Test to display&quot;, function(text) config.plugins.simple.hw_message = text config.plugins.simple.show_my_message = true end) end } ----------------------------------------------------------------------- -- Just for fun, let's assign our commands their own keybindings. -- Here, we assign the keybinding the same string(its name) as the one -- that we set while creating the command keymap.add { [&quot;alt+s&quot;] = &quot;simple:setshow&quot;, [&quot;alt+t&quot;] = &quot;simple:toggle&quot;, }  "},{"title":"Further reading​","type":1,"pageTitle":"Simple Plugin","url":"/docs/developer-guide/simple-plugin#further-reading","content":"Lite: An Implementation Overview, an excellent post by rxi that stays mostly relevant to Pragtical.API overview, where some APIs are explained. "},{"title":"Managing Keyboard Shortcuts","type":0,"sectionRef":"#","url":"/docs/developer-guide/managing-keyboard-shortcuts","content":"","keywords":""},{"title":"Keyboard shortcut format​","type":1,"pageTitle":"Managing Keyboard Shortcuts","url":"/docs/developer-guide/managing-keyboard-shortcuts#keyboard-shortcut-format","content":"The string is split into parts delimited by + and each part of the split string is treated as a key. For the list of valid keys, check out [SDL's documentation][8]. For mouse buttons, the format is as follows: [nclicks][type]click nclicks is the number of clicks and defaults to 1 when not specified.type is optional and can be one of l, r, m, x and y. These letters correspond to left, right middle, mouse 4 and mouse 5. By default, type is set to l. Pragtical does not support consecutive keystrokes, such as ctrl+k ctrl+b. Examples: -- bind core:find-command to ctrl+k keymap.add { [&quot;ctrl+k&quot;] = &quot;core:find-command&quot; } -- bind core:find-command to clicking middle mouse keymap.add { [&quot;mclick&quot;] = &quot;core:find-command&quot; } -- bind core:find-command to double clicking right mouse keymap.add { [&quot;2mclick&quot;] = &quot;core:find-command&quot; }  "},{"title":"Adding Keyboard Shortcuts​","type":1,"pageTitle":"Managing Keyboard Shortcuts","url":"/docs/developer-guide/managing-keyboard-shortcuts#adding-keyboard-shortcuts","content":"Ways to add keyboard shortcuts were already discussed in the user guide. To add keyboard shortcuts programmatically, use keymap.add(). -- a composite type for commands local type Commands = string | {string} function keymap.add(map: {string: Commands}, overwrite: boolean): () end  keymap.add() takes in a table of keyboard shortcuts and the commands for each keyboard shortcut. If the second parameter overwrite is true, then the commands will be replaced instead of appended. Example: local keymap = require &quot;core.keymap&quot; -- bind alt + ijkl to move the cursor keymap.add { [&quot;alt+j&quot;] = &quot;doc:move-to-previous-char&quot;, [&quot;alt+l&quot;] = &quot;doc:move-to-next-char&quot;, [&quot;alt+i&quot;] = &quot;doc:move-to-previous-line&quot;, [&quot;alt+k&quot;] = &quot;doc:move-to-next-line&quot;, } -- you can also bind a keybind to execute multiple actions keymap.add { [&quot;ctrl+c&quot;] = [&quot;doc:move-to-next-line&quot;, &quot;doc:move-to-next-word&quot;] } -- you can also overwrite current keybind -- override up for down keymap.add({ [&quot;down&quot;] = &quot;doc:move-to-previous-line&quot;, [&quot;up&quot;] = &quot;doc:move-to-next-line&quot;, }, true)  "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":""},{"title":"Goals​","type":1,"pageTitle":"Introduction","url":"/docs/intro#goals","content":"We differentiate from our ancestors by striving to make Pragtical an editor that has amplified the set of features, to give you and us a better out of the box experience, while keeping an eye on performance and ease of extensibility. Also, we are simplifying the release process by reducing the amount of builds to choose from and trying a release often approach. "},{"title":"Performance​","type":1,"pageTitle":"Introduction","url":"/docs/intro#performance","content":"JIT - Pragtical takes a LuaJIT first approach, meaning that our official builds use LuaJIT instead of PUC Lua for the performance benefits that come with it. Also having a LuaJIT first approach gives us FFI for free which allows easy interfacing with native C libraries for easier plugin development. LuaJIT has proven to be a mature Lua implementation that will provide a stable development ecosystem for the foreseeable future. Threading - a supported feature inside the core on components where it is practical to use, like file searching and replacing, where performance gains are evident. "},{"title":"More Features​","type":1,"pageTitle":"Introduction","url":"/docs/intro#more-features","content":"Widgets - more tightly integrated as part of the core for easier gui development and reusability, also ensuring that plugin developers can with more ease develop user interfaces when in need. Settings UI - if you are not using a terminal editor like n/vim it means you are looking for a more point and click approach which is why we include a graphical interface to adjust your preferences out of the box. But don't worry, configuring the editor through Lua will keep working because it is also pragtical 😉 Encoding - while UTF-8 has overtaken as the preferred encoding for text documents for its convenience, we can sometimes encounter a document in another encoding. Loading and saving documents with different encodings will be supported for when the need arrives, a feature that is also commonly found in other editors because it is pragtical. IPC - shared memory functionality is part of the core and IPC plugin shipped by default to allow opening files and tab dragging between currently opened instances. "},{"title":"Removing a Keyboard Shortcut​","type":1,"pageTitle":"Managing Keyboard Shortcuts","url":"/docs/developer-guide/managing-keyboard-shortcuts#removing-a-keyboard-shortcut","content":"To remove a keyboard shortcut, you can use keymap.unbind(). function keymap.unbind(shortcut: string, command?: string): () end  The function accepts a keyboard shortcut and optionally a command to unbind. If a command is specified, the function will unbind that command from the key. Otherwise, it will unbind all commands from the shortcut. "},{"title":"Getting Keyboard Shortcuts​","type":1,"pageTitle":"Managing Keyboard Shortcuts","url":"/docs/developer-guide/managing-keyboard-shortcuts#getting-keyboard-shortcuts","content":"To get all the keyboard shortcuts associated with a command, usekeymap.get_binding() or keymap.get_bindings(). function keymap.get_binding(cmd: string): string... end function keymap.get_bindings(cmd: string): {string} end  Both functions accept a command and returns the keyboard shortcuts associated to it. However, keymap.get_bindings() returns a table instead of a list of values. "},{"title":"Overriding the Keymap​","type":1,"pageTitle":"Managing Keyboard Shortcuts","url":"/docs/developer-guide/managing-keyboard-shortcuts#overriding-the-keymap","content":"If your plugin need to override the keymap for extra functionality (e.g. redirecting keyboard shortcuts to a terminal), you can override keymap.on_key_pressed(), keymap.on_mouse_wheel(),keymap.on_mouse_pressed() and keymap.on_key_released(). function keymap.on_key_pressed(key: string, ...: any): boolean end function keymap.on_mouse_wheel(delta_y: number, delta_x: number, ...: any): boolean end function keymap.on_mouse_pressed(button: string, x: number, y: number, clicks: number): boolean end function keymap.on_key_released(key: string): () end  keymap.on_key_pressed() accepts the key that is being pressed. The other values are reserved for internal usage and should be passed as-is. keymap.on_mouse_wheel() accepts the X and Y delta — the number of &quot;steps&quot; scrolled on the mouse wheel. Other values are reserved for internal usage and should be passed as-is. keymap.on_mouse_pressed() accepts the type of button being pressed, the coordinates where the button is pressed and the number of consecutive clicks. keymap.on_key_released() accepts the key that is released. keymap.on_key_pressed(), keymap.on_mouse_wheel() andkeymap.on_mouse_pressed() returns a boolean that signals if the event is being handled. If the function returns true, then the event is considered handled and will not be propagated further. You must handle this condition if you decide to override any of these functions. ??? warning &quot;Since v2.1.0, text composition events (IME) should be taken into consideration.&quot; In recent versions of Pragtical, text composition/input events has been added to support IMEs. When text input is enabled, you may receive a key down event and a text input event. You need to consider how to handle these new events too. Example: local keymap = require &quot;core.keymap&quot; -- a simple function that logs your keypresses local keymap_on_key_pressed = keymap.on_key_pressed function keymap.on_key_pressed(key, ...) local handled = keymap_on_key_pressed(self, key, ...) print(key, &quot;Pressed!&quot;) end local ime = require &quot;core.ime&quot; -- to handle IME text composition events, you need to -- check the ime.editing value. -- If this value is true, text is being composited. -- You might want to ignore the keypresses. function keymap.on_key_pressed(key, ...) -- on Linux this behavior is not observed so it can -- be skipped if PLATFORM ~= &quot;Linux&quot; and ime.editing then return false end local handled = keymap_on_key_pressed(self, key, ...) print(key, &quot;Pressed!&quot;) end  "},{"title":"Build","type":0,"sectionRef":"#","url":"/docs/setup/building","content":"","keywords":""},{"title":"Dependencies​","type":1,"pageTitle":"Build","url":"/docs/setup/building#dependencies","content":"The following libraries are required: LuaJIT or Lua 5.4SDL2freetype2pcre2uchardet If they are not installed on your system you can force meson to download and build them for you by using the following flag --wrap-mode=forcefallback. Otherwise, if they are present, they will be used to compile Pragtical. Lua Meson subproject is preferred over currently installed system Lua. Due to the discrepancies of the Lua version shipped by the various Linux distributions, we adapted the build system to make use of the Meson Lua subproject by default to prevent incompatibility issues. If you are sure the Lua version installed on your system is compatible use the setup flag: -Duse_system_lua=true "},{"title":"Building with Meson​","type":1,"pageTitle":"Build","url":"/docs/setup/building#building-with-meson","content":"To build Pragtical with Meson the commands below can be used: meson setup --buildtype=release --prefix &lt;prefix&gt; build meson compile -C build meson install -C build --skip-subprojects=&quot;freetype2,pcre2&quot; --dest-dir ../pragtical  where &lt;prefix&gt; depends on the OS you are using: on Linux is /usron macOS application bundle can be &quot;/Pragtical.app&quot;on Windows you don't need to use this flag If you are using a version of Meson below 0.54 you need to use different commands to compile and install: meson setup --buildtype=release build ninja -C build ninja -C build install  "},{"title":"Building with Helper Script​","type":1,"pageTitle":"Build","url":"/docs/setup/building#building-with-helper-script","content":"The build-packages.sh automates some of the steps required to setup your environment, for usage instructions execute: bash build-packages.sh -h  The script will run Meson and create an archive with the application. Pragtical can be easily installed by unpacking the archive in any directory of your choice. On Windows two packages will be created, one called &quot;portable&quot; using the &quot;data&quot; folder next to the executable and the other one using a Unix-like file layout. The portable version conforms to the directory structure of normal Windows programs while the Unix-like file layout is meant for a Unix-like environment. Pragtical does not hard-code any directories and instead relies on environment variables. This allows the package to be run in any directory. "},{"title":"Portable Mode​","type":1,"pageTitle":"Build","url":"/docs/setup/building#portable-mode","content":"When running meson setup you may specify -Dportable=true to install Pragtical as a portable application. Pragtical needs the data directory to run properly. When portable is enabled, Pragtical will use the data directory placed next to the executable. Otherwise, Pragtical will use Unix-like directory locations. It will use$prefix/share/pragtical for data and the executable will be located in$prefix/bin. $prefix is determined when the application starts such that$prefix/bin corresponds to the location of the executable. The user directory does not depend on the portable option and will always be$HOME/.config/pragtical. On Windows, $USERPROFILE will be used instead of $HOME. "},{"title":"Meson Build Flags​","type":1,"pageTitle":"Build","url":"/docs/setup/building#meson-build-flags","content":"To know all the available build flags please consult the meson_options.txtfile. For reference here are the available ones at time of writing that you can define at the setup stage with -D&lt;flag_name&gt;=&lt;value&gt;: Flag\tType\tDefault\tDescriptionbundle\tboolean\tfalse\tBuild a macOS bundle source-only\tboolean\tfalse\tConfigure source files only, doesn't checks for dependencies portable\tboolean\tfalse\tPortable install renderer\tboolean\tfalse\tUse SDL renderer dirmonitor_backend\tcombo\t'' (auto-detect)\tDefine what dirmonitor backend to use: 'inotify', 'fsevents', 'kqueue', 'win32', 'dummy' arch_tuple\tstring\t''\tSpecify a custom architecture tuple use_system_lua\tboolean\tfalse\tPrefer System Lua over the meson wrap extra_colors\tboolean\ttrue\tInclude additional colors extra_languages\tboolean\ttrue\tInclude additional language plugins ppm\tboolean\ttrue\tInclude the plugin manager jit\tboolean\ttrue\tUse luajit "},{"title":"Environment Setup​","type":1,"pageTitle":"Build","url":"/docs/setup/building#environment-setup","content":"Some of the steps that may be required depending on your Operating System if you decide against using the --wrap-mode=forcefallback flag. "},{"title":"Linux​","type":1,"pageTitle":"Build","url":"/docs/setup/building#linux","content":"On Debian-based systems the required libraries and Meson can be installed using the following commands: # To install the required libraries: sudo apt install libfreetype6-dev libsdl2-dev libpcre2-dev libuchardet-dev # To install Meson: sudo apt install meson # or pip3 install --user meson  "},{"title":"macOS​","type":1,"pageTitle":"Build","url":"/docs/setup/building#macos","content":"On macOS you can install a package manager such as brew to install all the required dependencies. brew intall meson freetype sdl2 pcre2 uchardet  Otherwise you can skip this and just use the already mentioned--wrap-mode=forcefallback flag. "},{"title":"Windows MSYS2​","type":1,"pageTitle":"Build","url":"/docs/setup/building#windows-msys2","content":"The build environment chosen for Pragtical on Windows is MSYS2. Follow the installation instructions in the link. Open MinGW 64-bit or MinGW 32-bit shell from the start menu.Update the MSYS2 installation with pacman -SyuRestart the shellInstall the dependencies: pacman -S \\ ${MINGW_PACKAGE_PREFIX}-freetype \\ ${MINGW_PACKAGE_PREFIX}-gcc \\ ${MINGW_PACKAGE_PREFIX}-ninja \\ ${MINGW_PACKAGE_PREFIX}-pcre2 \\ ${MINGW_PACKAGE_PREFIX}-pkg-config \\ ${MINGW_PACKAGE_PREFIX}-python-pip \\ ${MINGW_PACKAGE_PREFIX}-SDL2 \\ ${MINGW_PACKAGE_PREFIX}-uchardet \\ pip3 install meson  ${MINGW_PACKAGE_PREFIX} expands either to mingw-w64-i686 or mingw-w64-x86_64depending on the current MSYS2 shell used. "},{"title":"Linux","type":0,"sectionRef":"#","url":"/docs/setup/linux","content":"","keywords":""},{"title":"Install​","type":1,"pageTitle":"Linux","url":"/docs/setup/linux#install","content":"The easiest way to run Pragtical on Linux is to download and run the Pragtical AppImage. Most recent Linux systems supports AppImage, but you may need to install fuse. Alternatively, we provide a &quot;portable&quot; tar.gz archive that can be downloaded and extracted to a directory. "},{"title":"Install via package managers​","type":1,"pageTitle":"Linux","url":"/docs/setup/linux#install-via-package-managers","content":"Pragtical is available on some package managers. A complete list is available at Repology. These packages are maintained by the community. "},{"title":"Arch Linux (via AUR)​","type":1,"pageTitle":"Linux","url":"/docs/setup/linux#arch-linux-via-aur","content":"Packages for Arch Linux are available as 3 AUR repositories: pragtical and pragtical-git. To install, you can clone the git repository to a working directory and run makepkg: git clone https://aur.archlinux.org/pragtical.git cd pragtical makepkg -si  Alternatively, install it via an AUR helper such as yay. "},{"title":"Fedora​","type":1,"pageTitle":"Linux","url":"/docs/setup/linux#fedora","content":"Pragtical stable and nightly releases can be installed on Fedora using Copr. To install it, enable the sentry/pragtical Copr and install the appropriate package, for example: dnf copr enable sentry/pragtical dnf install pragtical-nightly  "},{"title":"32-bit support​","type":1,"pageTitle":"Linux","url":"/docs/setup/linux#32-bit-support","content":"Unfortunately, Pragtical does not provide binary packages for 32-bit systems. You may want to compile Pragtical yourself. 32-bit version of Pragtical is not actively tested for bugs. Due to a lack of testers, we've only been able to test whether the code can compile on a 32-bit system. This does not mean that Pragtical may run correctly. "},{"title":"Portable packages​","type":1,"pageTitle":"Linux","url":"/docs/setup/linux#portable-packages","content":"Since v2.1.0, only portable packages are provided. These packages do not follow the UNIX Filesystem Hierarchy Standard (FHS). pragtical/ \\- data/ \\- doc/ \\- pragtical  To install the portable package according to the FHS, do the following: Move data/ to /usr/share/pragtical.Move doc/ to /usr/share/doc/pragticalMove pragtical to /usr/bin/pragtical "},{"title":"Client-side decorations​","type":1,"pageTitle":"Linux","url":"/docs/setup/linux#client-side-decorations","content":"Certain Wayland desktops does not provide server-side decorations. By default, Pragtical (SDL under the hood) will use libdecor to draw client-side decorations. To work around this, set config.borderless to true. Pragtical will draw a client-side decoration. User ModuleSettings UI local config = require &quot;core.config&quot; config.borderless = true  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/docs/setup/getting-started","content":"","keywords":""},{"title":"Install​","type":1,"pageTitle":"Getting Started","url":"/docs/setup/getting-started#install","content":"Installing Pragtical is usually as simple as downloading the package and extracting it. However, here are some platform-specific installation instructions. WindowsLinuxmacOS "},{"title":"Portable application​","type":1,"pageTitle":"Getting Started","url":"/docs/setup/getting-started#portable-application","content":"Pragtical stores user configuration in the OS-specific configuration directory. This directory is also known as USERDIR. These paths are checked to determine USERDIR: &lt;directory_to_pragtical_binary&gt;/user$PRAGTICAL_USERDIR$XDG_CONFIG_HOME/pragtical$HOME/.config/pragtical or $USERPROFILE/.config/pragtical on Windows In order to create a portable installation of Pragtical, you can create a user directory where the executable resides. Pragtical will then store configuration data in that directory. "},{"title":"Plugins​","type":1,"pageTitle":"Getting Started","url":"/docs/setup/getting-started#plugins","content":"Pragtical can be extended via plugins written in Lua. In fact, most of Pragtical's features comes from plugins; the core is kept simple and features are added via plugins if possible. Pragtical comes with a set of plugins and users can install more on their own. Here are common plugins that most users install: Plugin\tUse casealign_carets\tAlign text on multiple carets and selections autoinsert\tAutomatically insert closing brackets and quotes autosave\tAutomatically saves the file when it is modified bracketmatch\tHighlight matching brackets editorconfig\tEditorConfig support for Pragtical ephemeral_tabs\tEphemeral tabs (previewing files without creating multiple tabs) indentguide\tIndent guides lint+\tLinter support lsp\tLanguage Server support for Pragtical minimap\tMinimap selectionhighlight\tHighlight code that matches the selection scm\tAll in one source control management "},{"title":"Further reading​","type":1,"pageTitle":"Getting Started","url":"/docs/setup/getting-started#further-reading","content":"You may be interested on these topics: Introduction — A introduction to various Pragtical features and concepts.Configuration — A guide on how to configure Pragtical.Plugins — An introduction to plugin management. These are advanced topics that are useful for power users or plugin developers: Creating Themes — A tutorial on how to write themes for Pragtical.Creating Syntaxes — A guide on how to add support for new languages.Simple plugin — A tutorial on writing a simple plugin.Regular expressions — A guide on how to use regular expressions in Pragtical.Child processes — A guide on how to start and manage child processes. "},{"title":"macOS","type":0,"sectionRef":"#","url":"/docs/setup/macos","content":"","keywords":""},{"title":"Launch the App​","type":1,"pageTitle":"macOS","url":"/docs/setup/macos#launch-the-app","content":"Since Pragtical binary builds are not signed you will need to follow these steps when running it for the first time: "},{"title":"Method 1​","type":1,"pageTitle":"macOS","url":"/docs/setup/macos#method-1","content":"Find Pragtical in Finder (do not open it in Launchpad).Control-click Pragtical, then choose Open from the shortcut menu.Click Open in the popup menu. The correct steps may vary between macOS versions, so you should refer to the macOS User Guide. "},{"title":"Method 2​","type":1,"pageTitle":"macOS","url":"/docs/setup/macos#method-2","content":"If Method 1 doesn't works, an easier and faster way is to clear the App attributes. To do so open the terminal and run xattr -cr /Applications/Pragtical.app  Afterwards, you should be able to launch Pragtical normally. "},{"title":"Windows","type":0,"sectionRef":"#","url":"/docs/setup/windows","content":"","keywords":""},{"title":"Install​","type":1,"pageTitle":"Windows","url":"/docs/setup/windows#install","content":"We provide installers and zip archives for Windows. You can get them from GitHub releases. Download the Pragtical installer from the release page.Run the installer and install Pragtical. Alternatively, you may download the zip archive, extract it and run it directly. "},{"title":"Portable application​","type":1,"pageTitle":"Windows","url":"/docs/setup/windows#portable-application","content":"The installer provides a &quot;Portable Mode&quot; checkbox which can be used to extract Pragtical into a directory. If this mode is enabled, the installer will not allow user to uninstall Pragtical from the Settings / Control Panel. Users can just delete the installation folder. "},{"title":"32-bit support​","type":1,"pageTitle":"Windows","url":"/docs/setup/windows#32-bit-support","content":"We also provide a 32-bit installer for Pragtical. A zip archive is also available. 32-bit version of Pragtical is not actively tested for bugs. Due to a lack of testers, we've only been able to test whether the code can compile on a 32-bit system. This does not mean that Pragtical may run correctly. "},{"title":"Using Regular Expressions","type":0,"sectionRef":"#","url":"/docs/developer-guide/using-regular-expressions","content":"","keywords":""},{"title":"Example: matching capture groups with a regular expression​","type":1,"pageTitle":"Using Regular Expressions","url":"/docs/developer-guide/using-regular-expressions#example-matching-capture-groups-with-a-regular-expression","content":"local s = &quot;hello world hello world&quot; for hello, world in regex.gmatch(&quot;(hello)\\\\s+(world)&quot;, s) do print(hello .. &quot; &quot; .. world) end  "},{"title":"Example: replacing words with a regular expression​","type":1,"pageTitle":"Using Regular Expressions","url":"/docs/developer-guide/using-regular-expressions#example-replacing-words-with-a-regular-expression","content":"local s = &quot;hello world John!&quot; print(regex.gsub(&quot;hello world (.+)!&quot;, s, &quot;Hello world $1 Doe!&quot;))  "},{"title":"Using the Regex API​","type":1,"pageTitle":"Using Regular Expressions","url":"/docs/developer-guide/using-regular-expressions#using-the-regex-api","content":"Most Regex API functions accept a Regex object or a string to compile into a regex as their first argument. The only exception is regex:cmatch() which requires the first argument to be a Regex object. For more information regarding PCRE itself, please consult the documentation or a cheatsheet. "},{"title":"Creating a regex​","type":1,"pageTitle":"Using Regular Expressions","url":"/docs/developer-guide/using-regular-expressions#creating-a-regex","content":"Use regex.compile() to compile a regular expression. Compiling a regular expression is recommended if the user plans to use them frequently. function regex.compile(pattern: string, options?: string): Regex, string end  The first argument to the function is the regular expression to compile. The second argument to the function is a string containing one or more pattern modifiers. &quot;i&quot; enables case-insensitive matching&quot;m&quot; enables multi-line matching&quot;s&quot; matches all characters with the dot (.) meta-character, including newlines. The function returns a compiled Regex object. If an error occurred, nil is returned along with an error message. Example: local s = &quot;Hello world!\\nWow!&quot; -- simple regex local r = regex.compile &quot;([A-Z]+)(,+)&quot; -- prints: -- H ello world! print(r:match(s)) -- case-insensitive matching local r = regex.compile(&quot;([A-Z]+)(,+)&quot;, &quot;i&quot;) -- prints: -- Hello world! print(r:match(s)) -- match all characters with . local r = regex.compile(&quot;([A-Z]+)(,+)&quot;, &quot;is&quot;) -- prints: -- Hello world! -- Wow! print(r:match(s))  "},{"title":"Matching text​","type":1,"pageTitle":"Using Regular Expressions","url":"/docs/developer-guide/using-regular-expressions#matching-text","content":"The Regex API provides low-level matching functions (regex:cmatch(), regex.find_offsets()), and high-level matching functions (regex.match(),regex.find(), regex.gmatch(), regex.gsub()). function regex:cmatch(subject: string, offset: number, options: number): number... end function regex.find_offsets(pattern: string | Regex, subject: string, offset?: number, options?: number): number... end local type Captures = number | string function regex.match(pattern: string | Regex, subject: string, offset?: number, options?: number): Captures... end function regex.find(pattern: string | Regex, subject: string, offset?: number, options?: number): Captures... end -- since v2.1.1 function regex.gmatch(pattern: string | Regex, subject: string, offset?: number, options?: number): function(): string end  The first argument to regex:cmatch() is the subject string. The second argument is an offset in the subject string to indicate when to start matching. The third argument is a number comprised of multiple match options OR-ed together. These options are: regex.ANCHORED: Only matches the start of the input; similar to adding the ^ meta-character to the regex.regex.ENDANCHORED: Only matches the end of the input; similar to adding the $ meta-character to the regex.regex.NOTBOL: Do not treat beginning of subject string as beginning of line.regex.NOTEOL: Do not treat end of subject string as end of line.regex.NOTEMPTY: Do not treat an empty subject string as a valid match.regex.NOTEMPTY_ATSTART: Do not treat empty string at the start of a subject string as a valid match. regex.find_offsets() accepts the same arguments, but the first argument can be a compiled Regex object or a string while the second and third argument are optional. Both regex:cmatch() and regex.find_offsets() return pairs of numbers indicating the start and end indices of all the matches. The first pair of numbers is the indices of the whole match. If captures were specified in the regex, the rest of the numbers are pairs of start and end indices for each capture. If no matches were found, both functions return nil. Otherwise, if an error occurred, both functions throw an error. !!! warning Never use regex:cmatch() as its return values are off by 1. Instead, use regex:find_offsets() which have the correct behavior. Example: local s = &quot;Apples, Oranges, Bananas&quot; local r = regex.compile(&quot;([A-Za-z]+),\\\\s*(.+)&quot;) -- prints: -- 24 print(#s) -- prints: -- 1 25 1 7 9 25 print(r:cmatch(s)) -- prints: -- 1 24 1 6 9 24 print(r:find_offsets(s))  regex.match() and regex.find() are similar to Lua's string.match() andstring.find(). The first argument is the compiled Regex or a string, while the second argument is the subject string to match. The third and fourth argument specify the offset of the string to start matching and match options. The third and fourth argument are optional. regex.match() will return all captured strings. If no captures are specified in the regex, it will return the matched string. If a capture is empty, its offset will be returned. regex.find() will return the start and end indices of the matched string, followed by the captured strings if any. If a capture is empty, its offset will be returned. Both functions return nil if no match was found. !!! note There are no functions that return the start and end indices of captured strings. Use regex.find_offsets() for that. Example: local s = &quot;Apples, Oranges, Bananas&quot; -- prints: -- Apples Oranges, Bananas print(regex.match(&quot;([A-Za-z]+),\\\\s*(.+)&quot;, s)) -- prints: -- 1 24 Apples Oranges, Bananas print(regex.find(&quot;([A-Za-z]+),\\\\s*(.+)&quot;, s))  regex.gmatch() returns an iterator that iterates through all captured groups, or the whole match if no captures are specified in the regex. It accepts the same arguments as regex.find() and regex.match(). Example: local s = &quot;John doe, Jeanne Doe, Jane Doe&quot; -- will print: -- John - Doe -- Jeanne - Doe -- Jane - Doe for first_name, last_name in regex.gmatch(&quot;([A-Za-z]+) ([A-Za-z]+)(,\\\\s*)?&quot;, s) do print(first_name .. &quot; - &quot; .. last_name) end -- will print: -- John -- doe -- Jeanne -- Doe -- Jane -- Doe for name in regex.gmatch(&quot;\\\\w+&quot;, s) do print(name) end  "},{"title":"String substitution​","type":1,"pageTitle":"Using Regular Expressions","url":"/docs/developer-guide/using-regular-expressions#string-substitution","content":"regex.gsub() can be used to perform simple string substitution. function regex.gsub(pattern: string | Regex, subject: string, replacement: string, limit?: number): string, number end  The first argument is the Regex object or a string, followed by the subject string. The third argument is the replacement string and the last is the maximum number of replacements to make. The function returns the subject string with matches replaced with the replacement string, followed by the number of replacements made. If an error occurred, the function throws an error. Replacement string​ The replacement string supports PCRE2 extended substitution syntax. To use named and unnamed capture groups with $n or${n} where n is the group number or name. The extended substitution syntax also supports two extra substitutions: The form ${n:-default} will use default if n is unavailable.The form ${n:+iftrue:iffalse} will use iftrue if n is available, otherwise it will use iffalse. To insert a literal dollar sign ($), use $$. Other than that, \\U and \\L can be used to toggle uppercase or lowercase, while \\u and \\l causes the next character to be in uppercase or lowercase. Example: local s = &quot;John Doe, Jane Doe, Peter Doe&quot; local r = regex.compile &quot;(\\\\w+)&quot; -- prints: -- No No, No No, No No 6 print(r:gsub(s, &quot;No&quot;)) -- prints: -- $John $doe, $Jane $Doe, $Peter $Doe 6 print(r:gsub(s, &quot;($1)&quot;)) -- prints: -- john doe, jane doe, peter doe 6 print(r:gsub(s, &quot;\\\\l${1}&quot;)) -- prints: -- Matched =&gt; John Matched =&gt; doe, Matched =&gt; Jane Matched =&gt; Doe, Matched =&gt; Peter Matched =&gt; Doe 6 print(r:gsub(s, &quot;${1:+Matched =&gt; $1:No match.}&quot;))  "},{"title":"Keymaps","type":0,"sectionRef":"#","url":"/docs/user-guide/keymap","content":"Keymaps This is the default keyboard shortcuts on non-macOS platforms. Your configuration may differ as plugins can modify them. Command\tKeysautocomplete:cancel\tescape autocomplete:complete\ttab autocomplete:next\tdown autocomplete:previous\tup command:complete\ttab command:escape\tescape command:select-next\tdown command:select-previous\tup command:submit\tkeypad enter , return context:focus-next\tdown context:focus-previous\tup context:hide\tescape context:on-selected\treturn context:show\tmenu core:change-project-folder\tctrl+shift+c core:find-command\tctrl+shift+p core:find-file\tctrl+p core:new-doc\tctrl+n core:open-file\tctrl+o core:open-project-folder\tctrl+shift+o core:restart\tctrl+alt+r core:toggle-fullscreen\tf11 , alt+return dialog:next-entry\tright dialog:previous-entry\tleft dialog:select\tkeypad enter , return dialog:select-no\tescape doc:backspace\tbackspace , shift+backspace doc:copy\tctrl+insert , ctrl+c doc:create-cursor-next-line\tctrl+shift+down doc:create-cursor-previous-line\tctrl+shift+up doc:cut\tctrl+x doc:delete\tshift+delete , delete doc:delete-lines\tctrl+shift+k doc:delete-to-next-word-end\tctrl+delete , ctrl+shift+delete doc:delete-to-previous-word-start\tctrl+shift+backspace , ctrl+backspace doc:duplicate-lines\tctrl+shift+d doc:go-to-line\tctrl+g doc:indent\ttab doc:join-lines\tctrl+j doc:move-lines-down\tctrl+down doc:move-lines-up\tctrl+up doc:move-to-end-of-doc\tctrl+end doc:move-to-end-of-line\tend doc:move-to-next-block-end\tctrl+] doc:move-to-next-char\tright doc:move-to-next-line\tdown doc:move-to-next-page\tpagedown doc:move-to-next-word-end\tctrl+right doc:move-to-previous-block-start\tctrl+[ doc:move-to-previous-char\tleft doc:move-to-previous-line\tup doc:move-to-previous-page\tpageup doc:move-to-previous-word-start\tctrl+left doc:move-to-start-of-doc\tctrl+home doc:move-to-start-of-indentation\thome doc:newline\tkeypad enter , return doc:newline-above\tctrl+shift+return doc:newline-below\tctrl+return doc:paste\tctrl+v , shift+insert doc:redo\tctrl+y doc:save\tctrl+s doc:save-as\tctrl+shift+s doc:select-all\tctrl+a doc:select-lines\tctrl+l doc:select-none\tescape doc:select-to-cursor\tshift+1lclick doc:select-to-end-of-doc\tctrl+shift+end doc:select-to-end-of-line\tshift+end doc:select-to-next-block-end\tctrl+shift+] doc:select-to-next-char\tshift+right doc:select-to-next-line\tshift+down doc:select-to-next-page\tshift+pagedown doc:select-to-next-word-end\tctrl+shift+right doc:select-to-previous-block-start\tctrl+shift+[ doc:select-to-previous-char\tshift+left doc:select-to-previous-line\tshift+up doc:select-to-previous-page\tshift+pageup doc:select-to-previous-word-start\tctrl+shift+left doc:select-to-start-of-doc\tctrl+shift+home doc:select-to-start-of-indentation\tshift+home doc:select-word\tctrl+d , ctrl+shift+l doc:set-cursor\t1lclick doc:set-cursor-line\t3lclick doc:set-cursor-word\t2lclick doc:split-cursor\tctrl+1lclick doc:toggle-block-comments\tctrl+shift+/ doc:toggle-line-comments\tctrl+/ doc:undo\tctrl+z doc:unindent\tshift+tab find-replace:find\tctrl+f find-replace:previous-find\tshift+f3 find-replace:repeat-find\tf3 find-replace:replace\tctrl+r find-replace:select-add-all\tctrl+shift+l find-replace:select-add-next\tctrl+d find-replace:select-next\tctrl+f3 find-replace:select-previous\tctrl+shift+f3 find-replace:toggle-regex\tctrl+shift+i find-replace:toggle-sensitivity\tctrl+i line-wrapping:toggle\tf10 macro:play\tctrl+; macro:toggle-record\tctrl+shift+; project-search:find\tctrl+shift+f project-search:move-to-end-of-doc\tctrl+end , end project-search:move-to-next-page\tpagedown project-search:move-to-previous-page\tpageup project-search:move-to-start-of-doc\thome , ctrl+home project-search:open-selected\treturn project-search:refresh\tf5 project-search:select-next\tdown project-search:select-previous\tup quote:quote\tctrl+' reflow:reflow\tctrl+shift+q root:close\tctrl+w root:horizontal-scroll\tshift+wheel , hwheel root:move-tab-left\tctrl+pageup root:move-tab-right\tctrl+pagedown root:scroll\twheel root:split-down\talt+shift+k root:split-left\talt+shift+j root:split-right\talt+shift+l root:split-up\talt+shift+i root:switch-to-down\talt+k root:switch-to-left\talt+j root:switch-to-next-tab\tctrl+tab root:switch-to-previous-tab\tctrl+shift+tab root:switch-to-right\talt+l root:switch-to-tab-1\talt+1 root:switch-to-tab-2\talt+2 root:switch-to-tab-3\talt+3 root:switch-to-tab-4\talt+4 root:switch-to-tab-5\talt+5 root:switch-to-tab-6\talt+6 root:switch-to-tab-7\talt+7 root:switch-to-tab-8\talt+8 root:switch-to-tab-9\talt+9 root:switch-to-up\talt+i scale:decrease\tctrl+- , ctrl+wheeldown scale:increase\tctrl+= , ctrl+wheelup scale:reset\tctrl+0 treeview:collapse\tleft treeview:delete\tdelete treeview:deselect\tescape treeview:expand\tright treeview:new-folder\tctrl+return , ctrl+lclick treeview:next\tdown treeview:open\treturn treeview:previous\tup treeview:select\tmclick treeview:select-and-open\tlclick treeview:toggle\tctrl+\\","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/user-guide/introduction","content":"","keywords":""},{"title":"Opening files​","type":1,"pageTitle":"Introduction","url":"/docs/user-guide/introduction#opening-files","content":"Pragtical comes with a file browser by default. You can open, rename, move and delete files with it. Right-clicking on a file or folder will show more options. Other than that, you can also open files with ctrl+p. This opens a fuzzy finder with a list of project files.  "},{"title":"Commands​","type":1,"pageTitle":"Introduction","url":"/docs/user-guide/introduction#commands","content":"Most of Pragtical's functionalities are implemented as commands and exposed by the command palette. The command palette is bound to ctrl+shift+p by default and is used to enter commands and execute them. The command palette supports fuzzy matching, so you don't need to enter the full name of the command. For instance, to create a new file, you can type new doc and the correct command Core: New Doc will show up as the first choice. You can press up or down to select other commands. If a command is bound to a key shortcut, it will be shown on the right.  "},{"title":"Keyboard shortcuts​","type":1,"pageTitle":"Introduction","url":"/docs/user-guide/introduction#keyboard-shortcuts","content":"All keyboard shortcuts are handled by the core.keymap module. A key binding maps a &quot;stroke&quot; (e.g. ctrl+q) to one or more commands (e.g. core:quit). When the shortcut is pressed Pragtical will iterate each command assigned to that key and run the predicate function for that command — if the predicate passes it stops iterating and runs the command. A new mapping can be added by your user module as follows: local keymap = require &quot;core.keymap&quot; keymap.add { [&quot;ctrl+q&quot;] = &quot;core:quit&quot; }  A list of default mappings can be viewed here. "},{"title":"Multiple selections (multiple cursors)​","type":1,"pageTitle":"Introduction","url":"/docs/user-guide/introduction#multiple-selections-multiple-cursors","content":"Pragtical supports multiple cursors to edit multiple lines at once. You insert more cursors by ctrl+left-button. To insert cursors upwards or downwards, use ctrl+shift+upor ctrl+shift+down.  "},{"title":"Find and replace​","type":1,"pageTitle":"Introduction","url":"/docs/user-guide/introduction#find-and-replace","content":"To find a certain word, you can use ctrl+f. This will open a prompt where you can find text in the document. After entering the text, you can press enter to find the first match. The matched text will be selected. To find the next match, press f3 By default, Pragtical uses case-insensitive search. Input such as Test will match either Test or test. To toggle case-sensitive search, press ctrl+i. Pragtical also supports searching with regular expressions. This feature can be enabled by pressing ctrl+shift+i. This mode can be used in conjunction with case-sensitive search. To find and replace text, press ctrl+r. Pragtical will prompt you for text to replace and the replacement text. Afterwards, it will replace all occurrences of the text.  "},{"title":"Project search​","type":1,"pageTitle":"Introduction","url":"/docs/user-guide/introduction#project-search","content":"Finding text across multiple files can be useful. To do this in Pragtical, press ctrl+shift+f. You can then enter the text to find and press enter. Pragtical will open a new tab to display all the search results. To open the file containing the match, you can click the entries. Project search also supports case-sensitive search and regular expressions with the same keyboard shortcuts.project-search:fuzzy-find allows you to search the project for similar words. Pragtical does not support find and replace text across a project.  "},{"title":"Line endings​","type":1,"pageTitle":"Introduction","url":"/docs/user-guide/introduction#line-endings","content":"Some application may require a specific type of line ending. To change the line ending of a file, you can use the commanddoc:toggle-line-ending or press the rightmost entry on the StatusView. This should toggle between LF and CRLF which corresponds to Unix and Windows style line endings.  "},{"title":"Indentation​","type":1,"pageTitle":"Introduction","url":"/docs/user-guide/introduction#indentation","content":"Pragtical should automatically detect the indentation of the current file and apply it when pressing tab. However, you can change the indentation size by left-clicking the 4th entry on the right of the StatusView. You can also change the type of the indentation by right-clicking the entry. The settings will not apply to existing text.  "},{"title":"Projects​","type":1,"pageTitle":"Introduction","url":"/docs/user-guide/introduction#projects","content":"Pragtical centers around the concept of projects — a project contains your code and project-specific configuration. A project contains at least one project directory. Project directories are where your code is stored. To use open a directory as a project, the directory name can be passed as a command-line argument or the directory can be dragged onto either the executable or a running instance. Once loaded, the project can be changed using the commandcore:change-project-folder. The command will close all the documents currently opened and switch to the new project. If you want to open a project in a new window, the command core:open-project-folder will open a new editor window with the selected project. Projects may contain multiple directories. To add a directory to the current project, you can use the command core:add-directory. Once the directory is added to the project, you can browse its file on the file browser and fuzzy finder. Pragtical will automatically save opened files and directories and restore them when you restart the editor. "},{"title":"Creating Syntaxes","type":0,"sectionRef":"#","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes","content":"","keywords":""},{"title":"What syntax token types are supported?​","type":1,"pageTitle":"Creating Syntaxes","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes#what-syntax-token-types-are-supported","content":"The supported syntax token types, defined by pragtical/core/style.lua, are: normalsymbolcommentkeywordkeyword2numberliteralstringoperatorfunction In your syntax highlighting plugin, you write patterns to match parts of the language syntax, assigning these token types to matches. You don't have to use them all - just use as many as you need for your language. Let's walk through an example syntax definition and see how this works. "},{"title":"Example syntax: ssh config files​","type":1,"pageTitle":"Creating Syntaxes","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes#example-syntax-ssh-config-files","content":"This is a small, simple example of a syntax definition. It's intended to highlight SSH Config files and looks like this: -- mod-version:2 -- pragtical 2.0 local syntax = require &quot;core.syntax&quot; syntax.add { files = { &quot;sshd?/?_?config$&quot; }, comment = '#', patterns = { { pattern = &quot;#.*\\n&quot;, type = &quot;comment&quot; }, { pattern = &quot;%d+&quot;, type = &quot;number&quot; }, { pattern = &quot;[%a_][%w_]*&quot;, type = &quot;symbol&quot; }, { pattern = &quot;@&quot;, type = &quot;operator&quot; }, }, symbols = { -- ssh config [&quot;Host&quot;] = &quot;function&quot;, [&quot;ProxyCommand&quot;] = &quot;function&quot;, [&quot;HostName&quot;] = &quot;keyword&quot;, [&quot;IdentityFile&quot;] = &quot;keyword&quot;, ... -- sshd config [&quot;Subsystem&quot;] = &quot;keyword2&quot;, -- Literals [&quot;yes&quot;] = &quot;literal&quot;, [&quot;no&quot;] = &quot;literal&quot;, [&quot;any&quot;] = &quot;literal&quot;, [&quot;ask&quot;] = &quot;literal&quot;, }, }  Let's take each section in turn and see how it works. "},{"title":"Header​","type":1,"pageTitle":"Creating Syntaxes","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes#header","content":"The first line is a Lua comment and tells Pragtical which version this plugin requires. The second imports the core.syntax module to allow us to declare a new syntax: -- mod-version:2 -- pragtical 2.0 local syntax = require &quot;core.syntax&quot;  We then add a syntax definition to Pragtical with syntax.add {...}. The contents of this definition are covered next. "},{"title":"Files​","type":1,"pageTitle":"Creating Syntaxes","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes#files","content":"The files property tells Pragtical which files this syntax should be used for. This is a Lua pattern that matches against the full path of the current file. For example, to match against Markdown files (.md or a .markdown files), you could do this: files = { &quot;%.md$&quot;, &quot;%.markdown$&quot; },  In our original example, we match against the end of the path rather than the extension, because SSH config files don't have extensions, and we don't want to match all config files. We expect the path for SSH config files to look something like one of these: ~/.ssh/config/etc/ssh/ssh_config/etc/ssh/sshd_config This pattern matches paths that look like that: files = { &quot;sshd?/?_?config$&quot; },  "},{"title":"Comment​","type":1,"pageTitle":"Creating Syntaxes","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes#comment","content":"The comment property is used to tell Pragtical what to insert in order to create a comment. It is not a part of syntax definition. You can also use block_comment to tell Pragtical how to create multiline / block comments. "},{"title":"Patterns​","type":1,"pageTitle":"Creating Syntaxes","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes#patterns","content":"A given piece of text can only match one pattern. Once Pragtical decides that a piece of text matches a pattern, it will assign that token type to it and move on. Patterns are tested in the order that they are written in the syntax definition, so the first match will win. Patterns are based on Lua patterns or PCRE (Version 2). You may find detailed information on Lua patterns in the [Lua Reference Manual]. For PCRE, there are various [regex tester websites] that provide documentation. Lua patterns can be used by specifying pattern when defining a pattern, while PCRE can be used by specifying regex when defining a pattern. Each pattern takes one of the following forms: Simple Pattern​ { pattern = &quot;#.*\\n&quot;, type = &quot;comment&quot; },  When pattern is a string, Pragtical will test the input against the pattern. If the input matches, Pragtical will assign the given token type to the input. In this case, any line starting with # will be assigned the type comment. Start &amp; End Pattern​ { pattern = { &quot;%[&quot;, &quot;%]&quot; }, type = &quot;keyword&quot; },  When pattern is a table with 2 elements, Pragtical will use them to test for the start and the end of a range. Everything between the start and the end will be assigned the given token type. In this case, everything between [ and ] will be assigned the type keyword. However, it does not account for escape sequences. Inputs such as [\\]] will be interpreted wrongly as [\\] and ]. Start &amp; End Pattern with Escape​ { pattern = { '&quot;', '&quot;', '\\\\' }, type = &quot;string&quot; },  When pattern is a table with 3 elements, Pragtical will use the first two to test for the start and the end of a range. The last element is used to denote an &quot;escape sequence&quot;. If the text matches the 3rd element followed by the 2nd element, it will not be interpreted as the end of a range. In this case, everything between &quot; and &quot; will be assigned the type string. A string can have escape sequences prefixed with \\. Given the input &quot;\\&quot;Hello John\\&quot;&quot;, the entire input will be assigned the typestring. "},{"title":"Symbols​","type":1,"pageTitle":"Creating Syntaxes","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes#symbols","content":"This is not related to the symbol token type. The symbols section allows you to assign token types to particular keywords or strings - usually reserved words in the language you are highlighting. The token type in this section always take precedence over token types declared in patterns. For example this highlights Host using the function token type,HostName as a keyword, yes, no, any and ask as a literal: [&quot;Host&quot;] = &quot;function&quot;, [&quot;HostName&quot;] = &quot;keyword&quot;, [&quot;yes&quot;] = &quot;literal&quot;, [&quot;no&quot;] = &quot;literal&quot;, [&quot;any&quot;] = &quot;literal&quot;, [&quot;ask&quot;] = &quot;literal&quot;,  Tips: double-check your patterns!​ There are a few common mistakes that can be made when using the symbols table in conjunction with patterns. Case 1: Spaces between two symbols tokens​ Let's have an example: { pattern = &quot;[%a_][%w_]+%s+()[%a_][%w_]+&quot;, type = { &quot;keyword2&quot;, &quot;symbol&quot; } }  Let's explain the pattern a bit (omitting the empty parentheses): [%a_] = any alphabet and underscore [%w_] = any alphabet, number and underscore %s = any whitespace character WORD = [%a_] followed by (1 or more [%w_]) pattern = WORD followed by (one or more %s) followed by WORD  Afterwards, you add an entry [&quot;my&quot;] = &quot;literal&quot; in the symbols table. You test the syntax with my functionand found that &quot;my&quot; isn't highlighted as literal. Why did that happen? symbols table requires an exact match. If you look carefully, the empty parentheses (()) is placed after the space! This tells Pragtical that WORD followed by (one or more %s) is a token, which will match my (note the space in the match). The fix is to add a normal token for the whitespace between the two tokens: { pattern = &quot;[%a_][%w_]+()%s+()[%a_][%w_]+&quot;, type = { &quot;keyword2&quot;, &quot;normal&quot;, &quot;symbol&quot; } }  Case 2: Patterns &amp; symbols tokens​ One might assume that Pragtical magically matches text against the symbols table. This is not the case. In some languages, people may add a generic pattern to delegate the matching to the symbols table. { pattern = &quot;[%a_][%w_]*&quot;, &quot;symbol&quot; }  However, the symbols table may look like this: symbols = { [&quot;my-symbol&quot;] = &quot;function&quot;, [&quot;..something_else&quot;] = &quot;literal&quot; }  &quot;my-symbol contains a dash (-) and &quot;..something_else&quot; contains 2 dots (.). None of the characters are matched by [%a_][%w_]*! Beware of the text you intend to match in the symbols table.If you want to use it, you need to ensure that it matches one of the patterns. The correct patterns are: { pattern = &quot;[%a_][%w%-_]*&quot;, &quot;symbol&quot; }, { pattern = &quot;%.%.[%a_][%w_]*&quot;, &quot;symbol&quot; },  "},{"title":"Testing Your New Syntax​","type":1,"pageTitle":"Creating Syntaxes","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes#testing-your-new-syntax","content":"To test your new syntax highlighting you need to do two things: Reload the Pragtical coreLoad a file in your chosen language and see how it looks To reload the core, you can either restart Pragtical or reload it. To do this, type ctrl+shit+p to open the command palette, then select Core: Restart (or type crr or something similar to match it), then press Enter. You will need to restart the core after any changes you make to the syntax highlighting definition. "},{"title":"Example advanced syntax: Markdown​","type":1,"pageTitle":"Creating Syntaxes","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes#example-advanced-syntax-markdown","content":"!!! note This example has features from 2.1. It is not compatible with older versions of Pragtical. Not all languages are as simple as SSH config files. Markup languages like HTML and Markdown are especially hard to parse correctly. Here's the Markdown syntax file in its full glory: -- mod-version:3 local syntax = require &quot;core.syntax&quot; local style = require &quot;core.style&quot; local core = require &quot;core&quot; local initial_color = style.syntax[&quot;keyword2&quot;] -- Add 3 type of font styles for use on markdown files for _, attr in pairs({&quot;bold&quot;, &quot;italic&quot;, &quot;bold_italic&quot;}) do local attributes = {} if attr ~= &quot;bold_italic&quot; then attributes[attr] = true else attributes[&quot;bold&quot;] = true attributes[&quot;italic&quot;] = true end -- no way to copy user custom font with additional attributes :( style.syntax_fonts[&quot;markdown_&quot;..attr] = renderer.font.load( DATADIR .. &quot;/fonts/JetBrainsMono-Regular.ttf&quot;, style.code_font:get_size(), attributes ) -- also add a color for it style.syntax[&quot;markdown_&quot;..attr] = style.syntax[&quot;keyword2&quot;] end local in_squares_match = &quot;^%[%]&quot; local in_parenthesis_match = &quot;^%(%)&quot; syntax.add { name = &quot;Markdown&quot;, files = { &quot;%.md$&quot;, &quot;%.markdown$&quot; }, block_comment = { &quot;&lt;!--&quot;, &quot;--&gt;&quot; }, space_handling = false, -- turn off this feature to handle it our selfs patterns = { ---- Place patterns that require spaces at start to optimize matching speed ---- and apply the %s+ optimization immediately afterwards -- bullets { pattern = &quot;^%s*%*%s&quot;, type = &quot;number&quot; }, { pattern = &quot;^%s*%-%s&quot;, type = &quot;number&quot; }, { pattern = &quot;^%s*%+%s&quot;, type = &quot;number&quot; }, -- numbered bullet { pattern = &quot;^%s*[0-9]+[%.%)]%s&quot;, type = &quot;number&quot; }, -- blockquote { pattern = &quot;^%s*&gt;+%s&quot;, type = &quot;string&quot; }, -- alternative bold italic formats { pattern = { &quot;%s___&quot;, &quot;___%f[%s]&quot; }, type = &quot;markdown_bold_italic&quot; }, { pattern = { &quot;%s__&quot;, &quot;__%f[%s]&quot; }, type = &quot;markdown_bold&quot; }, { pattern = { &quot;%s_[%S]&quot;, &quot;_%f[%s]&quot; }, type = &quot;markdown_italic&quot; }, -- reference links { pattern = &quot;^%s*%[%^()[&quot;..in_squares_match..&quot;]+()%]: &quot;, type = { &quot;function&quot;, &quot;number&quot;, &quot;function&quot; } }, { pattern = &quot;^%s*%[%^?()[&quot;..in_squares_match..&quot;]+()%]:%s+.+\\n&quot;, type = { &quot;function&quot;, &quot;number&quot;, &quot;function&quot; } }, -- optimization { pattern = &quot;%s+&quot;, type = &quot;normal&quot; }, ---- HTML rules imported and adapted from language_html ---- to not conflict with markdown rules -- Inline JS and CSS { pattern = { &quot;&lt;%s*[sS][cC][rR][iI][pP][tT]%s+[tT][yY][pP][eE]%s*=%s*&quot; .. &quot;['\\&quot;]%a+/[jJ][aA][vV][aA][sS][cC][rR][iI][pP][tT]['\\&quot;]%s*&gt;&quot;, &quot;&lt;%s*/[sS][cC][rR][iI][pP][tT]&gt;&quot; }, syntax = &quot;.js&quot;, type = &quot;function&quot; }, { pattern = { &quot;&lt;%s*[sS][cC][rR][iI][pP][tT]%s*&gt;&quot;, &quot;&lt;%s*/%s*[sS][cC][rR][iI][pP][tT]&gt;&quot; }, syntax = &quot;.js&quot;, type = &quot;function&quot; }, { pattern = { &quot;&lt;%s*[sS][tT][yY][lL][eE][^&gt;]*&gt;&quot;, &quot;&lt;%s*/%s*[sS][tT][yY][lL][eE]%s*&gt;&quot; }, syntax = &quot;.css&quot;, type = &quot;function&quot; }, -- Comments { pattern = { &quot;&lt;!%-%-&quot;, &quot;%-%-&gt;&quot; }, type = &quot;comment&quot; }, -- Tags { pattern = &quot;%f[^&lt;]![%a_][%w_]*&quot;, type = &quot;keyword2&quot; }, { pattern = &quot;%f[^&lt;][%a_][%w_]*&quot;, type = &quot;function&quot; }, { pattern = &quot;%f[^&lt;]/[%a_][%w_]*&quot;, type = &quot;function&quot; }, -- Attributes { pattern = &quot;[a-z%-]+%s*()=%s*()\\&quot;.-\\&quot;&quot;, type = { &quot;keyword&quot;, &quot;operator&quot;, &quot;string&quot; } }, { pattern = &quot;[a-z%-]+%s*()=%s*()'.-'&quot;, type = { &quot;keyword&quot;, &quot;operator&quot;, &quot;string&quot; } }, { pattern = &quot;[a-z%-]+%s*()=%s*()%-?%d[%d%.]*&quot;, type = { &quot;keyword&quot;, &quot;operator&quot;, &quot;number&quot; } }, -- Entities { pattern = &quot;&amp;#?[a-zA-Z0-9]+;&quot;, type = &quot;keyword2&quot; }, ---- Markdown rules -- math { pattern = { &quot;%$%$&quot;, &quot;%$%$&quot;, &quot;\\\\&quot; }, type = &quot;string&quot;, syntax = &quot;.tex&quot;}, { pattern = { &quot;%$&quot;, &quot;%$&quot;, &quot;\\\\&quot; }, type = &quot;string&quot;, syntax = &quot;.tex&quot;}, -- code blocks { pattern = { &quot;```c++&quot;, &quot;```&quot; }, type = &quot;string&quot;, syntax = &quot;.cpp&quot; }, -- ... there's some other patterns here, but I removed them for brevity { pattern = { &quot;```lobster&quot;, &quot;```&quot; }, type = &quot;string&quot;, syntax = &quot;.lobster&quot; }, { pattern = { &quot;```&quot;, &quot;```&quot; }, type = &quot;string&quot; }, { pattern = { &quot;``&quot;, &quot;``&quot; }, type = &quot;string&quot; }, { pattern = { &quot;%f[\\\\`]%`[%S]&quot;, &quot;`&quot; }, type = &quot;string&quot; }, -- strike { pattern = { &quot;~~&quot;, &quot;~~&quot; }, type = &quot;keyword2&quot; }, -- highlight { pattern = { &quot;==&quot;, &quot;==&quot; }, type = &quot;literal&quot; }, -- lines { pattern = &quot;^%-%-%-+\\n&quot;, type = &quot;comment&quot; }, { pattern = &quot;^%*%*%*+\\n&quot;, type = &quot;comment&quot; }, { pattern = &quot;^___+\\n&quot;, type = &quot;comment&quot; }, -- bold and italic { pattern = { &quot;%*%*%*%S&quot;, &quot;%*%*%*&quot; }, type = &quot;markdown_bold_italic&quot; }, { pattern = { &quot;%*%*%S&quot;, &quot;%*%*&quot; }, type = &quot;markdown_bold&quot; }, -- handle edge case where asterisk can be at end of line and not close { pattern = { &quot;%f[\\\\%*]%*[%S]&quot;, &quot;%*%f[^%*]&quot; }, type = &quot;markdown_italic&quot; }, -- alternative bold italic formats { pattern = &quot;^___[%s%p%w]+___%s&quot; , type = &quot;markdown_bold_italic&quot; }, { pattern = &quot;^__[%s%p%w]+__%s&quot; , type = &quot;markdown_bold&quot; }, { pattern = &quot;^_[%s%p%w]+_%s&quot; , type = &quot;markdown_italic&quot; }, -- heading with custom id { pattern = &quot;^#+%s[%w%s%p]+(){()#[%w%-]+()}&quot;, type = { &quot;keyword&quot;, &quot;function&quot;, &quot;string&quot;, &quot;function&quot; } }, -- headings { pattern = &quot;^#+%s.+\\n&quot;, type = &quot;keyword&quot; }, -- superscript and subscript { pattern = &quot;%^()%d+()%^&quot;, type = { &quot;function&quot;, &quot;number&quot;, &quot;function&quot; } }, { pattern = &quot;%~()%d+()%~&quot;, type = { &quot;function&quot;, &quot;number&quot;, &quot;function&quot; } }, -- definitions { pattern = &quot;^:%s.+&quot;, type = &quot;function&quot; }, -- emoji { pattern = &quot;:[a-zA-Z0-9_%-]+:&quot;, type = &quot;literal&quot; }, -- images and link { pattern = &quot;!?%[!?%[()[&quot;..in_squares_match..&quot;]+()%]%(()[&quot;..in_parenthesis_match..&quot;]+()%)%]%(()[&quot;..in_parenthesis_match..&quot;]+()%)&quot;, type = { &quot;function&quot;, &quot;string&quot;, &quot;function&quot;, &quot;number&quot;, &quot;function&quot;, &quot;number&quot;, &quot;function&quot; } }, { pattern = &quot;!?%[!?%[?()[&quot;..in_squares_match..&quot;]+()%]?%]%(()[&quot;..in_parenthesis_match..&quot;]+()%)&quot;, type = { &quot;function&quot;, &quot;string&quot;, &quot;function&quot;, &quot;number&quot;, &quot;function&quot; } }, -- reference links { pattern = &quot;%[()[&quot;..in_squares_match..&quot;]+()%] *()%[()[&quot;..in_squares_match..&quot;]+()%]&quot;, type = { &quot;function&quot;, &quot;string&quot;, &quot;function&quot;, &quot;function&quot;, &quot;number&quot;, &quot;function&quot; } }, { pattern = &quot;!?%[%^?()[&quot;..in_squares_match..&quot;]+()%]&quot;, type = { &quot;function&quot;, &quot;number&quot;, &quot;function&quot; } }, -- url's and email { pattern = &quot;&lt;[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+%.[a-zA-Z0-9-.]+&gt;&quot;, type = &quot;function&quot; }, { pattern = &quot;&lt;https?://%S+&gt;&quot;, type = &quot;function&quot; }, { pattern = &quot;https?://%S+&quot;, type = &quot;function&quot; }, -- optimize consecutive dashes used in tables { pattern = &quot;%-+&quot;, type = &quot;normal&quot; }, }, symbols = { }, } -- Adjust the color on theme changes core.add_thread(function() while true do if initial_color ~= style.syntax[&quot;keyword2&quot;] then for _, attr in pairs({&quot;bold&quot;, &quot;italic&quot;, &quot;bold_italic&quot;}) do style.syntax[&quot;markdown_&quot;..attr] = style.syntax[&quot;keyword2&quot;] end initial_color = style.syntax[&quot;keyword2&quot;] end coroutine.yield(1) end end)  It demonstrates a lot of syntax highlighting features that were added to v2.1.0 and some workarounds needed. "},{"title":"Syntax fonts (Since 1.16.10)​","type":1,"pageTitle":"Creating Syntaxes","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes#syntax-fonts-since-11610","content":"The syntax allows users to set different font styles (bold, italic, etc.) for different patterns. To change the font style of a token, add a Font to style.syntax_fonts[token_type]. For example: -- will ensure every &quot;fancysyntax_fancy_token&quot; is italic style.syntax_fonts[&quot;fancysyntax_fancy_token&quot;] = renderer.font.load(&quot;myfont.ttf&quot;, 14 * SCALE, { italic = true })  The markdown example automates this with a for loop. The limitations here are that fonts cannot be copied with different attributes, thus the font path has to be hard-coded. Other than that, abusing style.syntax_fontsmay lead to slow performance and high memory consumption. This is very obvious when the user tries to resize the editor with ctrl-scroll or ctrl+ and ctrl-. Please use it in moderation. "},{"title":"Space handling (since v2.1.0)​","type":1,"pageTitle":"Creating Syntaxes","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes#space-handling-since-v210","content":"By default, Pragtical prepends a pattern { pattern = &quot;%s+&quot;, type = &quot;normal&quot; }to the syntax. This improves the performance drastically on lines that starts with whitespace (e.g. heavily indented lines). It works by matching the whitespace before other patterns in order to prevent Pragtical from iterating the entire syntax. However, there may be syntaxes that require matching spaces (e.g. Markdown with indented blocks) so this can be disabled by setting space_handling to false. To keep the space handling optimization or to support older versions of Pragtical,{ pattern = &quot;%s+&quot;, type = &quot;normal&quot; } can be added after patterns that require space. "},{"title":"Simple patterns with multiple tokens (v1.16.10)​","type":1,"pageTitle":"Creating Syntaxes","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes#simple-patterns-with-multiple-tokens-v11610","content":"This is an excerpt taken from the Markdown plugin: local in_squares_match = &quot;^%[%]&quot; -- reference links { pattern = &quot;^%s*%[%^()[&quot;..in_squares_match..&quot;]+()%]: &quot;, type = { &quot;function&quot;, &quot;number&quot;, &quot;function&quot; } },  Sometimes it makes sense to highlight different parts of a pattern differently. An empty parenthesis (()) in Lua patterns will return the position of the text in the parentheses. This will tell Pragtical when to change the type of token. For instance, ^%s*%[%^ is &quot;function&quot;,[&quot;..in_squares_match..&quot;]+ is &quot;number&quot;and %]: is &quot;function&quot;. "},{"title":"Subsyntaxes (Since v1.16.10)​","type":1,"pageTitle":"Creating Syntaxes","url":"/docs/developer-guide/syntaxes-and-themes/creating-syntaxes#subsyntaxes-since-v11610","content":"Pragtical supports embedding another syntax into the existing syntax. This is used to support code blocks inside the Markdown syntax. For example: { pattern = { &quot;```cpp&quot;, &quot;```&quot; }, type = &quot;string&quot;, syntax = &quot;.cpp&quot; },  This would highlight ```cpp and ``` with &quot;string&quot;while everything inside them will be highlighted with a syntax that matches &quot;.cpp&quot;. "},{"title":"macOS Keymap","type":0,"sectionRef":"#","url":"/docs/user-guide/macos-keymap","content":"macOS Keymap This is the default keyboard shortcuts on macOS. Your configuration may differ as plugins can modify them. Command\tKeysautocomplete:cancel\tescape autocomplete:complete\ttab autocomplete:next\tdown autocomplete:previous\tup command:complete\ttab command:escape\tescape command:select-next\tdown command:select-previous\tup command:submit\treturn , keypad enter context:focus-next\tdown context:focus-previous\tup context:hide\tescape context:on-selected\treturn context:show\tmenu core:change-project-folder\tcmd+shift+c core:find-command\tcmd+shift+p core:find-file\tcmd+p core:new-doc\tcmd+n core:open-file\tcmd+o core:open-project-folder\tcmd+shift+o core:restart\tcmd+option+r core:toggle-fullscreen\tcmd+ctrl+return dialog:next-entry\tright dialog:previous-entry\tleft dialog:select\treturn , keypad enter dialog:select-no\tescape doc:backspace\tbackspace , shift+backspace doc:copy\tcmd+c , ctrl+insert doc:create-cursor-next-line\tcmd+option+down doc:create-cursor-previous-line\tcmd+option+up doc:cut\tcmd+x doc:delete\tshift+delete , delete doc:delete-lines\tcmd+shift+k doc:delete-to-end-of-line\tcmd+delete doc:delete-to-next-word-end\tcmd+shift+delete , option+delete doc:delete-to-previous-word-start\toption+backspace , cmd+shift+backspace doc:delete-to-start-of-indentation\tcmd+backspace doc:duplicate-lines\tcmd+shift+d doc:go-to-line\tcmd+g doc:indent\ttab doc:join-lines\tcmd+j doc:move-lines-down\toption+down doc:move-lines-up\toption+up doc:move-to-end-of-doc\tcmd+down doc:move-to-end-of-line\tend , cmd+right doc:move-to-next-block-end\tcmd+] doc:move-to-next-char\tright doc:move-to-next-line\tdown doc:move-to-next-page\tpagedown doc:move-to-next-word-end\toption+right doc:move-to-previous-block-start\tcmd+[ doc:move-to-previous-char\tleft doc:move-to-previous-line\tup doc:move-to-previous-page\tpageup doc:move-to-previous-word-start\toption+left doc:move-to-start-of-doc\tcmd+up doc:move-to-start-of-indentation\thome , cmd+left doc:newline\treturn , keypad enter doc:newline-above\tcmd+shift+return doc:newline-below\tcmd+return doc:paste\tcmd+v , shift+insert doc:redo\tcmd+y doc:save\tcmd+s doc:save-as\tcmd+shift+s doc:select-all\tcmd+a doc:select-lines\tcmd+l doc:select-none\tescape doc:select-to-cursor\tshift+1lclick doc:select-to-end-of-doc\tcmd+shift+down doc:select-to-end-of-line\tshift+end , cmd+shift+right doc:select-to-next-block-end\tcmd+shift+] doc:select-to-next-char\tshift+right doc:select-to-next-line\tshift+down doc:select-to-next-page\tshift+pagedown doc:select-to-next-word-end\toption+shift+right doc:select-to-previous-block-start\tcmd+shift+[ doc:select-to-previous-char\tshift+left doc:select-to-previous-line\tshift+up doc:select-to-previous-page\tshift+pageup doc:select-to-previous-word-start\toption+shift+left doc:select-to-start-of-doc\tcmd+shift+up doc:select-to-start-of-indentation\tshift+home , cmd+shift+left doc:select-word\tcmd+shift+l , cmd+d doc:set-cursor\t1lclick doc:set-cursor-line\t3lclick doc:set-cursor-word\t2lclick doc:split-cursor\tctrl+1lclick doc:toggle-line-comments\tcmd+/ doc:undo\tcmd+z doc:unindent\tshift+tab find-replace:find\tcmd+f find-replace:previous-find\tshift+f3 find-replace:repeat-find\tf3 find-replace:replace\tcmd+r find-replace:select-add-all\tcmd+shift+l find-replace:select-add-next\tcmd+d find-replace:select-next\tcmd+f3 line-wrapping:toggle\tf10 macro:play\tcmd+; macro:toggle-record\tcmd+shift+; project-search:find\tcmd+shift+f project-search:move-to-end-of-doc\tend , cmd+end project-search:move-to-next-page\tpagedown project-search:move-to-previous-page\tpageup project-search:move-to-start-of-doc\tcmd+home , home project-search:open-selected\treturn project-search:refresh\tf5 project-search:select-next\tdown project-search:select-previous\tup quote:quote\tcmd+' reflow:reflow\tctrl+shift+q root:close-or-quit\tcmd+w root:horizontal-scroll\tshift+hwheel , hwheel root:move-tab-left\tcmd+pageup root:move-tab-right\tcmd+pagedown root:scroll\twheel root:split-down\tcmd+ctrl+shift+k root:split-left\tcmd+ctrl+shift+j root:split-right\tcmd+ctrl+shift+l root:split-up\tcmd+ctrl+shift+i root:switch-to-down\tcmd+ctrl+k root:switch-to-left\tcmd+ctrl+j root:switch-to-next-tab\tctrl+tab root:switch-to-previous-tab\tctrl+shift+tab root:switch-to-right\tcmd+ctrl+l root:switch-to-tab-1\tcmd+1 root:switch-to-tab-2\tcmd+2 root:switch-to-tab-3\tcmd+3 root:switch-to-tab-4\tcmd+4 root:switch-to-tab-5\tcmd+5 root:switch-to-tab-6\tcmd+6 root:switch-to-tab-7\tcmd+7 root:switch-to-tab-8\tcmd+8 root:switch-to-tab-9\tcmd+9 root:switch-to-up\tcmd+ctrl+i scale:decrease\tcmd+- , cmd+wheeldown scale:increase\tcmd+= , cmd+wheelup scale:reset\tcmd+0 treeview:collapse\tleft treeview:delete\tdelete treeview:deselect\tescape treeview:expand\tright treeview:new-folder\tcmd+lclick , cmd+return treeview:next\tdown treeview:open\treturn treeview:previous\tup treeview:select\tmclick treeview:select-and-open\tlclick treeview:toggle\tcmd+\\","keywords":""},{"title":"Configuration","type":0,"sectionRef":"#","url":"/docs/user-guide/configuration","content":"","keywords":""},{"title":"Location​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#location","content":"Pragtical searches a list of paths to store user configuration. This path is also known as USERDIR. The first path that is available will be used. &lt;path_to_pragtical_executable&gt;/user$PRAGTICAL_USERDIR$XDG_CONFIG_HOME/pragtical$HOME/.config/pragtical On Windows, $HOME will be replaced with $USERPROFILE. "},{"title":"User Module​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#user-module","content":"Pragtical is mainly configured through the user module. The user module is a Lua script run by Pragtical during startup, before plugins are loaded. Thus, you can change configuration options, bind shortcut keys, load color schemes, change the fonts among other things. To modify the user module, you can run the command core:open-user-module. You can also modify the file USERDIR/init.lua directly. Pragtical will reload the file on file change. "},{"title":"Project Module​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#project-module","content":"The project module is an optional module which is loaded from the current project's directory when Pragtical is started. Project modules can be useful for things like adding custom commands for project-specific build systems, or loading project-specific plugins. The project module is loaded when the editor starts, after the user module is loaded but before plugins are loaded. To modify project module, you can run the command core:open-project-module. The command will create a project module if it does not exist. "},{"title":"Settings GUI​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#settings-gui","content":"The settings plugin provides a GUI to configure Pragtical.  "},{"title":"Fonts​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#fonts","content":"Pragtical comes with JetBrains Mono and Fira Sans by default. To change the fonts used by the editor, you can change the variable style.font and style.code_font. These variables are responsible for the UI font and code font respectively. To load a font, you can use renderer.font.load(). This function allows you to load a font file as long as it is supported by FreeType. The function takes in the path to the font file and the pixel size of the font. When displaying text with multiple languages, multiple fonts are often required. Pragtical supports fallback fonts by using the functionrenderer.font.group(). This function takes in a table of fonts loaded byrenderer.font.load(). Pragtical will attempt to render fonts based on the order the fonts are added to the table. User ModuleSettings UI For this example, we'll load Noto Sans Mono, which is located in /usr/share/fonts/noto/NotoSansMono-Regular.ttfand set it as our code font. local style = require &quot;core.style&quot; -- SCALE is the pixel scaling required for the current DPI setup. -- This converts the font size from points to pixels. style.code_font = renderer.font.load(&quot;/usr/share/fonts/noto/NotoSansMono-Regular.ttf&quot;, 15 * SCALE) Next, we'll also load Noto Sans Mono CJK SC, which is located in /usr/share/fonts/noto-cjk/NotoSansCJK-Regular.ttc and use it as fallback. local style = require &quot;core.style&quot; -- do not ever do style.code_font = { style.code_font, ... } -- style.code_font can be a font group and pragtical does not -- support nested font groups! style.code_font = renderer.font.group { renderer.font.load(&quot;/usr/share/fonts/noto/NotoSansMono-Regular.ttf&quot;, 15 * SCALE), renderer.font.load(&quot;/usr/share/fonts/noto-cjk/NotoSansCJK-Regular.ttc&quot;, 15 * SCALE) } No .ttc fonts support Pragtical does not support using a specfific face in a TrueType collection (.ttc) file. Only the first face can be used. "},{"title":"Keyboard shortcuts​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#keyboard-shortcuts","content":"Keyboard shortcuts are managed by the core.keymap module. This module maps keyboard shortcuts to one or more commands, where each command has a predicate that determine whether it should run based on certain conditions. For a list of default keyboard shortcuts, check out these pages: non-macOS platforms (Windows, Linux, etc.)macOS "},{"title":"Adding a keyboard shortcut​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#adding-a-keyboard-shortcut","content":"To add keyboard shortcuts, you can use keymap.add(). User ModuleSettings UI For example, to bind ctrl+m to move the cursor backwards and then upwards, do: local keymap = require &quot;core.keymap&quot; keymap.add { [&quot;ctrl+m&quot;] = &quot;doc:move-to-previous-char&quot; } keymap.add { [&quot;ctrl+m&quot;] = &quot;doc:move-to-previous-line&quot; } Pragtical will automatically execute both commands in the order that they're added. Alternatively, to override a keyboard shortcut completely, add true on the second parameter of keybind.add(). local keymap = require &quot;core.keymap&quot; keymap.add { [&quot;ctrl+m&quot;] = &quot;doc:move-to-previous-char&quot; } keymap.add({ [&quot;ctrl+m&quot;] = &quot;doc:move-to-previous-line&quot; }, true) This will cause Pragtical to only runcore:move-to-previous-line when ctrl+m is pressed. "},{"title":"Removing a keyboard shortcut​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#removing-a-keyboard-shortcut","content":"To remove an existing keyboard shortcut, you can usekeymap.unbind(). User ModuleSettings UI In this example, we will unbind ctrl+m. local keymap = require &quot;core.keymap&quot; keymap.unbind(&quot;ctrl+m&quot;, &quot;doc:move-to-previous-line&quot;) keymap.unbind(&quot;ctrl+m&quot;, &quot;doc:move-to-previous-char&quot;) This will unbind the two commands from ctrl+m. Alternatively, to unbind all commands from ctrl+m, you can omit the second parameter to keymap.unbind(). local keymap = require &quot;core.keymap&quot; keymap.unbind(&quot;ctrl+m&quot;, &quot;doc:move-to-previous-line&quot;) keymap.unbind(&quot;ctrl+m&quot;, &quot;doc:move-to-previous-char&quot;)  "},{"title":"Themes​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#themes","content":"The default theme is a dark theme. Themes are implemented as plugins that changes the styling variables of Pragtical. This can be changed with core.reload_module() and loading the appropriate theme file. User ModuleSettings UI To load the theme summer, add core.reload_module &quot;colors.summer&quot;. core.reload_module &quot;color.summer&quot;  "},{"title":"Other options​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#other-options","content":"There are a lot of configuration options that can be modified. A list of these options can be found in data/core/config.lua, but we'll list a few common ones here. "},{"title":"Indentation​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#indentation","content":"To change the indentation size and type, set config.indent_sizeand config.tab_type respectively. local config = require &quot;core.config&quot; config.indent_size = 4 -- set indentation to 4 config.tab_type = -- &quot;soft&quot; for spaces, &quot;hard&quot; for tabs  "},{"title":"Window decoration​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#window-decoration","content":"If you're on platforms such as Wayland where window decoration may be client drawn, you can set config.borderless to true. This will let Pragtical draw its own window decoration. local config = require &quot;core.config&quot; -- enable custom window borders config.borderless = true  "},{"title":"Project files limit​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#project-files-limit","content":"When opening large directories, Pragtical will often complain about reaching the project file limit. This is because Pragtical becomes slower when it needs to index these files on startup. If your filesystem has good performance, you can increase this limit by setting config.max_project_files to something else. The default value is 2000. local config = require &quot;core.config&quot; -- set max project files to 5000 config.max_project_files = 5000  "},{"title":"Ignoring files​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#ignoring-files","content":"Pragtical does not index certain files and directories by default, such as version control and executables. This can be modified by changing config.ignore_files. This value is a table of Lua patterns. For directories, the pattern ends with a forward slash (/). For files, the pattern ends with the end anchor ($). local config = require &quot;core.config&quot; -- ignore .data/ table.insert(config.ignore_files, &quot;^%.data/&quot;)  "},{"title":"Caret​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#caret","content":"You can disable or change the blinking rate of the caret. local config = require &quot;core.config&quot; config.disable_blink = true -- disable caret blinking config.blink_period = 0.4 -- change caret blink rate  "},{"title":"FPS (Frame rate)​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#fps-frame-rate","content":"The default frame rate is set to 60. If this causes an issue, you can set it via config.fps. local config = require &quot;core.config&quot; -- set FPS to 30 config.fps = 30  "},{"title":"Transitions​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#transitions","content":"You can disable any animations/transitions by setting config.transitionsto false. To disable individual transitions, you can set any member ofconfig.disabled_transitions to true. local config = require &quot;core.config&quot; -- disable all transitions config.transitions = false -- disable commandview and scroll transitions config.disabled_transitions = { commandview = true, scroll = true }  To change the animation rate, set config.animation_rate. local config = require &quot;core.config&quot; -- slow down the animations to half speed config.animation_rate = 0.5  "},{"title":"Other options​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#other-options-1","content":"A quick reference of other options. Options\tDescriptionmax_log_items\tMaximum number of log items to store before discarding them. message_timeout\tTime (seconds) to show each message on the StatusView. mouse_wheel_scroll\tNumber of pixels per &quot;scroll&quot;. animate_drag_scroll\tEnable smooth scrolling. force_scrollbar_status\tAlways expand (&quot;expanded&quot;) or hide (&quot;contracted&quot;) the scrollbar. file_size_limit\tFile size limit (MB) before Pragtical refuses to load it. symbol_pattern\tLua pattern used by Pragtical to find symbols. non_word_chars\tA pattern used to find non-word characters. undo_merge_timeout\tTime (seconds) before Pragtical merges edits to form a single undo step. max_undos\tNumber of undo to store per document. max_tabs\tNumber of tabs to show before overflowing. always_show_tabs\tIf true, always show tabs even if only one file is open. highlight_current_line\tHighlights the current line. line_height\tThe spacing between each line. keep_newline_whitespace\tIf true, removes any line that only contains whitespace (space, tabs, etc.) line_limit\tAn advisory limit for characters per line. tab_close_button\tShows or hides the tab close button for each tab. max_clicks\tMaximum number of clicks you can perform in the editor. "},{"title":"Plugins​","type":1,"pageTitle":"Configuration","url":"/docs/user-guide/configuration#plugins","content":"Since the user and project module loads before any plugins, you can configure or disable any plugins in the user and project modules. Plugins obtain their configuration from a table in the config.plugins table. You can add code to user module that modifies the table. To disable a plugin, you need to set the associated config.plugins entry to false. This tells Pragtical to not load the plugin on startup. It will not load nor unload the plugin from the current instance. Some plugins may have options to enable/disable themselves. This allows the plugins to be loaded and toggled without a restart. User ModuleSettings UI In this example, we'll enable the drawwhitespace plugin and set it to only draw whitespaces in the selected text. local config = require &quot;core.config&quot; config.plugins.drawwhitespace = { show_selected_only = true } To disable the plugin, simply assign config.plugins.drawwhitespace to false. local config = require &quot;core.config&quot; config.plugins.drawwhitespace = false  "},{"title":"Plugins","type":0,"sectionRef":"#","url":"/docs/user-guide/plugins","content":"","keywords":""},{"title":"Location​","type":1,"pageTitle":"Plugins","url":"/docs/user-guide/plugins#location","content":"Plugins that come bundled with Pragtical is usually stored inDATADIR/plugins. On macOS, DATADIR is always the application resources directory. On other platforms, Pragtical checks whether the program is installed according to Unix Filesystem Hierarchy Standard. If that is true, then DATADIR will be &lt;path-to-exe&gt;/../share/pragtical. Otherwise, DATADIR will be &lt;path-to-exe&gt;/data. User plugins should be installed into USERDIR/plugins. "},{"title":"Plugin managers​","type":1,"pageTitle":"Plugins","url":"/docs/user-guide/plugins#plugin-managers","content":"Recently, we've standardized various aspects of the plugin repository so that plugin managers can be built to install and manage plugins. Currently, there are two plugin managers made for Pragtical —ppm and Miq. ppm is a plugin manager more akin to distro package managers such as apt and dnf. It also provides a GUI for installing plugins. Miq is a declarative plugin manager that allows user to declare plugins and install/update them all at once. These two plugin managers use vastly different ways of plugin management, so please consult the main page for each plugin manager for exact instructions. "},{"title":"Installing plugins​","type":1,"pageTitle":"Plugins","url":"/docs/user-guide/plugins#installing-plugins","content":"To install a plugin, simply drag the related plugin file intoUSERDIR/plugins. For plugins that comes in a folder, please consult specific instructions for each plugin. Historically, Pragtical does not enforce a specific file structure for these types of plugins. Old plugins may not have a init.lua file, which is used by Lua to find a plugin. In this case, you need to follow their install instructions. ppmMiq To install a plugin with ppm, use ppm plugin install. For example, to install lsp, run: $ ppm plugin install lsp This will install/update the lsp plugin. To install themes or libraries, you can useppm color install and ppm library install respectively. "},{"title":"Updating plugins​","type":1,"pageTitle":"Plugins","url":"/docs/user-guide/plugins#updating-plugins","content":"To update a plugin, you'll need to re-download them. For plugins hosted as separate git repositories, you can simply pull new updates. If you have a plugin manager installed, updating plugins should be easier. ppmMiq To update plugins with ppm, run ppm upgrade. $ ppm upgrade This will update all the plugins to their latest versions. "},{"title":"Uninstalling plugins​","type":1,"pageTitle":"Plugins","url":"/docs/user-guide/plugins#uninstalling-plugins","content":"To remove a plugin, simply delete the associated file/directory. ppmMiq To uninstall a plugin, run ppm plugin uninstall. For instance, to uninstall lsp, run: $ ppm plugin uninstall lsp Uninstalling themes and libraries can be done withppm color uninstall and ppm library uninstall respectively. "}]